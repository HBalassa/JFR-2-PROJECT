
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00001dc8  00001e5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800194  00800194  00001ef0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002396  00000000  00000000  0000215c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001155  00000000  00000000  000044f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017f5  00000000  00000000  00005647  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  00006e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b32  00000000  00000000  000072a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001605  00000000  00000000  00007dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000093d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	91 c6       	rjmp	.+3362   	; 0xd28 <__vector_1>
       6:	00 00       	nop
       8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
       a:	00 00       	nop
       c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
       e:	00 00       	nop
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	00 00       	nop
      18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
      22:	00 00       	nop
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
      32:	00 00       	nop
      34:	59 c0       	rjmp	.+178    	; 0xe8 <__bad_interrupt>
      36:	00 00       	nop
      38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	03 c6       	rjmp	.+3078   	; 0xc48 <__vector_16>
      42:	00 00       	nop
      44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
      46:	00 00       	nop
      48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
      52:	00 00       	nop
      54:	73 c6       	rjmp	.+3302   	; 0xd3c <__vector_21>
      56:	00 00       	nop
      58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
      62:	00 00       	nop
      64:	75 c6       	rjmp	.+3306   	; 0xd50 <__vector_25>
      66:	00 00       	nop
      68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
      72:	00 00       	nop
      74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
      76:	00 00       	nop
      78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
      82:	00 00       	nop
      84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
      86:	00 00       	nop
      88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2d c0       	rjmp	.+90     	; 0xe8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	2b c0       	rjmp	.+86     	; 0xe8 <__bad_interrupt>
      92:	00 00       	nop
      94:	3c 02       	muls	r19, r28
      96:	08 02       	muls	r16, r24
      98:	3c 02       	muls	r19, r28
      9a:	3e 02       	muls	r19, r30
      9c:	3c 02       	muls	r19, r28
      9e:	3e 02       	muls	r19, r30
      a0:	3c 02       	muls	r19, r28
      a2:	3c 02       	muls	r19, r28
      a4:	3e 02       	muls	r19, r30
      a6:	3c 02       	muls	r19, r28
      a8:	3e 02       	muls	r19, r30
      aa:	3c 02       	muls	r19, r28

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e1       	ldi	r29, 0x10	; 16
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e8 ec       	ldi	r30, 0xC8	; 200
      c0:	fd e1       	ldi	r31, 0x1D	; 29
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	a4 39       	cpi	r26, 0x94	; 148
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	a4 e9       	ldi	r26, 0x94	; 148
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	ad 3b       	cpi	r26, 0xBD	; 189
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	d4 d1       	rcall	.+936    	; 0x48c <main>
      e4:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <can_init>:
* Output:
* Notes:
******************************************************************************/
void can_init(void)
{
	CANGCON = (1<<ENASTB); //Enable CAN peripheral
      ea:	82 e0       	ldi	r24, 0x02	; 2
      ec:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	CANGIE = (1<<ENRX); //Enable receive interrupt
      f0:	90 e2       	ldi	r25, 0x20	; 32
      f2:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	CANIE2 = (1<<IEMOB0) | (1<<IEMOB1); //Enable MOB0 interrputs
      f6:	93 e0       	ldi	r25, 0x03	; 3
      f8:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	
	CANBT1 = 0x02; // Set CAN baud rate to 500K, based on datasheet page 268. (Table 19.2)
      fc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x04;
     100:	84 e0       	ldi	r24, 0x04	; 4
     102:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x13;
     106:	83 e1       	ldi	r24, 0x13	; 19
     108:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	
	for(uint8_t i=0; i<15; i++)
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	20 c0       	rjmp	.+64     	; 0x150 <can_init+0x66>
	{
		CANPAGE = i << 4;	// Set initial value to all MOb registers
     110:	98 2f       	mov	r25, r24
     112:	92 95       	swap	r25
     114:	90 7f       	andi	r25, 0xF0	; 240
     116:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANSTMOB = 0; // CAN MOb Status Register
     11a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0; // CAN MOb Control and DLC Register
     11e:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANIDT4 = 0; // CAN Identifier Tag Registers 4,3,2,1
     122:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDT3 = 0; 
     126:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT2 = 0; 
     12a:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = 0; 
     12e:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDM4 = 0; // CAN Identifier Mask Registers 4,3,2,1
     132:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANIDM3 = 0; 
     136:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM2 = 0;
     13a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM1 = 0;
     13e:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANSTMH = 0; // CAN Time Stamp Registers 
     142:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7e00f9>
		CANSTML = 0;
     146:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>
		CANMSG = 0; //CAN Data Message Register
     14a:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
	
	CANBT1 = 0x02; // Set CAN baud rate to 500K, based on datasheet page 268. (Table 19.2)
	CANBT2 = 0x04;
	CANBT3 = 0x13;
	
	for(uint8_t i=0; i<15; i++)
     14e:	8f 5f       	subi	r24, 0xFF	; 255
     150:	8f 30       	cpi	r24, 0x0F	; 15
     152:	f0 f2       	brcs	.-68     	; 0x110 <can_init+0x26>
		CANIDM1 = 0;
		CANSTMH = 0; // CAN Time Stamp Registers 
		CANSTML = 0;
		CANMSG = 0; //CAN Data Message Register
	}
	CANGIE |= (1<<ENIT); // Enable all CAN interrupts
     154:	eb ed       	ldi	r30, 0xDB	; 219
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 68       	ori	r24, 0x80	; 128
     15c:	80 83       	st	Z, r24
     15e:	08 95       	ret

00000160 <CAN_ReceiveEnableMob>:
* Input:
* Output:
* Notes:
******************************************************************************/
void CAN_ReceiveEnableMob(uint8_t page, uint32_t id, uint8_t extended, uint8_t dlc)
{
     160:	0f 93       	push	r16

	CANPAGE = page << 4;  // MOb0
     162:	82 95       	swap	r24
     164:	80 7f       	andi	r24, 0xF0	; 240
     166:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	CANSTMOB = 0x00;	  // Clear status flags
     16a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

	CANIDM4 = 0xFF;		  // Full filtering
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM3 = 0xFF;
     174:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM2 = 0xFF;
     178:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = 0xFF;
     17c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

	if(extended)
     180:	22 23       	and	r18, r18
     182:	59 f1       	breq	.+86     	; 0x1da <CAN_ReceiveEnableMob+0x7a>
	{
		CANIDT4 = id << 3;
     184:	84 2f       	mov	r24, r20
     186:	88 0f       	add	r24, r24
     188:	88 0f       	add	r24, r24
     18a:	88 0f       	add	r24, r24
     18c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDT3 = id >> 5;
     190:	db 01       	movw	r26, r22
     192:	ca 01       	movw	r24, r20
     194:	68 94       	set
     196:	14 f8       	bld	r1, 4
     198:	b6 95       	lsr	r27
     19a:	a7 95       	ror	r26
     19c:	97 95       	ror	r25
     19e:	87 95       	ror	r24
     1a0:	16 94       	lsr	r1
     1a2:	d1 f7       	brne	.-12     	; 0x198 <CAN_ReceiveEnableMob+0x38>
     1a4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT2 = id >> 13;
     1a8:	db 01       	movw	r26, r22
     1aa:	ca 01       	movw	r24, r20
     1ac:	07 2e       	mov	r0, r23
     1ae:	7d e0       	ldi	r23, 0x0D	; 13
     1b0:	b6 95       	lsr	r27
     1b2:	a7 95       	ror	r26
     1b4:	97 95       	ror	r25
     1b6:	87 95       	ror	r24
     1b8:	7a 95       	dec	r23
     1ba:	d1 f7       	brne	.-12     	; 0x1b0 <CAN_ReceiveEnableMob+0x50>
     1bc:	70 2d       	mov	r23, r0
     1be:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = id >> 21;
     1c2:	03 2e       	mov	r0, r19
     1c4:	35 e1       	ldi	r19, 0x15	; 21
     1c6:	76 95       	lsr	r23
     1c8:	67 95       	ror	r22
     1ca:	57 95       	ror	r21
     1cc:	47 95       	ror	r20
     1ce:	3a 95       	dec	r19
     1d0:	d1 f7       	brne	.-12     	; 0x1c6 <CAN_ReceiveEnableMob+0x66>
     1d2:	30 2d       	mov	r19, r0
     1d4:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     1d8:	10 c0       	rjmp	.+32     	; 0x1fa <CAN_ReceiveEnableMob+0x9a>
	}
	else
	{
		CANIDT2 = id << 5;
     1da:	84 2f       	mov	r24, r20
     1dc:	82 95       	swap	r24
     1de:	88 0f       	add	r24, r24
     1e0:	80 7e       	andi	r24, 0xE0	; 224
     1e2:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = id >> 3;
     1e6:	68 94       	set
     1e8:	12 f8       	bld	r1, 2
     1ea:	76 95       	lsr	r23
     1ec:	67 95       	ror	r22
     1ee:	57 95       	ror	r21
     1f0:	47 95       	ror	r20
     1f2:	16 94       	lsr	r1
     1f4:	d1 f7       	brne	.-12     	; 0x1ea <CAN_ReceiveEnableMob+0x8a>
     1f6:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	}

	CANCDMOB = (1 << CONMOB1) | (extended<<IDE) | dlc; // Enable Rx, extended ID, set DLC to 8
     1fa:	80 e1       	ldi	r24, 0x10	; 16
     1fc:	28 9f       	mul	r18, r24
     1fe:	90 01       	movw	r18, r0
     200:	11 24       	eor	r1, r1
     202:	20 2b       	or	r18, r16
     204:	20 68       	ori	r18, 0x80	; 128
     206:	20 93 ef 00 	sts	0x00EF, r18	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
}
     20a:	0f 91       	pop	r16
     20c:	08 95       	ret

0000020e <CAN_SendMob>:
* Input:			
* Output:
* Notes:
******************************************************************************/
void CAN_SendMob(uint8_t page, uint32_t id, uint8_t extended, uint8_t dlc, uint8_t *data)
{
     20e:	ef 92       	push	r14
     210:	ff 92       	push	r15
     212:	0f 93       	push	r16
	CANPAGE = page << 4;   // MOb1
     214:	82 95       	swap	r24
     216:	80 7f       	andi	r24, 0xF0	; 240
     218:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	CANSTMOB = 0x00;	// Clear status flags
     21c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

	if(extended)
     220:	22 23       	and	r18, r18
     222:	59 f1       	breq	.+86     	; 0x27a <CAN_SendMob+0x6c>
	{
		CANIDT4 = id << 3;
     224:	84 2f       	mov	r24, r20
     226:	88 0f       	add	r24, r24
     228:	88 0f       	add	r24, r24
     22a:	88 0f       	add	r24, r24
     22c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDT3 = id >> 5;
     230:	db 01       	movw	r26, r22
     232:	ca 01       	movw	r24, r20
     234:	68 94       	set
     236:	14 f8       	bld	r1, 4
     238:	b6 95       	lsr	r27
     23a:	a7 95       	ror	r26
     23c:	97 95       	ror	r25
     23e:	87 95       	ror	r24
     240:	16 94       	lsr	r1
     242:	d1 f7       	brne	.-12     	; 0x238 <CAN_SendMob+0x2a>
     244:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT2 = id >> 13;
     248:	db 01       	movw	r26, r22
     24a:	ca 01       	movw	r24, r20
     24c:	07 2e       	mov	r0, r23
     24e:	7d e0       	ldi	r23, 0x0D	; 13
     250:	b6 95       	lsr	r27
     252:	a7 95       	ror	r26
     254:	97 95       	ror	r25
     256:	87 95       	ror	r24
     258:	7a 95       	dec	r23
     25a:	d1 f7       	brne	.-12     	; 0x250 <CAN_SendMob+0x42>
     25c:	70 2d       	mov	r23, r0
     25e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = id >> 21;
     262:	03 2e       	mov	r0, r19
     264:	35 e1       	ldi	r19, 0x15	; 21
     266:	76 95       	lsr	r23
     268:	67 95       	ror	r22
     26a:	57 95       	ror	r21
     26c:	47 95       	ror	r20
     26e:	3a 95       	dec	r19
     270:	d1 f7       	brne	.-12     	; 0x266 <CAN_SendMob+0x58>
     272:	30 2d       	mov	r19, r0
     274:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     278:	10 c0       	rjmp	.+32     	; 0x29a <CAN_SendMob+0x8c>
	}
	else
	{
		CANIDT2 = id << 5;
     27a:	84 2f       	mov	r24, r20
     27c:	82 95       	swap	r24
     27e:	88 0f       	add	r24, r24
     280:	80 7e       	andi	r24, 0xE0	; 224
     282:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = id >> 3;
     286:	68 94       	set
     288:	12 f8       	bld	r1, 2
     28a:	76 95       	lsr	r23
     28c:	67 95       	ror	r22
     28e:	57 95       	ror	r21
     290:	47 95       	ror	r20
     292:	16 94       	lsr	r1
     294:	d1 f7       	brne	.-12     	; 0x28a <CAN_SendMob+0x7c>
     296:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	}
	
	
	CANCDMOB |= (extended<<IDE); //Extended ID
     29a:	ef ee       	ldi	r30, 0xEF	; 239
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	90 e1       	ldi	r25, 0x10	; 16
     2a2:	29 9f       	mul	r18, r25
     2a4:	90 01       	movw	r18, r0
     2a6:	11 24       	eor	r1, r1
     2a8:	28 2b       	or	r18, r24
     2aa:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < dlc; i++) CANMSG = *(data+i);
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	07 c0       	rjmp	.+14     	; 0x2be <CAN_SendMob+0xb0>
     2b0:	f7 01       	movw	r30, r14
     2b2:	e8 0f       	add	r30, r24
     2b4:	f1 1d       	adc	r31, r1
     2b6:	90 81       	ld	r25, Z
     2b8:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     2bc:	8f 5f       	subi	r24, 0xFF	; 255
     2be:	80 17       	cp	r24, r16
     2c0:	b8 f3       	brcs	.-18     	; 0x2b0 <CAN_SendMob+0xa2>
	
	CANCDMOB = (1 << CONMOB0) | dlc; // Enable Tx, set DLC to 8
     2c2:	00 64       	ori	r16, 0x40	; 64
     2c4:	00 93 ef 00 	sts	0x00EF, r16	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

     2c8:	0f 91       	pop	r16
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	08 95       	ret

000002d0 <lcd_enable_pulse>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d0:	88 b1       	in	r24, 0x08	; 8
     2d2:	88 60       	ori	r24, 0x08	; 8
     2d4:	88 b9       	out	0x08, r24	; 8
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	8a 95       	dec	r24
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_enable_pulse+0x8>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <lcd_enable_pulse+0xe>
     2de:	88 b1       	in	r24, 0x08	; 8
     2e0:	87 7f       	andi	r24, 0xF7	; 247
     2e2:	88 b9       	out	0x08, r24	; 8
     2e4:	08 95       	ret

000002e6 <lcd_init>:
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	2f e7       	ldi	r18, 0x7F	; 127
     2ec:	88 e3       	ldi	r24, 0x38	; 56
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	21 50       	subi	r18, 0x01	; 1
     2f2:	80 40       	sbci	r24, 0x00	; 0
     2f4:	90 40       	sbci	r25, 0x00	; 0
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <lcd_init+0xa>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd_init+0x14>
     2fa:	00 00       	nop
     2fc:	80 e3       	ldi	r24, 0x30	; 48
     2fe:	88 b9       	out	0x08, r24	; 8
     300:	e7 df       	rcall	.-50     	; 0x2d0 <lcd_enable_pulse>
     302:	2a e6       	ldi	r18, 0x6A	; 106
     304:	2a 95       	dec	r18
     306:	f1 f7       	brne	.-4      	; 0x304 <lcd_init+0x1e>
     308:	00 c0       	rjmp	.+0      	; 0x30a <lcd_init+0x24>
     30a:	d0 e2       	ldi	r29, 0x20	; 32
     30c:	d8 b9       	out	0x08, r29	; 8
     30e:	e0 df       	rcall	.-64     	; 0x2d0 <lcd_enable_pulse>
     310:	c0 e8       	ldi	r28, 0x80	; 128
     312:	c8 b9       	out	0x08, r28	; 8
     314:	dd df       	rcall	.-70     	; 0x2d0 <lcd_enable_pulse>
     316:	8a e6       	ldi	r24, 0x6A	; 106
     318:	8a 95       	dec	r24
     31a:	f1 f7       	brne	.-4      	; 0x318 <lcd_init+0x32>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <lcd_init+0x38>
     31e:	d8 b9       	out	0x08, r29	; 8
     320:	d7 df       	rcall	.-82     	; 0x2d0 <lcd_enable_pulse>
     322:	c8 b9       	out	0x08, r28	; 8
     324:	d5 df       	rcall	.-86     	; 0x2d0 <lcd_enable_pulse>
     326:	9a e6       	ldi	r25, 0x6A	; 106
     328:	9a 95       	dec	r25
     32a:	f1 f7       	brne	.-4      	; 0x328 <lcd_init+0x42>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <lcd_init+0x48>
     32e:	18 b8       	out	0x08, r1	; 8
     330:	cf df       	rcall	.-98     	; 0x2d0 <lcd_enable_pulse>
     332:	80 ef       	ldi	r24, 0xF0	; 240
     334:	88 b9       	out	0x08, r24	; 8
     336:	cc df       	rcall	.-104    	; 0x2d0 <lcd_enable_pulse>
     338:	2a e6       	ldi	r18, 0x6A	; 106
     33a:	2a 95       	dec	r18
     33c:	f1 f7       	brne	.-4      	; 0x33a <lcd_init+0x54>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <lcd_init+0x5a>
     340:	18 b8       	out	0x08, r1	; 8
     342:	c6 df       	rcall	.-116    	; 0x2d0 <lcd_enable_pulse>
     344:	80 e1       	ldi	r24, 0x10	; 16
     346:	88 b9       	out	0x08, r24	; 8
     348:	c3 df       	rcall	.-122    	; 0x2d0 <lcd_enable_pulse>
     34a:	8f e9       	ldi	r24, 0x9F	; 159
     34c:	9f e0       	ldi	r25, 0x0F	; 15
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <lcd_init+0x68>
     352:	00 c0       	rjmp	.+0      	; 0x354 <lcd_init+0x6e>
     354:	00 00       	nop
     356:	18 b8       	out	0x08, r1	; 8
     358:	bb df       	rcall	.-138    	; 0x2d0 <lcd_enable_pulse>
     35a:	80 e6       	ldi	r24, 0x60	; 96
     35c:	88 b9       	out	0x08, r24	; 8
     35e:	b8 df       	rcall	.-144    	; 0x2d0 <lcd_enable_pulse>
     360:	8f e1       	ldi	r24, 0x1F	; 31
     362:	9e e4       	ldi	r25, 0x4E	; 78
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <lcd_init+0x7e>
     368:	00 c0       	rjmp	.+0      	; 0x36a <lcd_init+0x84>
     36a:	00 00       	nop
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <lcd_write_char>:
     372:	cf 93       	push	r28
     374:	c8 2f       	mov	r28, r24
     376:	2a e6       	ldi	r18, 0x6A	; 106
     378:	2a 95       	dec	r18
     37a:	f1 f7       	brne	.-4      	; 0x378 <lcd_write_char+0x6>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <lcd_write_char+0xc>
     37e:	80 7f       	andi	r24, 0xF0	; 240
     380:	84 60       	ori	r24, 0x04	; 4
     382:	88 b9       	out	0x08, r24	; 8
     384:	a5 df       	rcall	.-182    	; 0x2d0 <lcd_enable_pulse>
     386:	20 e1       	ldi	r18, 0x10	; 16
     388:	c2 9f       	mul	r28, r18
     38a:	c0 01       	movw	r24, r0
     38c:	11 24       	eor	r1, r1
     38e:	84 60       	ori	r24, 0x04	; 4
     390:	88 b9       	out	0x08, r24	; 8
     392:	9e df       	rcall	.-196    	; 0x2d0 <lcd_enable_pulse>
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <lcd_set_cursor_position>:
     398:	cf 93       	push	r28
     39a:	2a e6       	ldi	r18, 0x6A	; 106
     39c:	2a 95       	dec	r18
     39e:	f1 f7       	brne	.-4      	; 0x39c <lcd_set_cursor_position+0x4>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <lcd_set_cursor_position+0xa>
     3a2:	83 34       	cpi	r24, 0x43	; 67
     3a4:	60 f4       	brcc	.+24     	; 0x3be <lcd_set_cursor_position+0x26>
     3a6:	c8 2f       	mov	r28, r24
     3a8:	c0 68       	ori	r28, 0x80	; 128
     3aa:	80 7f       	andi	r24, 0xF0	; 240
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	88 b9       	out	0x08, r24	; 8
     3b0:	8f df       	rcall	.-226    	; 0x2d0 <lcd_enable_pulse>
     3b2:	20 e1       	ldi	r18, 0x10	; 16
     3b4:	c2 9f       	mul	r28, r18
     3b6:	c0 01       	movw	r24, r0
     3b8:	11 24       	eor	r1, r1
     3ba:	88 b9       	out	0x08, r24	; 8
     3bc:	89 df       	rcall	.-238    	; 0x2d0 <lcd_enable_pulse>
     3be:	cf 91       	pop	r28
     3c0:	08 95       	ret

000003c2 <lcd_write_string>:
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	ec 01       	movw	r28, r24
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <lcd_write_string+0xc>
     3ca:	21 96       	adiw	r28, 0x01	; 1
     3cc:	d2 df       	rcall	.-92     	; 0x372 <lcd_write_char>
     3ce:	88 81       	ld	r24, Y
     3d0:	81 11       	cpse	r24, r1
     3d2:	fb cf       	rjmp	.-10     	; 0x3ca <lcd_write_string+0x8>
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <port_init>:
* Output:
* Notes:
******************************************************************************/
void port_init(void)
{
	DDRA = (0<<PA0) | (0<<PA1) | (0<<PA2) | (0<<PA3) | (0<<PA4);
     3da:	11 b8       	out	0x01, r1	; 1
	PORTA = (1<<PA0) | (1<<PA1) | (1<<PA2) | (1<<PA3) | (1<<PA4);
     3dc:	8f e1       	ldi	r24, 0x1F	; 31
     3de:	82 b9       	out	0x02, r24	; 2
	
	DDRD = (0<<PD0);
     3e0:	1a b8       	out	0x0a, r1	; 10
	PORTD = (1<<PD0);
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	8b b9       	out	0x0b, r24	; 11
	
	DDRB = 0xff;
     3e6:	8f ef       	ldi	r24, 0xFF	; 255
     3e8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
     3ea:	15 b8       	out	0x05, r1	; 5
	
	DDRF = (1<<PF1) | (1<<PF2);
     3ec:	86 e0       	ldi	r24, 0x06	; 6
     3ee:	80 bb       	out	0x10, r24	; 16
	PORTF = (1<<PF1) | (1<<PF2);
     3f0:	81 bb       	out	0x11, r24	; 17
	
	DDRC = (1<<LCD_E) | (1<<LCD_RS) | (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5) | (1<<LCD_D4);
     3f2:	8c ef       	ldi	r24, 0xFC	; 252
     3f4:	87 b9       	out	0x07, r24	; 7
	PORTC = (0<<LCD_E) | (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
     3f6:	18 b8       	out	0x08, r1	; 8
     3f8:	08 95       	ret

000003fa <calc_month_length>:
* Description:      calculates the length of a month
* Input:			month, year
* Output:			the length of the month, either: 28, 29, 30, 31
* Notes:
******************************************************************************/
uint8_t calc_month_length(uint8_t month, uint16_t year) {
     3fa:	ab 01       	movw	r20, r22
	switch(month) {
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	fc 01       	movw	r30, r24
     400:	31 97       	sbiw	r30, 0x01	; 1
     402:	ec 30       	cpi	r30, 0x0C	; 12
     404:	f1 05       	cpc	r31, r1
     406:	b8 f5       	brcc	.+110    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     408:	e6 5b       	subi	r30, 0xB6	; 182
     40a:	ff 4f       	sbci	r31, 0xFF	; 255
     40c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__tablejump2__>
		case 1: return 31;
		case 2: {
			if((year % 400) == 0 || ((year % 4) == 0 && (year % 100) != 0)) return 29;
     410:	9b 01       	movw	r18, r22
     412:	32 95       	swap	r19
     414:	22 95       	swap	r18
     416:	2f 70       	andi	r18, 0x0F	; 15
     418:	23 27       	eor	r18, r19
     41a:	3f 70       	andi	r19, 0x0F	; 15
     41c:	23 27       	eor	r18, r19
     41e:	ae e3       	ldi	r26, 0x3E	; 62
     420:	ba e0       	ldi	r27, 0x0A	; 10
     422:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__umulhisi3>
     426:	20 e9       	ldi	r18, 0x90	; 144
     428:	31 e0       	ldi	r19, 0x01	; 1
     42a:	bc 01       	movw	r22, r24
     42c:	62 9f       	mul	r22, r18
     42e:	c0 01       	movw	r24, r0
     430:	63 9f       	mul	r22, r19
     432:	90 0d       	add	r25, r0
     434:	72 9f       	mul	r23, r18
     436:	90 0d       	add	r25, r0
     438:	11 24       	eor	r1, r1
     43a:	48 17       	cp	r20, r24
     43c:	59 07       	cpc	r21, r25
     43e:	01 f1       	breq	.+64     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     440:	ca 01       	movw	r24, r20
     442:	83 70       	andi	r24, 0x03	; 3
     444:	99 27       	eor	r25, r25
     446:	89 2b       	or	r24, r25
     448:	e9 f4       	brne	.+58     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     44a:	9a 01       	movw	r18, r20
     44c:	36 95       	lsr	r19
     44e:	27 95       	ror	r18
     450:	36 95       	lsr	r19
     452:	27 95       	ror	r18
     454:	ab e7       	ldi	r26, 0x7B	; 123
     456:	b4 e1       	ldi	r27, 0x14	; 20
     458:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__umulhisi3>
     45c:	96 95       	lsr	r25
     45e:	87 95       	ror	r24
     460:	64 e6       	ldi	r22, 0x64	; 100
     462:	68 9f       	mul	r22, r24
     464:	90 01       	movw	r18, r0
     466:	69 9f       	mul	r22, r25
     468:	30 0d       	add	r19, r0
     46a:	11 24       	eor	r1, r1
     46c:	42 17       	cp	r20, r18
     46e:	53 07       	cpc	r21, r19
     470:	59 f4       	brne	.+22     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
			else return 28;
     472:	8c e1       	ldi	r24, 0x1C	; 28
     474:	08 95       	ret
		case 9: return 30;
		case 10: return 31;
		case 11: return 30;
		case 12: return 31;
	}
}
     476:	08 95       	ret
* Output:			the length of the month, either: 28, 29, 30, 31
* Notes:
******************************************************************************/
uint8_t calc_month_length(uint8_t month, uint16_t year) {
	switch(month) {
		case 1: return 31;
     478:	8f e1       	ldi	r24, 0x1F	; 31
     47a:	08 95       	ret
		case 2: {
			if((year % 400) == 0 || ((year % 4) == 0 && (year % 100) != 0)) return 29;
			else return 28;
		}
		case 3: return 31;
		case 4: return 30;
     47c:	8e e1       	ldi	r24, 0x1E	; 30
     47e:	08 95       	ret
******************************************************************************/
uint8_t calc_month_length(uint8_t month, uint16_t year) {
	switch(month) {
		case 1: return 31;
		case 2: {
			if((year % 400) == 0 || ((year % 4) == 0 && (year % 100) != 0)) return 29;
     480:	8d e1       	ldi	r24, 0x1D	; 29
     482:	08 95       	ret
			else return 28;
     484:	8c e1       	ldi	r24, 0x1C	; 28
     486:	08 95       	ret
******************************************************************************/
uint8_t calc_month_length(uint8_t month, uint16_t year) {
	switch(month) {
		case 1: return 31;
		case 2: {
			if((year % 400) == 0 || ((year % 4) == 0 && (year % 100) != 0)) return 29;
     488:	8d e1       	ldi	r24, 0x1D	; 29
		case 9: return 30;
		case 10: return 31;
		case 11: return 30;
		case 12: return 31;
	}
}
     48a:	08 95       	ret

0000048c <main>:
* Input:
* Output:
* Notes:
******************************************************************************/
int main(void)
{
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	e9 97       	sbiw	r28, 0x39	; 57
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
	port_init();
     4a0:	9c df       	rcall	.-200    	; 0x3da <port_init>
	timer_init();
     4a2:	6c d4       	rcall	.+2264   	; 0xd7c <timer_init>
	external_int_init();
     4a4:	73 d4       	rcall	.+2278   	; 0xd8c <external_int_init>
	uart0_init(BAUD9600);
     4a6:	83 e3       	ldi	r24, 0x33	; 51
     4a8:	90 e0       	ldi	r25, 0x00	; 0
	lcd_init();
     4aa:	8d d7       	rcall	.+3866   	; 0x13c6 <uart0_init>
     4ac:	1c df       	rcall	.-456    	; 0x2e6 <lcd_init>
	adc_init();
     4ae:	74 d4       	rcall	.+2280   	; 0xd98 <adc_init>
     4b0:	cb d5       	rcall	.+2966   	; 0x1048 <twi_init>
	
	// TWI initialization
	twi_init();
     4b2:	1b de       	rcall	.-970    	; 0xea <can_init>
     4b4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	// CAN initialization
	can_init();
     4b8:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	CAN_ReceiveEnableMob(0, can_rx_id, can_rx_extended_id, 8);
     4bc:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     4c0:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     4c4:	08 e0       	ldi	r16, 0x08	; 8
     4c6:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	49 de       	rcall	.-878    	; 0x160 <CAN_ReceiveEnableMob>
     4ce:	78 94       	sei
     4d0:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <task_10ms>
	
	sei();
     4d4:	88 23       	and	r24, r24
	char string_for_write[50];
	
    /* Replace with your application code */
    while (1) 
    {
		if(task_10ms)
     4d6:	09 f4       	brne	.+2      	; 0x4da <main+0x4e>
     4d8:	dc c1       	rjmp	.+952    	; 0x892 <main+0x406>
     4da:	00 99       	sbic	0x00, 0	; 0
     4dc:	42 c0       	rjmp	.+132    	; 0x562 <main+0xd6>
     4de:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <PA0_pushed>
		{
			// Set time and save time -> BUTTON1 logic
			if((PINA & (1<<PA0)) == 0 && PA0_pushed == FALSE) {
     4e2:	81 11       	cpse	r24, r1
     4e4:	3e c0       	rjmp	.+124    	; 0x562 <main+0xd6>
     4e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <curr_edit>
     4ea:	82 30       	cpi	r24, 0x02	; 2
				if(curr_edit == NOEDIT || curr_edit == TIME) {
     4ec:	11 f0       	breq	.+4      	; 0x4f2 <main+0x66>
     4ee:	81 11       	cpse	r24, r1
     4f0:	35 c0       	rjmp	.+106    	; 0x55c <main+0xd0>
     4f2:	95 b1       	in	r25, 0x05	; 5
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	89 27       	eor	r24, r25
					PORTB ^= (1<<PB0);
     4f8:	85 b9       	out	0x05, r24	; 5
     4fa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <curr_edit>
     4fe:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <edited_value>
					curr_edit = TIME;
     502:	85 e0       	ldi	r24, 0x05	; 5
					
					edited_value = 0;
     504:	e7 e0       	ldi	r30, 0x07	; 7
     506:	f1 e0       	ldi	r31, 0x01	; 1
					sprintf(edited_text, "PERC");
     508:	ad ea       	ldi	r26, 0xAD	; 173
     50a:	b1 e0       	ldi	r27, 0x01	; 1
     50c:	01 90       	ld	r0, Z+
     50e:	0d 92       	st	X+, r0
     510:	8a 95       	dec	r24
     512:	e1 f7       	brne	.-8      	; 0x50c <main+0x80>
     514:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <timer_cnt>
     518:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <timer_cnt+0x1>
					
					time_0 = timer_cnt;
     51c:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <time_0+0x1>
     520:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <time_0>
     524:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time_edit_save>
     528:	81 30       	cpi	r24, 0x01	; 1
					
					if(time_edit_save == SAVE) {
     52a:	19 f4       	brne	.+6      	; 0x532 <main+0xa6>
     52c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <time_edit_save>
     530:	15 c0       	rjmp	.+42     	; 0x55c <main+0xd0>
						time_edit_save = EDIT;
     532:	81 11       	cpse	r24, r1
     534:	13 c0       	rjmp	.+38     	; 0x55c <main+0xd0>
     536:	81 e0       	ldi	r24, 0x01	; 1
					} else if(time_edit_save == EDIT) {
     538:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <time_edit_save>
						time_edit_save = SAVE;
     53c:	c0 90 98 01 	lds	r12, 0x0198	; 0x800198 <ev>
     540:	d0 90 99 01 	lds	r13, 0x0199	; 0x800199 <ev+0x1>
						twi_mt_mode(curr_edit, masodperc, perc, ora, nap, honap, ev);
     544:	e0 90 9a 01 	lds	r14, 0x019A	; 0x80019a <honap>
     548:	00 91 9b 01 	lds	r16, 0x019B	; 0x80019b <nap>
     54c:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <ora>
     550:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <perc>
     554:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <masodperc>
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	7f d5       	rcall	.+2814   	; 0x105a <twi_mt_mode>
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <PA0_pushed>
					}
					
				}
				
				PA0_pushed = TRUE;
     562:	00 9b       	sbis	0x00, 0	; 0
     564:	06 c0       	rjmp	.+12     	; 0x572 <main+0xe6>
     566:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <PA0_pushed>
			}
			if((PINA & (1<<PA0)) == (1<<PA0) && PA0_pushed == TRUE) PA0_pushed = FALSE;
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	11 f4       	brne	.+4      	; 0x572 <main+0xe6>
     56e:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <PA0_pushed>
     572:	04 99       	sbic	0x00, 4	; 0
     574:	41 c0       	rjmp	.+130    	; 0x5f8 <main+0x16c>
     576:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <PA4_pushed>
			
			// Set date and save date -> BUTTON5 logic
			if((PINA & (1<<PA4)) == 0 && PA4_pushed == FALSE) {
     57a:	81 11       	cpse	r24, r1
     57c:	3d c0       	rjmp	.+122    	; 0x5f8 <main+0x16c>
     57e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <curr_edit>
     582:	81 50       	subi	r24, 0x01	; 1
				if(curr_edit == NOEDIT || curr_edit == DATE) {
     584:	82 30       	cpi	r24, 0x02	; 2
     586:	a8 f5       	brcc	.+106    	; 0x5f2 <main+0x166>
     588:	85 b1       	in	r24, 0x05	; 5
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	89 27       	eor	r24, r25
					PORTB ^= (1<<PB0);
     58e:	85 b9       	out	0x05, r24	; 5
     590:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <curr_edit>
     594:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <edited_value>
					curr_edit = DATE;
     598:	ed ea       	ldi	r30, 0xAD	; 173
					
					edited_value = 0;
     59a:	f1 e0       	ldi	r31, 0x01	; 1
     59c:	8e e4       	ldi	r24, 0x4E	; 78
					sprintf(edited_text, "NAP");
     59e:	91 e4       	ldi	r25, 0x41	; 65
     5a0:	91 83       	std	Z+1, r25	; 0x01
     5a2:	80 83       	st	Z, r24
     5a4:	80 e5       	ldi	r24, 0x50	; 80
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	93 83       	std	Z+3, r25	; 0x03
     5aa:	82 83       	std	Z+2, r24	; 0x02
     5ac:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <timer_cnt>
     5b0:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <timer_cnt+0x1>
					
					time_0 = timer_cnt;
     5b4:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <time_0+0x1>
     5b8:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <time_0>
     5bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <date_edit_save>
     5c0:	81 30       	cpi	r24, 0x01	; 1
					
					if(date_edit_save == SAVE) {
     5c2:	19 f4       	brne	.+6      	; 0x5ca <main+0x13e>
     5c4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <date_edit_save>
     5c8:	14 c0       	rjmp	.+40     	; 0x5f2 <main+0x166>
						date_edit_save = EDIT;
     5ca:	81 11       	cpse	r24, r1
     5cc:	12 c0       	rjmp	.+36     	; 0x5f2 <main+0x166>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
					} else if(date_edit_save == EDIT) {
     5d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <date_edit_save>
						date_edit_save = SAVE;
     5d4:	c0 90 98 01 	lds	r12, 0x0198	; 0x800198 <ev>
     5d8:	d0 90 99 01 	lds	r13, 0x0199	; 0x800199 <ev+0x1>
						twi_mt_mode(curr_edit, masodperc, perc, ora, nap, honap, ev);
     5dc:	e0 90 9a 01 	lds	r14, 0x019A	; 0x80019a <honap>
     5e0:	00 91 9b 01 	lds	r16, 0x019B	; 0x80019b <nap>
     5e4:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <ora>
     5e8:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <perc>
     5ec:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <masodperc>
     5f0:	34 d5       	rcall	.+2664   	; 0x105a <twi_mt_mode>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <PA4_pushed>
					}
				}
				
				PA4_pushed = TRUE;
     5f8:	04 9b       	sbis	0x00, 4	; 0
     5fa:	06 c0       	rjmp	.+12     	; 0x608 <main+0x17c>
     5fc:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <PA4_pushed>
			}
			if((PINA & (1<<PA4)) == (1<<PA4) && PA4_pushed == TRUE) PA4_pushed = FALSE; 
     600:	81 30       	cpi	r24, 0x01	; 1
     602:	11 f4       	brne	.+4      	; 0x608 <main+0x17c>
     604:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <PA4_pushed>
     608:	03 99       	sbic	0x00, 3	; 0
     60a:	61 c0       	rjmp	.+194    	; 0x6ce <main+0x242>
     60c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <PA3_pushed>
			
			// change between values that will be edited -> BUTTON4 logic
			if((PINA & (1<<PA3)) == 0 && PA3_pushed == FALSE) {
     610:	81 11       	cpse	r24, r1
     612:	5d c0       	rjmp	.+186    	; 0x6ce <main+0x242>
     614:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <curr_edit>
     618:	81 11       	cpse	r24, r1
				if(curr_edit == TIME) {
     61a:	26 c0       	rjmp	.+76     	; 0x668 <main+0x1dc>
     61c:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <edited_value>
     620:	81 30       	cpi	r24, 0x01	; 1
					if(edited_value != 1) edited_value++;
     622:	21 f0       	breq	.+8      	; 0x62c <main+0x1a0>
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <edited_value>
     62a:	02 c0       	rjmp	.+4      	; 0x630 <main+0x1a4>
     62c:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <edited_value>
     630:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <edited_value>
					else edited_value = 0;
     634:	88 23       	and	r24, r24
					
					switch(edited_value) {
     636:	19 f0       	breq	.+6      	; 0x63e <main+0x1b2>
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	59 f0       	breq	.+22     	; 0x652 <main+0x1c6>
     63c:	45 c0       	rjmp	.+138    	; 0x6c8 <main+0x23c>
     63e:	85 e0       	ldi	r24, 0x05	; 5
     640:	e7 e0       	ldi	r30, 0x07	; 7
     642:	f1 e0       	ldi	r31, 0x01	; 1
						case 0: {
							sprintf(edited_text, "PERC");
     644:	ad ea       	ldi	r26, 0xAD	; 173
     646:	b1 e0       	ldi	r27, 0x01	; 1
     648:	01 90       	ld	r0, Z+
     64a:	0d 92       	st	X+, r0
     64c:	8a 95       	dec	r24
     64e:	e1 f7       	brne	.-8      	; 0x648 <main+0x1bc>
     650:	3b c0       	rjmp	.+118    	; 0x6c8 <main+0x23c>
     652:	ed ea       	ldi	r30, 0xAD	; 173
     654:	f1 e0       	ldi	r31, 0x01	; 1
							break;
     656:	8f e4       	ldi	r24, 0x4F	; 79
						}
						case 1: {
							sprintf(edited_text, "ORA");
     658:	92 e5       	ldi	r25, 0x52	; 82
     65a:	91 83       	std	Z+1, r25	; 0x01
     65c:	80 83       	st	Z, r24
     65e:	81 e4       	ldi	r24, 0x41	; 65
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	93 83       	std	Z+3, r25	; 0x03
     664:	82 83       	std	Z+2, r24	; 0x02
     666:	30 c0       	rjmp	.+96     	; 0x6c8 <main+0x23c>
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	71 f5       	brne	.+92     	; 0x6c8 <main+0x23c>
							break;
     66c:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <edited_value>
						}
					}
					
				} else if(curr_edit == DATE) {
     670:	82 30       	cpi	r24, 0x02	; 2
					if(edited_value != 2) edited_value++;
     672:	21 f0       	breq	.+8      	; 0x67c <main+0x1f0>
     674:	8f 5f       	subi	r24, 0xFF	; 255
     676:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <edited_value>
     67a:	02 c0       	rjmp	.+4      	; 0x680 <main+0x1f4>
     67c:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <edited_value>
     680:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <edited_value>
					else edited_value = 0;
     684:	81 30       	cpi	r24, 0x01	; 1
					
					switch(edited_value) {
     686:	79 f0       	breq	.+30     	; 0x6a6 <main+0x21a>
     688:	18 f0       	brcs	.+6      	; 0x690 <main+0x204>
     68a:	82 30       	cpi	r24, 0x02	; 2
     68c:	b1 f0       	breq	.+44     	; 0x6ba <main+0x22e>
     68e:	1c c0       	rjmp	.+56     	; 0x6c8 <main+0x23c>
     690:	ed ea       	ldi	r30, 0xAD	; 173
     692:	f1 e0       	ldi	r31, 0x01	; 1
     694:	8e e4       	ldi	r24, 0x4E	; 78
						case 0: {
							sprintf(edited_text, "NAP");
     696:	91 e4       	ldi	r25, 0x41	; 65
     698:	91 83       	std	Z+1, r25	; 0x01
     69a:	80 83       	st	Z, r24
     69c:	80 e5       	ldi	r24, 0x50	; 80
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	93 83       	std	Z+3, r25	; 0x03
     6a2:	82 83       	std	Z+2, r24	; 0x02
     6a4:	11 c0       	rjmp	.+34     	; 0x6c8 <main+0x23c>
     6a6:	86 e0       	ldi	r24, 0x06	; 6
     6a8:	ed e8       	ldi	r30, 0x8D	; 141
							break;
     6aa:	f1 e0       	ldi	r31, 0x01	; 1
						}
						case 1: {
							sprintf(edited_text, "HONAP");
     6ac:	ad ea       	ldi	r26, 0xAD	; 173
     6ae:	b1 e0       	ldi	r27, 0x01	; 1
     6b0:	01 90       	ld	r0, Z+
     6b2:	0d 92       	st	X+, r0
     6b4:	8a 95       	dec	r24
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <main+0x224>
     6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <main+0x23c>
     6ba:	ed ea       	ldi	r30, 0xAD	; 173
     6bc:	f1 e0       	ldi	r31, 0x01	; 1
							break;
     6be:	85 e4       	ldi	r24, 0x45	; 69
						}
						case 2: {
							sprintf(edited_text, "EV");
     6c0:	96 e5       	ldi	r25, 0x56	; 86
     6c2:	91 83       	std	Z+1, r25	; 0x01
     6c4:	80 83       	st	Z, r24
     6c6:	12 82       	std	Z+2, r1	; 0x02
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <PA3_pushed>
							break;
						}
					}
				}
				
				PA3_pushed = TRUE;
     6ce:	03 9b       	sbis	0x00, 3	; 0
     6d0:	06 c0       	rjmp	.+12     	; 0x6de <main+0x252>
     6d2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <PA3_pushed>
			}
			if((PINA & (1<<PA3)) == (1<<PA3) && PA3_pushed == TRUE) PA3_pushed = FALSE;
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	11 f4       	brne	.+4      	; 0x6de <main+0x252>
     6da:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <PA3_pushed>
     6de:	01 99       	sbic	0x00, 1	; 0
     6e0:	5e c0       	rjmp	.+188    	; 0x79e <main+0x312>
     6e2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <PA1_pushed>
			
			// increase the actual value of the edited value -> BUTTON2 logic
			if((PINA & (1<<PA1)) == 0 && PA1_pushed == FALSE) {
     6e6:	81 11       	cpse	r24, r1
     6e8:	5a c0       	rjmp	.+180    	; 0x79e <main+0x312>
     6ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <curr_edit>
     6ee:	81 11       	cpse	r24, r1
				if(curr_edit == TIME) {
     6f0:	1d c0       	rjmp	.+58     	; 0x72c <main+0x2a0>
     6f2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <edited_value>
     6f6:	88 23       	and	r24, r24
					switch(edited_value) {
     6f8:	19 f0       	breq	.+6      	; 0x700 <main+0x274>
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	61 f0       	breq	.+24     	; 0x716 <main+0x28a>
     6fe:	4c c0       	rjmp	.+152    	; 0x798 <main+0x30c>
     700:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <perc>
     704:	8b 33       	cpi	r24, 0x3B	; 59
						case 0: {
							if(perc != 59) perc++;
     706:	21 f0       	breq	.+8      	; 0x710 <main+0x284>
     708:	8f 5f       	subi	r24, 0xFF	; 255
     70a:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <perc>
     70e:	44 c0       	rjmp	.+136    	; 0x798 <main+0x30c>
     710:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <perc>
     714:	41 c0       	rjmp	.+130    	; 0x798 <main+0x30c>
							else perc = 0;
     716:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <ora>
     71a:	87 31       	cpi	r24, 0x17	; 23
							break;
						}
						case 1: {
							if(ora != 23) ora++;
     71c:	21 f0       	breq	.+8      	; 0x726 <main+0x29a>
     71e:	8f 5f       	subi	r24, 0xFF	; 255
     720:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <ora>
     724:	39 c0       	rjmp	.+114    	; 0x798 <main+0x30c>
     726:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <ora>
     72a:	36 c0       	rjmp	.+108    	; 0x798 <main+0x30c>
							else ora = 0;
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	a1 f5       	brne	.+104    	; 0x798 <main+0x30c>
     730:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <edited_value>
							break;
						}
					}
				} else if(curr_edit == DATE) {
     734:	81 30       	cpi	r24, 0x01	; 1
					switch(edited_value) {
     736:	b9 f0       	breq	.+46     	; 0x766 <main+0x2da>
     738:	18 f0       	brcs	.+6      	; 0x740 <main+0x2b4>
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	01 f1       	breq	.+64     	; 0x77e <main+0x2f2>
     73e:	2c c0       	rjmp	.+88     	; 0x798 <main+0x30c>
     740:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <ev>
						case 0: {
							if(nap != calc_month_length(honap, ev)) nap++;
     744:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <ev+0x1>
     748:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <honap>
     74c:	56 de       	rcall	.-852    	; 0x3fa <calc_month_length>
     74e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <nap>
     752:	89 17       	cp	r24, r25
     754:	21 f0       	breq	.+8      	; 0x75e <main+0x2d2>
     756:	9f 5f       	subi	r25, 0xFF	; 255
     758:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <nap>
     75c:	1d c0       	rjmp	.+58     	; 0x798 <main+0x30c>
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <nap>
							else nap = 1;
     764:	19 c0       	rjmp	.+50     	; 0x798 <main+0x30c>
     766:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <honap>
     76a:	8c 30       	cpi	r24, 0x0C	; 12
							break;
						}
						case 1: {
							if(honap != 12) honap++;
     76c:	21 f0       	breq	.+8      	; 0x776 <main+0x2ea>
     76e:	8f 5f       	subi	r24, 0xFF	; 255
     770:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <honap>
     774:	11 c0       	rjmp	.+34     	; 0x798 <main+0x30c>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <honap>
							else honap = 1;
     77c:	0d c0       	rjmp	.+26     	; 0x798 <main+0x30c>
     77e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <ev>
     782:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <ev+0x1>
							break;
						}
						case 2: {
							if(ev != 2099) ev++;
     786:	83 33       	cpi	r24, 0x33	; 51
     788:	28 e0       	ldi	r18, 0x08	; 8
     78a:	92 07       	cpc	r25, r18
     78c:	29 f0       	breq	.+10     	; 0x798 <main+0x30c>
     78e:	01 96       	adiw	r24, 0x01	; 1
     790:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <ev+0x1>
     794:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <ev>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <PA1_pushed>
							break;
						}
					}
				}
				
				PA1_pushed = TRUE;
     79e:	01 9b       	sbis	0x00, 1	; 0
     7a0:	06 c0       	rjmp	.+12     	; 0x7ae <main+0x322>
     7a2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <PA1_pushed>
			}
			if((PINA & (1<<PA1)) == (1<<PA1) && PA1_pushed == TRUE) PA1_pushed = FALSE;
     7a6:	81 30       	cpi	r24, 0x01	; 1
     7a8:	11 f4       	brne	.+4      	; 0x7ae <main+0x322>
     7aa:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <PA1_pushed>
     7ae:	02 99       	sbic	0x00, 2	; 0
     7b0:	66 c0       	rjmp	.+204    	; 0x87e <main+0x3f2>
     7b2:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <PA2_pushed>
			
			// decrease the actual value of the edited value -> BUTTON3 logic
			if((PINA & (1<<PA2)) == 0 && PA2_pushed == FALSE) {
     7b6:	81 11       	cpse	r24, r1
     7b8:	62 c0       	rjmp	.+196    	; 0x87e <main+0x3f2>
     7ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <curr_edit>
     7be:	81 11       	cpse	r24, r1
				if(curr_edit == TIME) {
     7c0:	1f c0       	rjmp	.+62     	; 0x800 <main+0x374>
     7c2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <edited_value>
     7c6:	88 23       	and	r24, r24
					switch(edited_value) {
     7c8:	19 f0       	breq	.+6      	; 0x7d0 <main+0x344>
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	69 f0       	breq	.+26     	; 0x7e8 <main+0x35c>
     7ce:	54 c0       	rjmp	.+168    	; 0x878 <main+0x3ec>
     7d0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <perc>
     7d4:	88 23       	and	r24, r24
						case 0: {
							if(perc != 0) perc--;
     7d6:	21 f0       	breq	.+8      	; 0x7e0 <main+0x354>
     7d8:	81 50       	subi	r24, 0x01	; 1
     7da:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <perc>
     7de:	4c c0       	rjmp	.+152    	; 0x878 <main+0x3ec>
     7e0:	8b e3       	ldi	r24, 0x3B	; 59
     7e2:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <perc>
							else perc = 59;
     7e6:	48 c0       	rjmp	.+144    	; 0x878 <main+0x3ec>
     7e8:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <ora>
     7ec:	88 23       	and	r24, r24
							break;
						}
						case 1: {
							if(ora != 0) ora--;
     7ee:	21 f0       	breq	.+8      	; 0x7f8 <main+0x36c>
     7f0:	81 50       	subi	r24, 0x01	; 1
     7f2:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <ora>
     7f6:	40 c0       	rjmp	.+128    	; 0x878 <main+0x3ec>
     7f8:	87 e1       	ldi	r24, 0x17	; 23
     7fa:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <ora>
							else ora = 23;
     7fe:	3c c0       	rjmp	.+120    	; 0x878 <main+0x3ec>
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	d1 f5       	brne	.+116    	; 0x878 <main+0x3ec>
     804:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <edited_value>
							break;
						}
					}
					} else if(curr_edit == DATE) {
     808:	81 30       	cpi	r24, 0x01	; 1
					switch(edited_value) {
     80a:	b1 f0       	breq	.+44     	; 0x838 <main+0x3ac>
     80c:	18 f0       	brcs	.+6      	; 0x814 <main+0x388>
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	f9 f0       	breq	.+62     	; 0x850 <main+0x3c4>
     812:	32 c0       	rjmp	.+100    	; 0x878 <main+0x3ec>
     814:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <nap>
     818:	81 30       	cpi	r24, 0x01	; 1
						case 0: {
							if(nap != 1) nap--;
     81a:	21 f0       	breq	.+8      	; 0x824 <main+0x398>
     81c:	81 50       	subi	r24, 0x01	; 1
     81e:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <nap>
     822:	2a c0       	rjmp	.+84     	; 0x878 <main+0x3ec>
     824:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <ev>
							else nap = calc_month_length(honap, ev);
     828:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <ev+0x1>
     82c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <honap>
     830:	e4 dd       	rcall	.-1080   	; 0x3fa <calc_month_length>
     832:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <nap>
     836:	20 c0       	rjmp	.+64     	; 0x878 <main+0x3ec>
     838:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <honap>
     83c:	81 30       	cpi	r24, 0x01	; 1
							break;
						}
						case 1: {
							if(honap != 1) honap--;
     83e:	21 f0       	breq	.+8      	; 0x848 <main+0x3bc>
     840:	81 50       	subi	r24, 0x01	; 1
     842:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <honap>
     846:	18 c0       	rjmp	.+48     	; 0x878 <main+0x3ec>
     848:	8c e0       	ldi	r24, 0x0C	; 12
     84a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <honap>
							else honap = 12;
     84e:	14 c0       	rjmp	.+40     	; 0x878 <main+0x3ec>
     850:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <ev>
     854:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <ev+0x1>
							break;
						}
						case 2: {
							if(ev != 2000) ev--;
     858:	80 3d       	cpi	r24, 0xD0	; 208
     85a:	67 e0       	ldi	r22, 0x07	; 7
     85c:	96 07       	cpc	r25, r22
     85e:	31 f0       	breq	.+12     	; 0x86c <main+0x3e0>
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <ev+0x1>
     866:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <ev>
     86a:	06 c0       	rjmp	.+12     	; 0x878 <main+0x3ec>
     86c:	83 e3       	ldi	r24, 0x33	; 51
     86e:	98 e0       	ldi	r25, 0x08	; 8
     870:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <ev+0x1>
							else ev = 2099;
     874:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <ev>
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <PA2_pushed>
							break;
						}
					}
				}
				
				PA2_pushed = TRUE;
     87e:	02 9b       	sbis	0x00, 2	; 0
     880:	06 c0       	rjmp	.+12     	; 0x88e <main+0x402>
     882:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <PA2_pushed>
			}
			if((PINA & (1<<PA2)) == (1<<PA2) && PA2_pushed == TRUE) PA2_pushed = FALSE;
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	11 f4       	brne	.+4      	; 0x88e <main+0x402>
     88a:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <PA2_pushed>
     88e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <task_10ms>
     892:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <task_100ms>
			
			
			task_10ms=FALSE;
     896:	88 23       	and	r24, r24
		}
		if(task_100ms)
     898:	09 f4       	brne	.+2      	; 0x89c <main+0x410>
     89a:	30 c1       	rjmp	.+608    	; 0xafc <main+0x670>
     89c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <curr_edit>
     8a0:	81 11       	cpse	r24, r1
		{
			if(curr_edit == TIME) {
     8a2:	76 c0       	rjmp	.+236    	; 0x990 <main+0x504>
     8a4:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <timer_cnt>
     8a8:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <timer_cnt+0x1>
				if(timer_cnt - time_0 < 100) {
     8ac:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <time_0>
     8b0:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <time_0+0x1>
     8b4:	82 1b       	sub	r24, r18
     8b6:	93 0b       	sbc	r25, r19
     8b8:	84 36       	cpi	r24, 0x64	; 100
     8ba:	91 05       	cpc	r25, r1
     8bc:	d0 f4       	brcc	.+52     	; 0x8f2 <main+0x466>
     8be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time_edit_save>
     8c2:	81 11       	cpse	r24, r1
					if(time_edit_save == EDIT) sprintf(string_for_write, "IDO SZERKESZTESE");
     8c4:	09 c0       	rjmp	.+18     	; 0x8d8 <main+0x44c>
     8c6:	91 e1       	ldi	r25, 0x11	; 17
     8c8:	ec e0       	ldi	r30, 0x0C	; 12
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	de 01       	movw	r26, r28
     8ce:	11 96       	adiw	r26, 0x01	; 1
     8d0:	01 90       	ld	r0, Z+
     8d2:	0d 92       	st	X+, r0
     8d4:	9a 95       	dec	r25
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <main+0x444>
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	09 f0       	breq	.+2      	; 0x8de <main+0x452>
     8dc:	59 c0       	rjmp	.+178    	; 0x990 <main+0x504>
					if(time_edit_save == SAVE) sprintf(string_for_write, "IDO ELMENTVE    ");
     8de:	81 e1       	ldi	r24, 0x11	; 17
     8e0:	ed e1       	ldi	r30, 0x1D	; 29
     8e2:	f1 e0       	ldi	r31, 0x01	; 1
     8e4:	de 01       	movw	r26, r28
     8e6:	11 96       	adiw	r26, 0x01	; 1
     8e8:	01 90       	ld	r0, Z+
     8ea:	0d 92       	st	X+, r0
     8ec:	8a 95       	dec	r24
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <main+0x45c>
     8f0:	4f c0       	rjmp	.+158    	; 0x990 <main+0x504>
     8f2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time_edit_save>
     8f6:	81 11       	cpse	r24, r1
				} else {
					if(time_edit_save == EDIT) sprintf(string_for_write, "%02d:%02d %10s", ora, perc, edited_text);
     8f8:	1a c0       	rjmp	.+52     	; 0x92e <main+0x4a2>
     8fa:	8d ea       	ldi	r24, 0xAD	; 173
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	9f 93       	push	r25
     900:	8f 93       	push	r24
     902:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <perc>
     906:	1f 92       	push	r1
     908:	8f 93       	push	r24
     90a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <ora>
     90e:	1f 92       	push	r1
     910:	8f 93       	push	r24
     912:	8e e2       	ldi	r24, 0x2E	; 46
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	9f 93       	push	r25
     918:	8f 93       	push	r24
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	9f 93       	push	r25
     920:	8f 93       	push	r24
     922:	75 d7       	rcall	.+3818   	; 0x180e <sprintf>
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
     92e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time_edit_save>
     932:	81 30       	cpi	r24, 0x01	; 1
					if(time_edit_save == SAVE) {
     934:	69 f5       	brne	.+90     	; 0x990 <main+0x504>
     936:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <homerseklet+0x1>
     93a:	8f 93       	push	r24
						sprintf(string_for_write, "%04d%02d%02d %02d%02d %02d", ev, honap, nap, ora, perc, homerseklet);
     93c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <homerseklet>
     940:	8f 93       	push	r24
     942:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <perc>
     946:	1f 92       	push	r1
     948:	8f 93       	push	r24
     94a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <ora>
     94e:	1f 92       	push	r1
     950:	8f 93       	push	r24
     952:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <nap>
     956:	1f 92       	push	r1
     958:	8f 93       	push	r24
     95a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <honap>
     95e:	1f 92       	push	r1
     960:	8f 93       	push	r24
     962:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <ev+0x1>
     966:	8f 93       	push	r24
     968:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <ev>
     96c:	8f 93       	push	r24
     96e:	8d e3       	ldi	r24, 0x3D	; 61
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	9f 93       	push	r25
     974:	8f 93       	push	r24
     976:	ce 01       	movw	r24, r28
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	47 d7       	rcall	.+3726   	; 0x180e <sprintf>
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <curr_edit>
						// sprintf(string_for_write, "%04d%02d%02d %02d%02d %02d", ev, honap, nap, ora, perc, masodperc);
						curr_edit = NOEDIT;
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <curr_edit>
     994:	81 30       	cpi	r24, 0x01	; 1
					}
				}
			}
			
			if(curr_edit == DATE) {
     996:	09 f0       	breq	.+2      	; 0x99a <main+0x50e>
     998:	7c c0       	rjmp	.+248    	; 0xa92 <main+0x606>
     99a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <timer_cnt>
     99e:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <timer_cnt+0x1>
				if(timer_cnt - time_0 < 100) {
     9a2:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <time_0>
     9a6:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <time_0+0x1>
     9aa:	82 1b       	sub	r24, r18
     9ac:	93 0b       	sbc	r25, r19
     9ae:	84 36       	cpi	r24, 0x64	; 100
     9b0:	91 05       	cpc	r25, r1
     9b2:	d0 f4       	brcc	.+52     	; 0x9e8 <main+0x55c>
     9b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <date_edit_save>
     9b8:	81 11       	cpse	r24, r1
					if(date_edit_save == EDIT) sprintf(string_for_write, "DATUM SZERK.    ");
     9ba:	09 c0       	rjmp	.+18     	; 0x9ce <main+0x542>
     9bc:	91 e1       	ldi	r25, 0x11	; 17
     9be:	e8 e5       	ldi	r30, 0x58	; 88
     9c0:	f1 e0       	ldi	r31, 0x01	; 1
     9c2:	de 01       	movw	r26, r28
     9c4:	11 96       	adiw	r26, 0x01	; 1
     9c6:	01 90       	ld	r0, Z+
     9c8:	0d 92       	st	X+, r0
     9ca:	9a 95       	dec	r25
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <main+0x53a>
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <main+0x548>
     9d2:	5f c0       	rjmp	.+190    	; 0xa92 <main+0x606>
					if(date_edit_save == SAVE) sprintf(string_for_write, "DATUM ELMENTVE  ");
     9d4:	81 e1       	ldi	r24, 0x11	; 17
     9d6:	e9 e6       	ldi	r30, 0x69	; 105
     9d8:	f1 e0       	ldi	r31, 0x01	; 1
     9da:	de 01       	movw	r26, r28
     9dc:	11 96       	adiw	r26, 0x01	; 1
     9de:	01 90       	ld	r0, Z+
     9e0:	0d 92       	st	X+, r0
     9e2:	8a 95       	dec	r24
     9e4:	e1 f7       	brne	.-8      	; 0x9de <main+0x552>
     9e6:	55 c0       	rjmp	.+170    	; 0xa92 <main+0x606>
     9e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <date_edit_save>
     9ec:	81 11       	cpse	r24, r1
				} else {
					if(date_edit_save == EDIT) sprintf(string_for_write, "%04d-%02d-%02d %5s", ev, honap, nap, edited_text);
     9ee:	20 c0       	rjmp	.+64     	; 0xa30 <main+0x5a4>
     9f0:	8d ea       	ldi	r24, 0xAD	; 173
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	9f 93       	push	r25
     9f6:	8f 93       	push	r24
     9f8:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <nap>
     9fc:	1f 92       	push	r1
     9fe:	8f 93       	push	r24
     a00:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <honap>
     a04:	1f 92       	push	r1
     a06:	8f 93       	push	r24
     a08:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <ev+0x1>
     a0c:	8f 93       	push	r24
     a0e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <ev>
     a12:	8f 93       	push	r24
     a14:	8a e7       	ldi	r24, 0x7A	; 122
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	9f 93       	push	r25
     a1a:	8f 93       	push	r24
     a1c:	ce 01       	movw	r24, r28
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	9f 93       	push	r25
     a22:	8f 93       	push	r24
     a24:	f4 d6       	rcall	.+3560   	; 0x180e <sprintf>
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	cd bf       	out	0x3d, r28	; 61
     a30:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <date_edit_save>
     a34:	81 30       	cpi	r24, 0x01	; 1
					if(date_edit_save == SAVE) {
     a36:	69 f5       	brne	.+90     	; 0xa92 <main+0x606>
     a38:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <homerseklet+0x1>
     a3c:	8f 93       	push	r24
						sprintf(string_for_write, "%04d%02d%02d %02d%02d %02d", ev, honap, nap, ora, perc, homerseklet);
     a3e:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <homerseklet>
     a42:	8f 93       	push	r24
     a44:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <perc>
     a48:	1f 92       	push	r1
     a4a:	8f 93       	push	r24
     a4c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <ora>
     a50:	1f 92       	push	r1
     a52:	8f 93       	push	r24
     a54:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <nap>
     a58:	1f 92       	push	r1
     a5a:	8f 93       	push	r24
     a5c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <honap>
     a60:	1f 92       	push	r1
     a62:	8f 93       	push	r24
     a64:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <ev+0x1>
     a68:	8f 93       	push	r24
     a6a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <ev>
     a6e:	8f 93       	push	r24
     a70:	8d e3       	ldi	r24, 0x3D	; 61
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	9f 93       	push	r25
     a76:	8f 93       	push	r24
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	9f 93       	push	r25
     a7e:	8f 93       	push	r24
     a80:	c6 d6       	rcall	.+3468   	; 0x180e <sprintf>
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <curr_edit>
						// sprintf(string_for_write, "%04d%02d%02d %02d%02d %02d", ev, honap, nap, ora, perc, masodperc);
						curr_edit = NOEDIT;
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <curr_edit>
     a96:	82 30       	cpi	r24, 0x02	; 2
					}
				}
			}
			
			if(curr_edit == NOEDIT) {
     a98:	51 f5       	brne	.+84     	; 0xaee <main+0x662>
     a9a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <homerseklet+0x1>
     a9e:	8f 93       	push	r24
				sprintf(string_for_write, "%04d%02d%02d %02d%02d %02d", ev, honap, nap, ora, perc, homerseklet);
     aa0:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <homerseklet>
     aa4:	8f 93       	push	r24
     aa6:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <perc>
     aaa:	1f 92       	push	r1
     aac:	8f 93       	push	r24
     aae:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <ora>
     ab2:	1f 92       	push	r1
     ab4:	8f 93       	push	r24
     ab6:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <nap>
     aba:	1f 92       	push	r1
     abc:	8f 93       	push	r24
     abe:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <honap>
     ac2:	1f 92       	push	r1
     ac4:	8f 93       	push	r24
     ac6:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <ev+0x1>
     aca:	8f 93       	push	r24
     acc:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <ev>
     ad0:	8f 93       	push	r24
     ad2:	8d e3       	ldi	r24, 0x3D	; 61
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	9f 93       	push	r25
     ad8:	8f 93       	push	r24
     ada:	ce 01       	movw	r24, r28
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	9f 93       	push	r25
     ae0:	8f 93       	push	r24
     ae2:	95 d6       	rcall	.+3370   	; 0x180e <sprintf>
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	80 e0       	ldi	r24, 0x00	; 0
				// sprintf(string_for_write, "%04d%02d%02d %02d%02d %02d", ev, honap, nap, ora, perc, masodperc);
				//sprintf(string_for_write, "%d", homerseklet);
			}
			
			lcd_set_cursor_position(0);
     af0:	53 dc       	rcall	.-1882   	; 0x398 <lcd_set_cursor_position>
     af2:	ce 01       	movw	r24, r28
     af4:	01 96       	adiw	r24, 0x01	; 1
			lcd_write_string(string_for_write);
     af6:	65 dc       	rcall	.-1846   	; 0x3c2 <lcd_write_string>
     af8:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <task_100ms>
     afc:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <task_500ms>
			
			
			task_100ms=FALSE;
     b00:	88 23       	and	r24, r24
		}
		if(task_500ms)
     b02:	b9 f0       	breq	.+46     	; 0xb32 <main+0x6a6>
     b04:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <curr_edit>
     b08:	82 30       	cpi	r24, 0x02	; 2
		{
			if(curr_edit == NOEDIT) {
     b0a:	89 f4       	brne	.+34     	; 0xb2e <main+0x6a2>
     b0c:	0f 2e       	mov	r0, r31
     b0e:	f8 e9       	ldi	r31, 0x98	; 152
				twi_mr_mode(&masodperc, &perc, &ora, &nap, &honap, &ev);	
     b10:	ef 2e       	mov	r14, r31
     b12:	f1 e0       	ldi	r31, 0x01	; 1
     b14:	ff 2e       	mov	r15, r31
     b16:	f0 2d       	mov	r31, r0
     b18:	0a e9       	ldi	r16, 0x9A	; 154
     b1a:	11 e0       	ldi	r17, 0x01	; 1
     b1c:	2b e9       	ldi	r18, 0x9B	; 155
     b1e:	31 e0       	ldi	r19, 0x01	; 1
     b20:	4c e9       	ldi	r20, 0x9C	; 156
     b22:	51 e0       	ldi	r21, 0x01	; 1
     b24:	6d e9       	ldi	r22, 0x9D	; 157
     b26:	71 e0       	ldi	r23, 0x01	; 1
     b28:	8e e9       	ldi	r24, 0x9E	; 158
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	58 d3       	rcall	.+1712   	; 0x11de <twi_mr_mode>
     b2e:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <task_500ms>
			}
			task_500ms=FALSE;
     b32:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <task_1s>
		}
		
		if(task_1s) {
     b36:	88 23       	and	r24, r24
     b38:	09 f4       	brne	.+2      	; 0xb3c <main+0x6b0>
     b3a:	ca cc       	rjmp	.-1644   	; 0x4d0 <main+0x44>
     b3c:	40 91 98 01 	lds	r20, 0x0198	; 0x800198 <ev>
			
			// CAN
			// DATE, TIME
			uint8_t cnt_4bit = 3;
						
			uint8_t ev_rovid = ev % 100;
     b40:	50 91 99 01 	lds	r21, 0x0199	; 0x800199 <ev+0x1>
     b44:	9a 01       	movw	r18, r20
     b46:	36 95       	lsr	r19
     b48:	27 95       	ror	r18
     b4a:	36 95       	lsr	r19
     b4c:	27 95       	ror	r18
     b4e:	ab e7       	ldi	r26, 0x7B	; 123
     b50:	b4 e1       	ldi	r27, 0x14	; 20
     b52:	3a d6       	rcall	.+3188   	; 0x17c8 <__umulhisi3>
     b54:	bc 01       	movw	r22, r24
     b56:	76 95       	lsr	r23
     b58:	67 95       	ror	r22
     b5a:	24 e6       	ldi	r18, 0x64	; 100
     b5c:	26 9f       	mul	r18, r22
     b5e:	c0 01       	movw	r24, r0
     b60:	27 9f       	mul	r18, r23
     b62:	90 0d       	add	r25, r0
     b64:	11 24       	eor	r1, r1
     b66:	ba 01       	movw	r22, r20
     b68:	68 1b       	sub	r22, r24
     b6a:	79 0b       	sbc	r23, r25
     b6c:	70 91 9a 01 	lds	r23, 0x019A	; 0x80019a <honap>
     b70:	87 2f       	mov	r24, r23
			uint8_t honap_0_bit = honap & 1;
     b72:	8e 70       	andi	r24, 0x0E	; 14
     b74:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <nap>
			uint8_t honap_123_bit = honap & (0b00001110);
     b78:	32 2f       	mov	r19, r18
			uint8_t hetnapja = 5;
			uint8_t nap_01_bit = nap & (0b00000011);
     b7a:	33 70       	andi	r19, 0x03	; 3
     b7c:	42 2f       	mov	r20, r18
     b7e:	4c 71       	andi	r20, 0x1C	; 28
     b80:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <masodperc>
			uint8_t nap_234_bit = nap & (0b00011100);
     b84:	59 2f       	mov	r21, r25
			uint8_t masodperc_01_bit = masodperc & (0b00000011);
     b86:	53 70       	andi	r21, 0x03	; 3
     b88:	9c 73       	andi	r25, 0x3C	; 60
     b8a:	70 fb       	bst	r23, 0
     b8c:	aa 24       	eor	r10, r10
			uint8_t masodperc_2345_bit = masodperc & (0b00111100);
     b8e:	a0 f8       	bld	r10, 0
						
			uint8_t can_tx_data[5];
			can_tx_data[0] = ev_rovid | (honap_0_bit<<7);
     b90:	b1 2c       	mov	r11, r1
     b92:	f5 01       	movw	r30, r10
     b94:	f6 95       	lsr	r31
     b96:	fe 2f       	mov	r31, r30
     b98:	ee 27       	eor	r30, r30
     b9a:	f7 95       	ror	r31
     b9c:	e7 95       	ror	r30
     b9e:	6e 2b       	or	r22, r30
     ba0:	6b ab       	std	Y+51, r22	; 0x33
     ba2:	60 e4       	ldi	r22, 0x40	; 64
     ba4:	36 9f       	mul	r19, r22
     ba6:	90 01       	movw	r18, r0
			can_tx_data[1] = (honap_123_bit>>1) | (hetnapja<<3) | (nap_01_bit<<6);
     ba8:	11 24       	eor	r1, r1
     baa:	86 95       	lsr	r24
     bac:	88 62       	ori	r24, 0x28	; 40
     bae:	28 2b       	or	r18, r24
     bb0:	2c ab       	std	Y+52, r18	; 0x34
     bb2:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <ora>
     bb6:	28 2f       	mov	r18, r24
			can_tx_data[2] = (nap_234_bit>>2) | (ora<<3);
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	22 0f       	add	r18, r18
     bbc:	33 1f       	adc	r19, r19
     bbe:	22 0f       	add	r18, r18
     bc0:	33 1f       	adc	r19, r19
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	84 2f       	mov	r24, r20
     bc8:	86 95       	lsr	r24
     bca:	86 95       	lsr	r24
     bcc:	28 2b       	or	r18, r24
     bce:	2d ab       	std	Y+53, r18	; 0x35
     bd0:	80 e4       	ldi	r24, 0x40	; 64
     bd2:	58 9f       	mul	r21, r24
     bd4:	90 01       	movw	r18, r0
			can_tx_data[3] = perc | (masodperc_01_bit<<6);
     bd6:	11 24       	eor	r1, r1
     bd8:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <perc>
     bdc:	28 2b       	or	r18, r24
     bde:	2e ab       	std	Y+54, r18	; 0x36
     be0:	96 95       	lsr	r25
			can_tx_data[4] = (masodperc_2345_bit>>2) |(cnt_4bit<<4);
     be2:	96 95       	lsr	r25
     be4:	90 63       	ori	r25, 0x30	; 48
     be6:	9f ab       	std	Y+55, r25	; 0x37
     be8:	ce 01       	movw	r24, r28
			CAN_SendMob(0,0x1FE,FALSE,5,can_tx_data);
     bea:	c3 96       	adiw	r24, 0x33	; 51
     bec:	7c 01       	movw	r14, r24
     bee:	05 e0       	ldi	r16, 0x05	; 5
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	4e ef       	ldi	r20, 0xFE	; 254
     bf4:	51 e0       	ldi	r21, 0x01	; 1
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	08 db       	rcall	.-2544   	; 0x20e <CAN_SendMob>
     bfe:	5c d1       	rcall	.+696    	; 0xeb8 <read_temperature>
     c00:	95 95       	asr	r25
			
			// TEMPERATURE 
			homerseklet = (read_temperature()>>1);
     c02:	87 95       	ror	r24
     c04:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <homerseklet+0x1>
     c08:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <homerseklet>
     c0c:	9c 01       	movw	r18, r24
     c0e:	24 56       	subi	r18, 0x64	; 100
     c10:	31 09       	sbc	r19, r1
			
			int16_t homerseklet_can = (homerseklet-100) * 10;
     c12:	c9 01       	movw	r24, r18
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	22 0f       	add	r18, r18
     c1a:	33 1f       	adc	r19, r19
     c1c:	22 0f       	add	r18, r18
     c1e:	33 1f       	adc	r19, r19
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	82 0f       	add	r24, r18
     c26:	93 1f       	adc	r25, r19
     c28:	88 af       	std	Y+56, r24	; 0x38
     c2a:	99 af       	std	Y+57, r25	; 0x39
			uint8_t homerseklet_can9_12 = (uint8_t)(homerseklet_can>>8);

			uint8_t can_tx_data_1[2];
			can_tx_data_1[0] = 0x00;
			can_tx_data_1[1] = 99;
			can_tx_data_1[0] = homerseklet_can0_8;
     c2c:	ce 01       	movw	r24, r28
			can_tx_data_1[1] = homerseklet_can9_12;
     c2e:	c8 96       	adiw	r24, 0x38	; 56
			CAN_SendMob(1,0x1FF,FALSE,2,can_tx_data_1);
     c30:	7c 01       	movw	r14, r24
     c32:	02 e0       	ldi	r16, 0x02	; 2
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	4f ef       	ldi	r20, 0xFF	; 255
     c38:	51 e0       	ldi	r21, 0x01	; 1
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	e6 da       	rcall	.-2612   	; 0x20e <CAN_SendMob>
     c42:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <task_1s>
     c46:	44 cc       	rjmp	.-1912   	; 0x4d0 <main+0x44>

00000c48 <__vector_16>:
			
			task_1s = FALSE;
     c48:	1f 92       	push	r1
     c4a:	0f 92       	push	r0
     c4c:	0f b6       	in	r0, 0x3f	; 63

/******************************************************************************
* Interrupt Routines
******************************************************************************/
ISR(TIMER0_COMP_vect) //timer CTC interrupt
{
     c4e:	0f 92       	push	r0
     c50:	11 24       	eor	r1, r1
     c52:	2f 93       	push	r18
     c54:	3f 93       	push	r19
     c56:	4f 93       	push	r20
     c58:	5f 93       	push	r21
     c5a:	6f 93       	push	r22
     c5c:	7f 93       	push	r23
     c5e:	8f 93       	push	r24
     c60:	9f 93       	push	r25
     c62:	af 93       	push	r26
     c64:	bf 93       	push	r27
	timer_cnt++;
     c66:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <timer_cnt>
     c6a:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <timer_cnt+0x1>
     c6e:	4f 5f       	subi	r20, 0xFF	; 255
     c70:	5f 4f       	sbci	r21, 0xFF	; 255
     c72:	50 93 ab 01 	sts	0x01AB, r21	; 0x8001ab <timer_cnt+0x1>
     c76:	40 93 aa 01 	sts	0x01AA, r20	; 0x8001aa <timer_cnt>
	if(timer_cnt % 1 == 0) task_10ms = TRUE;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <task_10ms>
	if(timer_cnt % 10 == 0) task_100ms = TRUE;
     c80:	9a 01       	movw	r18, r20
     c82:	ad ec       	ldi	r26, 0xCD	; 205
     c84:	bc ec       	ldi	r27, 0xCC	; 204
     c86:	a0 d5       	rcall	.+2880   	; 0x17c8 <__umulhisi3>
     c88:	96 95       	lsr	r25
     c8a:	87 95       	ror	r24
     c8c:	96 95       	lsr	r25
     c8e:	87 95       	ror	r24
     c90:	96 95       	lsr	r25
     c92:	87 95       	ror	r24
     c94:	9c 01       	movw	r18, r24
     c96:	22 0f       	add	r18, r18
     c98:	33 1f       	adc	r19, r19
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	82 0f       	add	r24, r18
     ca8:	93 1f       	adc	r25, r19
     caa:	48 17       	cp	r20, r24
     cac:	59 07       	cpc	r21, r25
     cae:	19 f4       	brne	.+6      	; 0xcb6 <__vector_16+0x6e>
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <task_100ms>
	if(timer_cnt % 50 == 0) task_500ms =TRUE;
     cb6:	9a 01       	movw	r18, r20
     cb8:	36 95       	lsr	r19
     cba:	27 95       	ror	r18
     cbc:	ab e7       	ldi	r26, 0x7B	; 123
     cbe:	b4 e1       	ldi	r27, 0x14	; 20
     cc0:	83 d5       	rcall	.+2822   	; 0x17c8 <__umulhisi3>
     cc2:	96 95       	lsr	r25
     cc4:	87 95       	ror	r24
     cc6:	62 e3       	ldi	r22, 0x32	; 50
     cc8:	68 9f       	mul	r22, r24
     cca:	90 01       	movw	r18, r0
     ccc:	69 9f       	mul	r22, r25
     cce:	30 0d       	add	r19, r0
     cd0:	11 24       	eor	r1, r1
     cd2:	42 17       	cp	r20, r18
     cd4:	53 07       	cpc	r21, r19
     cd6:	19 f4       	brne	.+6      	; 0xcde <__vector_16+0x96>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <task_500ms>
	if(timer_cnt % 100 == 0) task_1s = TRUE;
     cde:	9a 01       	movw	r18, r20
     ce0:	36 95       	lsr	r19
     ce2:	27 95       	ror	r18
     ce4:	36 95       	lsr	r19
     ce6:	27 95       	ror	r18
     ce8:	ab e7       	ldi	r26, 0x7B	; 123
     cea:	b4 e1       	ldi	r27, 0x14	; 20
     cec:	6d d5       	rcall	.+2778   	; 0x17c8 <__umulhisi3>
     cee:	96 95       	lsr	r25
     cf0:	87 95       	ror	r24
     cf2:	64 e6       	ldi	r22, 0x64	; 100
     cf4:	68 9f       	mul	r22, r24
     cf6:	90 01       	movw	r18, r0
     cf8:	69 9f       	mul	r22, r25
     cfa:	30 0d       	add	r19, r0
     cfc:	11 24       	eor	r1, r1
     cfe:	42 17       	cp	r20, r18
     d00:	53 07       	cpc	r21, r19
     d02:	19 f4       	brne	.+6      	; 0xd0a <__vector_16+0xc2>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <task_1s>
}
     d0a:	bf 91       	pop	r27
     d0c:	af 91       	pop	r26
     d0e:	9f 91       	pop	r25
     d10:	8f 91       	pop	r24
     d12:	7f 91       	pop	r23
     d14:	6f 91       	pop	r22
     d16:	5f 91       	pop	r21
     d18:	4f 91       	pop	r20
     d1a:	3f 91       	pop	r19
     d1c:	2f 91       	pop	r18
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <__vector_1>:

ISR(INT0_vect) //extint 0 interrput
{
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1

}
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	0f 90       	pop	r0
     d38:	1f 90       	pop	r1
     d3a:	18 95       	reti

00000d3c <__vector_21>:

ISR(USART0_RX_vect)
{
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
	// char c = UDR0;
	// lcd_write_char(c);
}
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <__vector_25>:

ISR(ADC_vect)
{
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
	ad_result = ADC;
     d5e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     d62:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     d66:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <ad_result+0x1>
     d6a:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <ad_result>
     d6e:	9f 91       	pop	r25
     d70:	8f 91       	pop	r24
     d72:	0f 90       	pop	r0
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	0f 90       	pop	r0
     d78:	1f 90       	pop	r1
     d7a:	18 95       	reti

00000d7c <timer_init>:
     d7c:	8d e0       	ldi	r24, 0x0D	; 13
     d7e:	84 bd       	out	0x24, r24	; 36
     d80:	8d e4       	ldi	r24, 0x4D	; 77
     d82:	87 bd       	out	0x27, r24	; 39
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     d8a:	08 95       	ret

00000d8c <external_int_init>:
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	8d bb       	out	0x1d, r24	; 29
     d96:	08 95       	ret

00000d98 <adc_init>:
     d98:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     d9c:	ea e7       	ldi	r30, 0x7A	; 122
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	8f e8       	ldi	r24, 0x8F	; 143
     da2:	80 83       	st	Z, r24
     da4:	80 81       	ld	r24, Z
     da6:	80 64       	ori	r24, 0x40	; 64
     da8:	80 83       	st	Z, r24
     daa:	08 95       	ret

00000dac <set_input>:
* Input:			-
* Output:			-
* Notes:			- 
******************************************************************************/
void set_input(void) {
	DDRB = (0<<PB0);
     dac:	14 b8       	out	0x04, r1	; 4
	PORTB = (0<<PB0);
     dae:	15 b8       	out	0x05, r1	; 5
     db0:	08 95       	ret

00000db2 <set_output>:
* Input:			uint8_t output -> HIGH = 1; LOW = 0
* Output:			-
* Notes:			- 
******************************************************************************/
void set_output(uint8_t output) {
	DDRB = (1<<PB0);
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	94 b9       	out	0x04, r25	; 4
	if(output == HIGH) PORTB = (1<<PB0);
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	11 f4       	brne	.+4      	; 0xdbe <set_output+0xc>
     dba:	85 b9       	out	0x05, r24	; 5
     dbc:	08 95       	ret
	else if(output == LOW) PORTB = (0<<PB0);
     dbe:	81 11       	cpse	r24, r1
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <set_output+0x12>
     dc2:	15 b8       	out	0x05, r1	; 5
     dc4:	08 95       	ret

00000dc6 <reset_presence_pulse>:
					then slave initiates a presence pulse to the 1-wire communication
* Input:			-
* Output:			-
* Notes:			timing is explained in DS18S20 datasheet p. 13
******************************************************************************/
void reset_presence_pulse(void) {
     dc6:	cf 93       	push	r28
	uint8_t presence_succeded = FALSE;
     dc8:	c0 e0       	ldi	r28, 0x00	; 0
	while(!presence_succeded) {
     dca:	15 c0       	rjmp	.+42     	; 0xdf6 <reset_presence_pulse+0x30>
		set_output(LOW);	
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	f1 df       	rcall	.-30     	; 0xdb2 <set_output>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dd0:	87 ee       	ldi	r24, 0xE7	; 231
     dd2:	93 e0       	ldi	r25, 0x03	; 3
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <reset_presence_pulse+0xe>
     dd8:	00 c0       	rjmp	.+0      	; 0xdda <reset_presence_pulse+0x14>
		_delay_us(500);
		set_input();
     dda:	00 00       	nop
     ddc:	e7 df       	rcall	.-50     	; 0xdac <set_input>
     dde:	9a eb       	ldi	r25, 0xBA	; 186
     de0:	9a 95       	dec	r25
     de2:	f1 f7       	brne	.-4      	; 0xde0 <reset_presence_pulse+0x1a>
     de4:	00 c0       	rjmp	.+0      	; 0xde6 <reset_presence_pulse+0x20>
		_delay_us(70);		
		if((PINB & (1<<PB0)) == 0) {
     de6:	18 9b       	sbis	0x03, 0	; 3
			presence_succeded = TRUE;
     de8:	c1 e0       	ldi	r28, 0x01	; 1
     dea:	8b e5       	ldi	r24, 0x5B	; 91
     dec:	93 e0       	ldi	r25, 0x03	; 3
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <reset_presence_pulse+0x28>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <reset_presence_pulse+0x2e>
     df4:	00 00       	nop
* Output:			-
* Notes:			timing is explained in DS18S20 datasheet p. 13
******************************************************************************/
void reset_presence_pulse(void) {
	uint8_t presence_succeded = FALSE;
	while(!presence_succeded) {
     df6:	cc 23       	and	r28, r28
     df8:	49 f3       	breq	.-46     	; 0xdcc <reset_presence_pulse+0x6>
		if((PINB & (1<<PB0)) == 0) {
			presence_succeded = TRUE;
		}
		_delay_us(430);
	}
}
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <write_slot>:
* Description:		1-wire communication write slot
* Input:			uint8_t bit -> the bit we want to transmit; either 0 or 1
* Output:			-
* Notes:			timing is explained in DS18S20 datasheet pp. 13-14
******************************************************************************/
void write_slot(uint8_t bit) {
     dfe:	cf 93       	push	r28
     e00:	c8 2f       	mov	r28, r24
	// the slot must be at least 60us long
	// there must be at least 1us between write slots
	// to write 1 -> master must release the bus within 15us
	// to write 0 -> master must continue to hold the bus LOW
	
	set_output(LOW);
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	d6 df       	rcall	.-84     	; 0xdb2 <set_output>
	if(bit == 1) {
     e06:	c1 30       	cpi	r28, 0x01	; 1
     e08:	49 f4       	brne	.+18     	; 0xe1c <write_slot+0x1e>
     e0a:	8d e0       	ldi	r24, 0x0D	; 13
     e0c:	8a 95       	dec	r24
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <write_slot+0xe>
		_delay_us(5);
		set_input();
     e10:	00 00       	nop
     e12:	cc df       	rcall	.-104    	; 0xdac <set_input>
     e14:	88 ec       	ldi	r24, 0xC8	; 200
     e16:	8a 95       	dec	r24
     e18:	f1 f7       	brne	.-4      	; 0xe16 <write_slot+0x18>
     e1a:	07 c0       	rjmp	.+14     	; 0xe2a <write_slot+0x2c>
		_delay_us(75);
	} else if(bit == 0) {
     e1c:	c1 11       	cpse	r28, r1
     e1e:	05 c0       	rjmp	.+10     	; 0xe2a <write_slot+0x2c>
     e20:	85 ed       	ldi	r24, 0xD5	; 213
     e22:	8a 95       	dec	r24
     e24:	f1 f7       	brne	.-4      	; 0xe22 <write_slot+0x24>
		_delay_us(80);
		set_input();
     e26:	00 00       	nop
     e28:	c1 df       	rcall	.-126    	; 0xdac <set_input>
     e2a:	85 e0       	ldi	r24, 0x05	; 5
     e2c:	8a 95       	dec	r24
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <write_slot+0x2e>
     e30:	00 00       	nop
	}
	_delay_us(2);
}
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <read_slot>:
	// there must be at least 1us between write slots
	// slot is initiated by pulling the bus LOW for at least 1us
	// output data is valid for 15us after the read slot has been initiated
	// we read the data at the 12th us after the read slot's initiation
	
	set_output(LOW);
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	bc df       	rcall	.-136    	; 0xdb2 <set_output>
     e3a:	85 e0       	ldi	r24, 0x05	; 5
     e3c:	8a 95       	dec	r24
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <read_slot+0x6>
	_delay_us(2);
	set_input();
     e40:	00 00       	nop
     e42:	b4 df       	rcall	.-152    	; 0xdac <set_input>
     e44:	8a e3       	ldi	r24, 0x3A	; 58
     e46:	8a 95       	dec	r24
     e48:	f1 f7       	brne	.-4      	; 0xe46 <read_slot+0x10>
     e4a:	00 c0       	rjmp	.+0      	; 0xe4c <read_slot+0x16>
	_delay_us(22);
	if((PINB & (1<<PB0)) == 0) return 0;
     e4c:	93 b1       	in	r25, 0x03	; 3
     e4e:	89 2f       	mov	r24, r25
     e50:	81 70       	andi	r24, 0x01	; 1
     e52:	90 ff       	sbrs	r25, 0
     e54:	08 c0       	rjmp	.+16     	; 0xe66 <read_slot+0x30>
	else if((PINB & (1<<PB0)) == (1<<PB0)) return 1;
     e56:	18 99       	sbic	0x03, 0	; 3
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <read_slot+0x2e>
     e5a:	8a eb       	ldi	r24, 0xBA	; 186
     e5c:	8a 95       	dec	r24
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <read_slot+0x26>
     e60:	00 c0       	rjmp	.+0      	; 0xe62 <read_slot+0x2c>
	_delay_us(70);
}
     e62:	08 95       	ret
	set_output(LOW);
	_delay_us(2);
	set_input();
	_delay_us(22);
	if((PINB & (1<<PB0)) == 0) return 0;
	else if((PINB & (1<<PB0)) == (1<<PB0)) return 1;
     e64:	81 e0       	ldi	r24, 0x01	; 1
	_delay_us(70);
}
     e66:	08 95       	ret

00000e68 <write_8_bit>:
* Description:		writes 8-bit data bitwise to the 1-wire bus
* Input:			uint8_t data -> the data we want to write (at most 8-bit!)
* Output:			-
* Notes:			writing starts with the LEAST SIGNIFICANT BIT first
******************************************************************************/
void write_8_bit(uint8_t data) {
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	d8 2f       	mov	r29, r24
	for(uint8_t i=0; i<8; i++) {
     e6e:	c0 e0       	ldi	r28, 0x00	; 0
     e70:	1e c0       	rjmp	.+60     	; 0xeae <write_8_bit+0x46>
		if((data & (1<<i)) == 0) write_slot(0);
     e72:	8d 2f       	mov	r24, r29
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	9c 01       	movw	r18, r24
     e78:	0c 2e       	mov	r0, r28
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <write_8_bit+0x18>
     e7c:	35 95       	asr	r19
     e7e:	27 95       	ror	r18
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <write_8_bit+0x14>
     e84:	20 fd       	sbrc	r18, 0
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <write_8_bit+0x26>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	b9 df       	rcall	.-142    	; 0xdfe <write_slot>
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <write_8_bit+0x44>
		else if((data & (1<<i)) == (1<<i)) write_slot(1);
     e8e:	21 e0       	ldi	r18, 0x01	; 1
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	0c 2e       	mov	r0, r28
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <write_8_bit+0x32>
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <write_8_bit+0x2e>
     e9e:	82 23       	and	r24, r18
     ea0:	93 23       	and	r25, r19
     ea2:	28 17       	cp	r18, r24
     ea4:	39 07       	cpc	r19, r25
     ea6:	11 f4       	brne	.+4      	; 0xeac <write_8_bit+0x44>
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	a9 df       	rcall	.-174    	; 0xdfe <write_slot>
* Input:			uint8_t data -> the data we want to write (at most 8-bit!)
* Output:			-
* Notes:			writing starts with the LEAST SIGNIFICANT BIT first
******************************************************************************/
void write_8_bit(uint8_t data) {
	for(uint8_t i=0; i<8; i++) {
     eac:	cf 5f       	subi	r28, 0xFF	; 255
     eae:	c8 30       	cpi	r28, 0x08	; 8
     eb0:	00 f3       	brcs	.-64     	; 0xe72 <write_8_bit+0xa>
		if((data & (1<<i)) == 0) write_slot(0);
		else if((data & (1<<i)) == (1<<i)) write_slot(1);
	}
}
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	08 95       	ret

00000eb8 <read_temperature>:
* Description:		reads the temperature data from the DS18S20
* Input:			-
* Output:			int16_t -> the data read in signed two's complement format
* Notes:			flow chart explained in DS18S20 datasheet pp. 16-19
******************************************************************************/
int16_t read_temperature(void) {
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
	int16_t temperature = 0;
	
	// Temperature conversion
	reset_presence_pulse();
     ebe:	83 df       	rcall	.-250    	; 0xdc6 <reset_presence_pulse>
	write_8_bit(SKIP_ROM);
     ec0:	8c ec       	ldi	r24, 0xCC	; 204
     ec2:	d2 df       	rcall	.-92     	; 0xe68 <write_8_bit>
	write_8_bit(CONVERT_T);
     ec4:	84 e4       	ldi	r24, 0x44	; 68
     ec6:	d0 df       	rcall	.-96     	; 0xe68 <write_8_bit>
	while(!read_slot());
     ec8:	b6 df       	rcall	.-148    	; 0xe36 <read_slot>
     eca:	88 23       	and	r24, r24
	
	// Read data
	reset_presence_pulse();
     ecc:	e9 f3       	breq	.-6      	; 0xec8 <read_temperature+0x10>
	write_8_bit(SKIP_ROM);
     ece:	7b df       	rcall	.-266    	; 0xdc6 <reset_presence_pulse>
     ed0:	8c ec       	ldi	r24, 0xCC	; 204
     ed2:	ca df       	rcall	.-108    	; 0xe68 <write_8_bit>
	write_8_bit(READ_SCRATCHPAD);
     ed4:	8e eb       	ldi	r24, 0xBE	; 190
     ed6:	c8 df       	rcall	.-112    	; 0xe68 <write_8_bit>
	for(uint8_t i=0; i<16; i++) {
     ed8:	c0 e0       	ldi	r28, 0x00	; 0
* Input:			-
* Output:			int16_t -> the data read in signed two's complement format
* Notes:			flow chart explained in DS18S20 datasheet pp. 16-19
******************************************************************************/
int16_t read_temperature(void) {
	int16_t temperature = 0;
     eda:	00 e0       	ldi	r16, 0x00	; 0
     edc:	10 e0       	ldi	r17, 0x00	; 0
	
	// Read data
	reset_presence_pulse();
	write_8_bit(SKIP_ROM);
	write_8_bit(READ_SCRATCHPAD);
	for(uint8_t i=0; i<16; i++) {
     ede:	0b c0       	rjmp	.+22     	; 0xef6 <read_temperature+0x3e>
		temperature |= (read_slot()<<i);
     ee0:	aa df       	rcall	.-172    	; 0xe36 <read_slot>
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0c 2e       	mov	r0, r28
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <read_temperature+0x34>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <read_temperature+0x30>
     ef0:	08 2b       	or	r16, r24
     ef2:	19 2b       	or	r17, r25
	
	// Read data
	reset_presence_pulse();
	write_8_bit(SKIP_ROM);
	write_8_bit(READ_SCRATCHPAD);
	for(uint8_t i=0; i<16; i++) {
     ef4:	cf 5f       	subi	r28, 0xFF	; 255
     ef6:	c0 31       	cpi	r28, 0x10	; 16
     ef8:	98 f3       	brcs	.-26     	; 0xee0 <read_temperature+0x28>
		temperature |= (read_slot()<<i);
	}
	
	// End of communication
	reset_presence_pulse();
     efa:	65 df       	rcall	.-310    	; 0xdc6 <reset_presence_pulse>
     efc:	c8 01       	movw	r24, r16
	
	return temperature;
}
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	08 95       	ret

00000f06 <decimal_to_bcd>:
     f06:	84 36       	cpi	r24, 0x64	; 100
     f08:	c8 f4       	brcc	.+50     	; 0xf3c <decimal_to_bcd+0x36>
     f0a:	9d ec       	ldi	r25, 0xCD	; 205
     f0c:	89 9f       	mul	r24, r25
     f0e:	91 2d       	mov	r25, r1
     f10:	11 24       	eor	r1, r1
     f12:	49 2f       	mov	r20, r25
     f14:	46 95       	lsr	r20
     f16:	46 95       	lsr	r20
     f18:	46 95       	lsr	r20
     f1a:	44 0f       	add	r20, r20
     f1c:	24 2f       	mov	r18, r20
     f1e:	22 0f       	add	r18, r18
     f20:	22 0f       	add	r18, r18
     f22:	42 0f       	add	r20, r18
     f24:	84 1b       	sub	r24, r20
     f26:	48 2f       	mov	r20, r24
     f28:	96 95       	lsr	r25
     f2a:	96 95       	lsr	r25
     f2c:	96 95       	lsr	r25
     f2e:	80 e1       	ldi	r24, 0x10	; 16
     f30:	98 9f       	mul	r25, r24
     f32:	90 01       	movw	r18, r0
     f34:	11 24       	eor	r1, r1
     f36:	84 2f       	mov	r24, r20
     f38:	82 2b       	or	r24, r18
     f3a:	08 95       	ret
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	08 95       	ret

00000f40 <bcd_to_decimal>:
     f40:	98 2f       	mov	r25, r24
     f42:	92 95       	swap	r25
     f44:	9f 70       	andi	r25, 0x0F	; 15
     f46:	8f 70       	andi	r24, 0x0F	; 15
     f48:	99 0f       	add	r25, r25
     f4a:	29 2f       	mov	r18, r25
     f4c:	22 0f       	add	r18, r18
     f4e:	22 0f       	add	r18, r18
     f50:	92 0f       	add	r25, r18
     f52:	89 0f       	add	r24, r25
     f54:	08 95       	ret

00000f56 <calc_day_of_week>:
     f56:	8f 92       	push	r8
     f58:	9f 92       	push	r9
     f5a:	af 92       	push	r10
     f5c:	bf 92       	push	r11
     f5e:	df 92       	push	r13
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	7c 01       	movw	r14, r24
     f6e:	56 2f       	mov	r21, r22
     f70:	d4 2e       	mov	r13, r20
     f72:	8c 01       	movw	r16, r24
     f74:	16 95       	lsr	r17
     f76:	07 95       	ror	r16
     f78:	16 95       	lsr	r17
     f7a:	07 95       	ror	r16
     f7c:	98 01       	movw	r18, r16
     f7e:	ab e7       	ldi	r26, 0x7B	; 123
     f80:	b4 e1       	ldi	r27, 0x14	; 20
     f82:	22 d4       	rcall	.+2116   	; 0x17c8 <__umulhisi3>
     f84:	ec 01       	movw	r28, r24
     f86:	d6 95       	lsr	r29
     f88:	c7 95       	ror	r28
     f8a:	65 2f       	mov	r22, r21
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	bc d2       	rcall	.+1400   	; 0x150c <__floatsisf>
     f94:	26 e6       	ldi	r18, 0x66	; 102
     f96:	36 e6       	ldi	r19, 0x66	; 102
     f98:	46 e2       	ldi	r20, 0x26	; 38
     f9a:	50 e4       	ldi	r21, 0x40	; 64
     f9c:	96 d3       	rcall	.+1836   	; 0x16ca <__mulsf3>
     f9e:	2d ec       	ldi	r18, 0xCD	; 205
     fa0:	3c ec       	ldi	r19, 0xCC	; 204
     fa2:	4c e4       	ldi	r20, 0x4C	; 76
     fa4:	5e e3       	ldi	r21, 0x3E	; 62
     fa6:	1a d2       	rcall	.+1076   	; 0x13dc <__subsf3>
     fa8:	ec d2       	rcall	.+1496   	; 0x1582 <floor>
     faa:	4b 01       	movw	r8, r22
     fac:	5c 01       	movw	r10, r24
     fae:	6d 2d       	mov	r22, r13
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	aa d2       	rcall	.+1364   	; 0x150c <__floatsisf>
     fb8:	a5 01       	movw	r20, r10
     fba:	94 01       	movw	r18, r8
     fbc:	10 d2       	rcall	.+1056   	; 0x13de <__addsf3>
     fbe:	4b 01       	movw	r8, r22
     fc0:	5c 01       	movw	r10, r24
     fc2:	be 01       	movw	r22, r28
     fc4:	77 27       	eor	r23, r23
     fc6:	66 0f       	add	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	07 2e       	mov	r0, r23
     fcc:	00 0c       	add	r0, r0
     fce:	88 0b       	sbc	r24, r24
     fd0:	99 0b       	sbc	r25, r25
     fd2:	9c d2       	rcall	.+1336   	; 0x150c <__floatsisf>
     fd4:	9b 01       	movw	r18, r22
     fd6:	ac 01       	movw	r20, r24
     fd8:	c5 01       	movw	r24, r10
     fda:	b4 01       	movw	r22, r8
     fdc:	ff d1       	rcall	.+1022   	; 0x13dc <__subsf3>
     fde:	4b 01       	movw	r8, r22
     fe0:	5c 01       	movw	r10, r24
     fe2:	b7 01       	movw	r22, r14
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	8f d2       	rcall	.+1310   	; 0x1508 <__floatunsisf>
     fea:	a5 01       	movw	r20, r10
     fec:	94 01       	movw	r18, r8
     fee:	f7 d1       	rcall	.+1006   	; 0x13de <__addsf3>
     ff0:	4b 01       	movw	r8, r22
     ff2:	5c 01       	movw	r10, r24
     ff4:	b8 01       	movw	r22, r16
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	86 d2       	rcall	.+1292   	; 0x1508 <__floatunsisf>
     ffc:	c2 d2       	rcall	.+1412   	; 0x1582 <floor>
     ffe:	9b 01       	movw	r18, r22
    1000:	ac 01       	movw	r20, r24
    1002:	c5 01       	movw	r24, r10
    1004:	b4 01       	movw	r22, r8
    1006:	eb d1       	rcall	.+982    	; 0x13de <__addsf3>
    1008:	4b 01       	movw	r8, r22
    100a:	5c 01       	movw	r10, r24
    100c:	6c 2f       	mov	r22, r28
    100e:	66 95       	lsr	r22
    1010:	66 95       	lsr	r22
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	79 d2       	rcall	.+1266   	; 0x150c <__floatsisf>
    101a:	b3 d2       	rcall	.+1382   	; 0x1582 <floor>
    101c:	9b 01       	movw	r18, r22
    101e:	ac 01       	movw	r20, r24
    1020:	c5 01       	movw	r24, r10
    1022:	b4 01       	movw	r22, r8
    1024:	dc d1       	rcall	.+952    	; 0x13de <__addsf3>
    1026:	3f d2       	rcall	.+1150   	; 0x14a6 <__fixsfsi>
    1028:	cb 01       	movw	r24, r22
    102a:	67 e0       	ldi	r22, 0x07	; 7
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	b0 d3       	rcall	.+1888   	; 0x1790 <__divmodhi4>
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	bf 90       	pop	r11
    1040:	af 90       	pop	r10
    1042:	9f 90       	pop	r9
    1044:	8f 90       	pop	r8
    1046:	08 95       	ret

00001048 <twi_init>:
    1048:	1a b8       	out	0x0a, r1	; 10
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	8b b9       	out	0x0b, r24	; 11
    104e:	88 e0       	ldi	r24, 0x08	; 8
    1050:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1054:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1058:	08 95       	ret

0000105a <twi_mt_mode>:
    105a:	cf 92       	push	r12
    105c:	df 92       	push	r13
    105e:	ef 92       	push	r14
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	c8 2f       	mov	r28, r24
    106a:	14 2f       	mov	r17, r20
    106c:	d2 2f       	mov	r29, r18
    106e:	94 ea       	ldi	r25, 0xA4	; 164
    1070:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1074:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1078:	99 23       	and	r25, r25
    107a:	e4 f7       	brge	.-8      	; 0x1074 <twi_mt_mode+0x1a>
    107c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1080:	98 7f       	andi	r25, 0xF8	; 248
    1082:	98 30       	cpi	r25, 0x08	; 8
    1084:	11 f0       	breq	.+4      	; 0x108a <twi_mt_mode+0x30>
    1086:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    108a:	90 ed       	ldi	r25, 0xD0	; 208
    108c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1090:	94 e8       	ldi	r25, 0x84	; 132
    1092:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1096:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    109a:	99 23       	and	r25, r25
    109c:	e4 f7       	brge	.-8      	; 0x1096 <twi_mt_mode+0x3c>
    109e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    10a2:	98 7f       	andi	r25, 0xF8	; 248
    10a4:	98 31       	cpi	r25, 0x18	; 24
    10a6:	11 f0       	breq	.+4      	; 0x10ac <twi_mt_mode+0x52>
    10a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    10ac:	c1 11       	cpse	r28, r1
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <twi_mt_mode+0x5c>
    10b0:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    10b4:	05 c0       	rjmp	.+10     	; 0x10c0 <twi_mt_mode+0x66>
    10b6:	c1 30       	cpi	r28, 0x01	; 1
    10b8:	19 f4       	brne	.+6      	; 0x10c0 <twi_mt_mode+0x66>
    10ba:	83 e0       	ldi	r24, 0x03	; 3
    10bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    10c0:	94 e8       	ldi	r25, 0x84	; 132
    10c2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10c6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10ca:	99 23       	and	r25, r25
    10cc:	e4 f7       	brge	.-8      	; 0x10c6 <twi_mt_mode+0x6c>
    10ce:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    10d2:	98 7f       	andi	r25, 0xF8	; 248
    10d4:	98 32       	cpi	r25, 0x28	; 40
    10d6:	11 f0       	breq	.+4      	; 0x10dc <twi_mt_mode+0x82>
    10d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    10dc:	c1 11       	cpse	r28, r1
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <twi_mt_mode+0x90>
    10e0:	86 2f       	mov	r24, r22
    10e2:	11 df       	rcall	.-478    	; 0xf06 <decimal_to_bcd>
    10e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    10e8:	08 c0       	rjmp	.+16     	; 0x10fa <twi_mt_mode+0xa0>
    10ea:	c1 30       	cpi	r28, 0x01	; 1
    10ec:	31 f4       	brne	.+12     	; 0x10fa <twi_mt_mode+0xa0>
    10ee:	40 2f       	mov	r20, r16
    10f0:	6e 2d       	mov	r22, r14
    10f2:	c6 01       	movw	r24, r12
    10f4:	30 df       	rcall	.-416    	; 0xf56 <calc_day_of_week>
    10f6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    10fa:	84 e8       	ldi	r24, 0x84	; 132
    10fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1100:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1104:	88 23       	and	r24, r24
    1106:	e4 f7       	brge	.-8      	; 0x1100 <__stack+0x1>
    1108:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    110c:	88 7f       	andi	r24, 0xF8	; 248
    110e:	88 32       	cpi	r24, 0x28	; 40
    1110:	11 f0       	breq	.+4      	; 0x1116 <__stack+0x17>
    1112:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1116:	c1 11       	cpse	r28, r1
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <__stack+0x25>
    111a:	81 2f       	mov	r24, r17
    111c:	f4 de       	rcall	.-536    	; 0xf06 <decimal_to_bcd>
    111e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1122:	06 c0       	rjmp	.+12     	; 0x1130 <__stack+0x31>
    1124:	c1 30       	cpi	r28, 0x01	; 1
    1126:	21 f4       	brne	.+8      	; 0x1130 <__stack+0x31>
    1128:	80 2f       	mov	r24, r16
    112a:	ed de       	rcall	.-550    	; 0xf06 <decimal_to_bcd>
    112c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1130:	84 e8       	ldi	r24, 0x84	; 132
    1132:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1136:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    113a:	88 23       	and	r24, r24
    113c:	e4 f7       	brge	.-8      	; 0x1136 <__stack+0x37>
    113e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1142:	88 7f       	andi	r24, 0xF8	; 248
    1144:	88 32       	cpi	r24, 0x28	; 40
    1146:	11 f0       	breq	.+4      	; 0x114c <__stack+0x4d>
    1148:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    114c:	c1 11       	cpse	r28, r1
    114e:	05 c0       	rjmp	.+10     	; 0x115a <__stack+0x5b>
    1150:	8d 2f       	mov	r24, r29
    1152:	d9 de       	rcall	.-590    	; 0xf06 <decimal_to_bcd>
    1154:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1158:	06 c0       	rjmp	.+12     	; 0x1166 <__stack+0x67>
    115a:	c1 30       	cpi	r28, 0x01	; 1
    115c:	21 f4       	brne	.+8      	; 0x1166 <__stack+0x67>
    115e:	8e 2d       	mov	r24, r14
    1160:	d2 de       	rcall	.-604    	; 0xf06 <decimal_to_bcd>
    1162:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1166:	84 e8       	ldi	r24, 0x84	; 132
    1168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    116c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1170:	88 23       	and	r24, r24
    1172:	e4 f7       	brge	.-8      	; 0x116c <__stack+0x6d>
    1174:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1178:	88 7f       	andi	r24, 0xF8	; 248
    117a:	88 32       	cpi	r24, 0x28	; 40
    117c:	11 f0       	breq	.+4      	; 0x1182 <__stack+0x83>
    117e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1182:	c1 30       	cpi	r28, 0x01	; 1
    1184:	99 f4       	brne	.+38     	; 0x11ac <__stack+0xad>
    1186:	96 01       	movw	r18, r12
    1188:	36 95       	lsr	r19
    118a:	27 95       	ror	r18
    118c:	36 95       	lsr	r19
    118e:	27 95       	ror	r18
    1190:	ab e7       	ldi	r26, 0x7B	; 123
    1192:	b4 e1       	ldi	r27, 0x14	; 20
    1194:	19 d3       	rcall	.+1586   	; 0x17c8 <__umulhisi3>
    1196:	96 95       	lsr	r25
    1198:	87 95       	ror	r24
    119a:	3c 2d       	mov	r19, r12
    119c:	24 e6       	ldi	r18, 0x64	; 100
    119e:	82 9f       	mul	r24, r18
    11a0:	30 19       	sub	r19, r0
    11a2:	11 24       	eor	r1, r1
    11a4:	83 2f       	mov	r24, r19
    11a6:	af de       	rcall	.-674    	; 0xf06 <decimal_to_bcd>
    11a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    11ac:	84 e8       	ldi	r24, 0x84	; 132
    11ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    11b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    11b6:	88 23       	and	r24, r24
    11b8:	e4 f7       	brge	.-8      	; 0x11b2 <__stack+0xb3>
    11ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    11be:	88 7f       	andi	r24, 0xF8	; 248
    11c0:	88 32       	cpi	r24, 0x28	; 40
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <__stack+0xc9>
    11c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    11c8:	84 e9       	ldi	r24, 0x94	; 148
    11ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ef 90       	pop	r14
    11d8:	df 90       	pop	r13
    11da:	cf 90       	pop	r12
    11dc:	08 95       	ret

000011de <twi_mr_mode>:
    11de:	8f 92       	push	r8
    11e0:	9f 92       	push	r9
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	4c 01       	movw	r8, r24
    11f8:	5b 01       	movw	r10, r22
    11fa:	6a 01       	movw	r12, r20
    11fc:	e9 01       	movw	r28, r18
    11fe:	84 ea       	ldi	r24, 0xA4	; 164
    1200:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1204:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1208:	88 23       	and	r24, r24
    120a:	e4 f7       	brge	.-8      	; 0x1204 <twi_mr_mode+0x26>
    120c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1210:	88 7f       	andi	r24, 0xF8	; 248
    1212:	88 30       	cpi	r24, 0x08	; 8
    1214:	11 f0       	breq	.+4      	; 0x121a <twi_mr_mode+0x3c>
    1216:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    121a:	80 ed       	ldi	r24, 0xD0	; 208
    121c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1220:	84 e8       	ldi	r24, 0x84	; 132
    1222:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1226:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    122a:	88 23       	and	r24, r24
    122c:	e4 f7       	brge	.-8      	; 0x1226 <twi_mr_mode+0x48>
    122e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1232:	88 7f       	andi	r24, 0xF8	; 248
    1234:	88 31       	cpi	r24, 0x18	; 24
    1236:	11 f0       	breq	.+4      	; 0x123c <twi_mr_mode+0x5e>
    1238:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    123c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1240:	84 e8       	ldi	r24, 0x84	; 132
    1242:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1246:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    124a:	88 23       	and	r24, r24
    124c:	e4 f7       	brge	.-8      	; 0x1246 <twi_mr_mode+0x68>
    124e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1252:	88 7f       	andi	r24, 0xF8	; 248
    1254:	88 32       	cpi	r24, 0x28	; 40
    1256:	11 f0       	breq	.+4      	; 0x125c <twi_mr_mode+0x7e>
    1258:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    125c:	84 ea       	ldi	r24, 0xA4	; 164
    125e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1262:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1266:	88 23       	and	r24, r24
    1268:	e4 f7       	brge	.-8      	; 0x1262 <twi_mr_mode+0x84>
    126a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    126e:	88 7f       	andi	r24, 0xF8	; 248
    1270:	80 31       	cpi	r24, 0x10	; 16
    1272:	11 f0       	breq	.+4      	; 0x1278 <twi_mr_mode+0x9a>
    1274:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1278:	81 ed       	ldi	r24, 0xD1	; 209
    127a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    127e:	84 e8       	ldi	r24, 0x84	; 132
    1280:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1284:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1288:	88 23       	and	r24, r24
    128a:	e4 f7       	brge	.-8      	; 0x1284 <twi_mr_mode+0xa6>
    128c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1290:	88 7f       	andi	r24, 0xF8	; 248
    1292:	80 34       	cpi	r24, 0x40	; 64
    1294:	11 f0       	breq	.+4      	; 0x129a <twi_mr_mode+0xbc>
    1296:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    129a:	84 ec       	ldi	r24, 0xC4	; 196
    129c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    12a0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    12a4:	88 23       	and	r24, r24
    12a6:	e4 f7       	brge	.-8      	; 0x12a0 <twi_mr_mode+0xc2>
    12a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    12ac:	88 7f       	andi	r24, 0xF8	; 248
    12ae:	80 35       	cpi	r24, 0x50	; 80
    12b0:	11 f0       	breq	.+4      	; 0x12b6 <twi_mr_mode+0xd8>
    12b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    12b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    12ba:	8f 77       	andi	r24, 0x7F	; 127
    12bc:	41 de       	rcall	.-894    	; 0xf40 <bcd_to_decimal>
    12be:	f4 01       	movw	r30, r8
    12c0:	80 83       	st	Z, r24
    12c2:	84 ec       	ldi	r24, 0xC4	; 196
    12c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    12c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    12cc:	88 23       	and	r24, r24
    12ce:	e4 f7       	brge	.-8      	; 0x12c8 <twi_mr_mode+0xea>
    12d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    12d4:	88 7f       	andi	r24, 0xF8	; 248
    12d6:	80 35       	cpi	r24, 0x50	; 80
    12d8:	11 f0       	breq	.+4      	; 0x12de <twi_mr_mode+0x100>
    12da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    12de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    12e2:	2e de       	rcall	.-932    	; 0xf40 <bcd_to_decimal>
    12e4:	f5 01       	movw	r30, r10
    12e6:	80 83       	st	Z, r24
    12e8:	84 ec       	ldi	r24, 0xC4	; 196
    12ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    12ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    12f2:	88 23       	and	r24, r24
    12f4:	e4 f7       	brge	.-8      	; 0x12ee <twi_mr_mode+0x110>
    12f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    12fa:	88 7f       	andi	r24, 0xF8	; 248
    12fc:	80 35       	cpi	r24, 0x50	; 80
    12fe:	11 f0       	breq	.+4      	; 0x1304 <twi_mr_mode+0x126>
    1300:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1304:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1308:	1b de       	rcall	.-970    	; 0xf40 <bcd_to_decimal>
    130a:	f6 01       	movw	r30, r12
    130c:	80 83       	st	Z, r24
    130e:	84 ec       	ldi	r24, 0xC4	; 196
    1310:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1314:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1318:	88 23       	and	r24, r24
    131a:	e4 f7       	brge	.-8      	; 0x1314 <twi_mr_mode+0x136>
    131c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1320:	88 7f       	andi	r24, 0xF8	; 248
    1322:	80 35       	cpi	r24, 0x50	; 80
    1324:	11 f0       	breq	.+4      	; 0x132a <twi_mr_mode+0x14c>
    1326:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    132a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    132e:	84 ec       	ldi	r24, 0xC4	; 196
    1330:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1334:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1338:	88 23       	and	r24, r24
    133a:	e4 f7       	brge	.-8      	; 0x1334 <twi_mr_mode+0x156>
    133c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1340:	88 7f       	andi	r24, 0xF8	; 248
    1342:	80 35       	cpi	r24, 0x50	; 80
    1344:	11 f0       	breq	.+4      	; 0x134a <twi_mr_mode+0x16c>
    1346:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    134a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    134e:	f8 dd       	rcall	.-1040   	; 0xf40 <bcd_to_decimal>
    1350:	88 83       	st	Y, r24
    1352:	84 ec       	ldi	r24, 0xC4	; 196
    1354:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1358:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    135c:	88 23       	and	r24, r24
    135e:	e4 f7       	brge	.-8      	; 0x1358 <twi_mr_mode+0x17a>
    1360:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1364:	88 7f       	andi	r24, 0xF8	; 248
    1366:	80 35       	cpi	r24, 0x50	; 80
    1368:	11 f0       	breq	.+4      	; 0x136e <twi_mr_mode+0x190>
    136a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    136e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1372:	e6 dd       	rcall	.-1076   	; 0xf40 <bcd_to_decimal>
    1374:	f8 01       	movw	r30, r16
    1376:	80 83       	st	Z, r24
    1378:	84 e8       	ldi	r24, 0x84	; 132
    137a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    137e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1382:	88 23       	and	r24, r24
    1384:	e4 f7       	brge	.-8      	; 0x137e <twi_mr_mode+0x1a0>
    1386:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    138a:	88 7f       	andi	r24, 0xF8	; 248
    138c:	88 35       	cpi	r24, 0x58	; 88
    138e:	11 f0       	breq	.+4      	; 0x1394 <twi_mr_mode+0x1b6>
    1390:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1394:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1398:	d3 dd       	rcall	.-1114   	; 0xf40 <bcd_to_decimal>
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	80 53       	subi	r24, 0x30	; 48
    139e:	98 4f       	sbci	r25, 0xF8	; 248
    13a0:	f7 01       	movw	r30, r14
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	80 83       	st	Z, r24
    13a6:	84 e9       	ldi	r24, 0x94	; 148
    13a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	ff 90       	pop	r15
    13b6:	ef 90       	pop	r14
    13b8:	df 90       	pop	r13
    13ba:	cf 90       	pop	r12
    13bc:	bf 90       	pop	r11
    13be:	af 90       	pop	r10
    13c0:	9f 90       	pop	r9
    13c2:	8f 90       	pop	r8
    13c4:	08 95       	ret

000013c6 <uart0_init>:
    13c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    13ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    13ce:	8e e0       	ldi	r24, 0x0E	; 14
    13d0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    13d4:	88 e9       	ldi	r24, 0x98	; 152
    13d6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    13da:	08 95       	ret

000013dc <__subsf3>:
    13dc:	50 58       	subi	r21, 0x80	; 128

000013de <__addsf3>:
    13de:	bb 27       	eor	r27, r27
    13e0:	aa 27       	eor	r26, r26
    13e2:	0e d0       	rcall	.+28     	; 0x1400 <__addsf3x>
    13e4:	21 c1       	rjmp	.+578    	; 0x1628 <__fp_round>
    13e6:	12 d1       	rcall	.+548    	; 0x160c <__fp_pscA>
    13e8:	30 f0       	brcs	.+12     	; 0x13f6 <__addsf3+0x18>
    13ea:	17 d1       	rcall	.+558    	; 0x161a <__fp_pscB>
    13ec:	20 f0       	brcs	.+8      	; 0x13f6 <__addsf3+0x18>
    13ee:	31 f4       	brne	.+12     	; 0x13fc <__addsf3+0x1e>
    13f0:	9f 3f       	cpi	r25, 0xFF	; 255
    13f2:	11 f4       	brne	.+4      	; 0x13f8 <__addsf3+0x1a>
    13f4:	1e f4       	brtc	.+6      	; 0x13fc <__addsf3+0x1e>
    13f6:	07 c1       	rjmp	.+526    	; 0x1606 <__fp_nan>
    13f8:	0e f4       	brtc	.+2      	; 0x13fc <__addsf3+0x1e>
    13fa:	e0 95       	com	r30
    13fc:	e7 fb       	bst	r30, 7
    13fe:	d4 c0       	rjmp	.+424    	; 0x15a8 <__fp_inf>

00001400 <__addsf3x>:
    1400:	e9 2f       	mov	r30, r25
    1402:	23 d1       	rcall	.+582    	; 0x164a <__fp_split3>
    1404:	80 f3       	brcs	.-32     	; 0x13e6 <__addsf3+0x8>
    1406:	ba 17       	cp	r27, r26
    1408:	62 07       	cpc	r22, r18
    140a:	73 07       	cpc	r23, r19
    140c:	84 07       	cpc	r24, r20
    140e:	95 07       	cpc	r25, r21
    1410:	18 f0       	brcs	.+6      	; 0x1418 <__addsf3x+0x18>
    1412:	71 f4       	brne	.+28     	; 0x1430 <__addsf3x+0x30>
    1414:	9e f5       	brtc	.+102    	; 0x147c <__addsf3x+0x7c>
    1416:	52 c1       	rjmp	.+676    	; 0x16bc <__fp_zero>
    1418:	0e f4       	brtc	.+2      	; 0x141c <__addsf3x+0x1c>
    141a:	e0 95       	com	r30
    141c:	0b 2e       	mov	r0, r27
    141e:	ba 2f       	mov	r27, r26
    1420:	a0 2d       	mov	r26, r0
    1422:	0b 01       	movw	r0, r22
    1424:	b9 01       	movw	r22, r18
    1426:	90 01       	movw	r18, r0
    1428:	0c 01       	movw	r0, r24
    142a:	ca 01       	movw	r24, r20
    142c:	a0 01       	movw	r20, r0
    142e:	11 24       	eor	r1, r1
    1430:	ff 27       	eor	r31, r31
    1432:	59 1b       	sub	r21, r25
    1434:	99 f0       	breq	.+38     	; 0x145c <__addsf3x+0x5c>
    1436:	59 3f       	cpi	r21, 0xF9	; 249
    1438:	50 f4       	brcc	.+20     	; 0x144e <__addsf3x+0x4e>
    143a:	50 3e       	cpi	r21, 0xE0	; 224
    143c:	68 f1       	brcs	.+90     	; 0x1498 <__addsf3x+0x98>
    143e:	1a 16       	cp	r1, r26
    1440:	f0 40       	sbci	r31, 0x00	; 0
    1442:	a2 2f       	mov	r26, r18
    1444:	23 2f       	mov	r18, r19
    1446:	34 2f       	mov	r19, r20
    1448:	44 27       	eor	r20, r20
    144a:	58 5f       	subi	r21, 0xF8	; 248
    144c:	f3 cf       	rjmp	.-26     	; 0x1434 <__addsf3x+0x34>
    144e:	46 95       	lsr	r20
    1450:	37 95       	ror	r19
    1452:	27 95       	ror	r18
    1454:	a7 95       	ror	r26
    1456:	f0 40       	sbci	r31, 0x00	; 0
    1458:	53 95       	inc	r21
    145a:	c9 f7       	brne	.-14     	; 0x144e <__addsf3x+0x4e>
    145c:	7e f4       	brtc	.+30     	; 0x147c <__addsf3x+0x7c>
    145e:	1f 16       	cp	r1, r31
    1460:	ba 0b       	sbc	r27, r26
    1462:	62 0b       	sbc	r22, r18
    1464:	73 0b       	sbc	r23, r19
    1466:	84 0b       	sbc	r24, r20
    1468:	ba f0       	brmi	.+46     	; 0x1498 <__addsf3x+0x98>
    146a:	91 50       	subi	r25, 0x01	; 1
    146c:	a1 f0       	breq	.+40     	; 0x1496 <__addsf3x+0x96>
    146e:	ff 0f       	add	r31, r31
    1470:	bb 1f       	adc	r27, r27
    1472:	66 1f       	adc	r22, r22
    1474:	77 1f       	adc	r23, r23
    1476:	88 1f       	adc	r24, r24
    1478:	c2 f7       	brpl	.-16     	; 0x146a <__addsf3x+0x6a>
    147a:	0e c0       	rjmp	.+28     	; 0x1498 <__addsf3x+0x98>
    147c:	ba 0f       	add	r27, r26
    147e:	62 1f       	adc	r22, r18
    1480:	73 1f       	adc	r23, r19
    1482:	84 1f       	adc	r24, r20
    1484:	48 f4       	brcc	.+18     	; 0x1498 <__addsf3x+0x98>
    1486:	87 95       	ror	r24
    1488:	77 95       	ror	r23
    148a:	67 95       	ror	r22
    148c:	b7 95       	ror	r27
    148e:	f7 95       	ror	r31
    1490:	9e 3f       	cpi	r25, 0xFE	; 254
    1492:	08 f0       	brcs	.+2      	; 0x1496 <__addsf3x+0x96>
    1494:	b3 cf       	rjmp	.-154    	; 0x13fc <__addsf3+0x1e>
    1496:	93 95       	inc	r25
    1498:	88 0f       	add	r24, r24
    149a:	08 f0       	brcs	.+2      	; 0x149e <__addsf3x+0x9e>
    149c:	99 27       	eor	r25, r25
    149e:	ee 0f       	add	r30, r30
    14a0:	97 95       	ror	r25
    14a2:	87 95       	ror	r24
    14a4:	08 95       	ret

000014a6 <__fixsfsi>:
    14a6:	04 d0       	rcall	.+8      	; 0x14b0 <__fixunssfsi>
    14a8:	68 94       	set
    14aa:	b1 11       	cpse	r27, r1
    14ac:	08 c1       	rjmp	.+528    	; 0x16be <__fp_szero>
    14ae:	08 95       	ret

000014b0 <__fixunssfsi>:
    14b0:	d4 d0       	rcall	.+424    	; 0x165a <__fp_splitA>
    14b2:	88 f0       	brcs	.+34     	; 0x14d6 <__fixunssfsi+0x26>
    14b4:	9f 57       	subi	r25, 0x7F	; 127
    14b6:	90 f0       	brcs	.+36     	; 0x14dc <__fixunssfsi+0x2c>
    14b8:	b9 2f       	mov	r27, r25
    14ba:	99 27       	eor	r25, r25
    14bc:	b7 51       	subi	r27, 0x17	; 23
    14be:	a0 f0       	brcs	.+40     	; 0x14e8 <__fixunssfsi+0x38>
    14c0:	d1 f0       	breq	.+52     	; 0x14f6 <__fixunssfsi+0x46>
    14c2:	66 0f       	add	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	88 1f       	adc	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	1a f0       	brmi	.+6      	; 0x14d2 <__fixunssfsi+0x22>
    14cc:	ba 95       	dec	r27
    14ce:	c9 f7       	brne	.-14     	; 0x14c2 <__fixunssfsi+0x12>
    14d0:	12 c0       	rjmp	.+36     	; 0x14f6 <__fixunssfsi+0x46>
    14d2:	b1 30       	cpi	r27, 0x01	; 1
    14d4:	81 f0       	breq	.+32     	; 0x14f6 <__fixunssfsi+0x46>
    14d6:	f2 d0       	rcall	.+484    	; 0x16bc <__fp_zero>
    14d8:	b1 e0       	ldi	r27, 0x01	; 1
    14da:	08 95       	ret
    14dc:	ef c0       	rjmp	.+478    	; 0x16bc <__fp_zero>
    14de:	67 2f       	mov	r22, r23
    14e0:	78 2f       	mov	r23, r24
    14e2:	88 27       	eor	r24, r24
    14e4:	b8 5f       	subi	r27, 0xF8	; 248
    14e6:	39 f0       	breq	.+14     	; 0x14f6 <__fixunssfsi+0x46>
    14e8:	b9 3f       	cpi	r27, 0xF9	; 249
    14ea:	cc f3       	brlt	.-14     	; 0x14de <__fixunssfsi+0x2e>
    14ec:	86 95       	lsr	r24
    14ee:	77 95       	ror	r23
    14f0:	67 95       	ror	r22
    14f2:	b3 95       	inc	r27
    14f4:	d9 f7       	brne	.-10     	; 0x14ec <__fixunssfsi+0x3c>
    14f6:	3e f4       	brtc	.+14     	; 0x1506 <__fixunssfsi+0x56>
    14f8:	90 95       	com	r25
    14fa:	80 95       	com	r24
    14fc:	70 95       	com	r23
    14fe:	61 95       	neg	r22
    1500:	7f 4f       	sbci	r23, 0xFF	; 255
    1502:	8f 4f       	sbci	r24, 0xFF	; 255
    1504:	9f 4f       	sbci	r25, 0xFF	; 255
    1506:	08 95       	ret

00001508 <__floatunsisf>:
    1508:	e8 94       	clt
    150a:	09 c0       	rjmp	.+18     	; 0x151e <__floatsisf+0x12>

0000150c <__floatsisf>:
    150c:	97 fb       	bst	r25, 7
    150e:	3e f4       	brtc	.+14     	; 0x151e <__floatsisf+0x12>
    1510:	90 95       	com	r25
    1512:	80 95       	com	r24
    1514:	70 95       	com	r23
    1516:	61 95       	neg	r22
    1518:	7f 4f       	sbci	r23, 0xFF	; 255
    151a:	8f 4f       	sbci	r24, 0xFF	; 255
    151c:	9f 4f       	sbci	r25, 0xFF	; 255
    151e:	99 23       	and	r25, r25
    1520:	a9 f0       	breq	.+42     	; 0x154c <__floatsisf+0x40>
    1522:	f9 2f       	mov	r31, r25
    1524:	96 e9       	ldi	r25, 0x96	; 150
    1526:	bb 27       	eor	r27, r27
    1528:	93 95       	inc	r25
    152a:	f6 95       	lsr	r31
    152c:	87 95       	ror	r24
    152e:	77 95       	ror	r23
    1530:	67 95       	ror	r22
    1532:	b7 95       	ror	r27
    1534:	f1 11       	cpse	r31, r1
    1536:	f8 cf       	rjmp	.-16     	; 0x1528 <__floatsisf+0x1c>
    1538:	fa f4       	brpl	.+62     	; 0x1578 <__floatsisf+0x6c>
    153a:	bb 0f       	add	r27, r27
    153c:	11 f4       	brne	.+4      	; 0x1542 <__floatsisf+0x36>
    153e:	60 ff       	sbrs	r22, 0
    1540:	1b c0       	rjmp	.+54     	; 0x1578 <__floatsisf+0x6c>
    1542:	6f 5f       	subi	r22, 0xFF	; 255
    1544:	7f 4f       	sbci	r23, 0xFF	; 255
    1546:	8f 4f       	sbci	r24, 0xFF	; 255
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	16 c0       	rjmp	.+44     	; 0x1578 <__floatsisf+0x6c>
    154c:	88 23       	and	r24, r24
    154e:	11 f0       	breq	.+4      	; 0x1554 <__floatsisf+0x48>
    1550:	96 e9       	ldi	r25, 0x96	; 150
    1552:	11 c0       	rjmp	.+34     	; 0x1576 <__floatsisf+0x6a>
    1554:	77 23       	and	r23, r23
    1556:	21 f0       	breq	.+8      	; 0x1560 <__floatsisf+0x54>
    1558:	9e e8       	ldi	r25, 0x8E	; 142
    155a:	87 2f       	mov	r24, r23
    155c:	76 2f       	mov	r23, r22
    155e:	05 c0       	rjmp	.+10     	; 0x156a <__floatsisf+0x5e>
    1560:	66 23       	and	r22, r22
    1562:	71 f0       	breq	.+28     	; 0x1580 <__floatsisf+0x74>
    1564:	96 e8       	ldi	r25, 0x86	; 134
    1566:	86 2f       	mov	r24, r22
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	2a f0       	brmi	.+10     	; 0x1578 <__floatsisf+0x6c>
    156e:	9a 95       	dec	r25
    1570:	66 0f       	add	r22, r22
    1572:	77 1f       	adc	r23, r23
    1574:	88 1f       	adc	r24, r24
    1576:	da f7       	brpl	.-10     	; 0x156e <__floatsisf+0x62>
    1578:	88 0f       	add	r24, r24
    157a:	96 95       	lsr	r25
    157c:	87 95       	ror	r24
    157e:	97 f9       	bld	r25, 7
    1580:	08 95       	ret

00001582 <floor>:
    1582:	85 d0       	rcall	.+266    	; 0x168e <__fp_trunc>
    1584:	80 f0       	brcs	.+32     	; 0x15a6 <floor+0x24>
    1586:	9f 37       	cpi	r25, 0x7F	; 127
    1588:	40 f4       	brcc	.+16     	; 0x159a <floor+0x18>
    158a:	91 11       	cpse	r25, r1
    158c:	0e f0       	brts	.+2      	; 0x1590 <floor+0xe>
    158e:	97 c0       	rjmp	.+302    	; 0x16be <__fp_szero>
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	80 e8       	ldi	r24, 0x80	; 128
    1596:	9f eb       	ldi	r25, 0xBF	; 191
    1598:	08 95       	ret
    159a:	26 f4       	brtc	.+8      	; 0x15a4 <floor+0x22>
    159c:	1b 16       	cp	r1, r27
    159e:	61 1d       	adc	r22, r1
    15a0:	71 1d       	adc	r23, r1
    15a2:	81 1d       	adc	r24, r1
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <__fp_mintl>
    15a6:	21 c0       	rjmp	.+66     	; 0x15ea <__fp_mpack>

000015a8 <__fp_inf>:
    15a8:	97 f9       	bld	r25, 7
    15aa:	9f 67       	ori	r25, 0x7F	; 127
    15ac:	80 e8       	ldi	r24, 0x80	; 128
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	08 95       	ret

000015b4 <__fp_mintl>:
    15b4:	88 23       	and	r24, r24
    15b6:	71 f4       	brne	.+28     	; 0x15d4 <__fp_mintl+0x20>
    15b8:	77 23       	and	r23, r23
    15ba:	21 f0       	breq	.+8      	; 0x15c4 <__fp_mintl+0x10>
    15bc:	98 50       	subi	r25, 0x08	; 8
    15be:	87 2b       	or	r24, r23
    15c0:	76 2f       	mov	r23, r22
    15c2:	07 c0       	rjmp	.+14     	; 0x15d2 <__fp_mintl+0x1e>
    15c4:	66 23       	and	r22, r22
    15c6:	11 f4       	brne	.+4      	; 0x15cc <__fp_mintl+0x18>
    15c8:	99 27       	eor	r25, r25
    15ca:	0d c0       	rjmp	.+26     	; 0x15e6 <__fp_mintl+0x32>
    15cc:	90 51       	subi	r25, 0x10	; 16
    15ce:	86 2b       	or	r24, r22
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	2a f0       	brmi	.+10     	; 0x15e0 <__fp_mintl+0x2c>
    15d6:	9a 95       	dec	r25
    15d8:	66 0f       	add	r22, r22
    15da:	77 1f       	adc	r23, r23
    15dc:	88 1f       	adc	r24, r24
    15de:	da f7       	brpl	.-10     	; 0x15d6 <__fp_mintl+0x22>
    15e0:	88 0f       	add	r24, r24
    15e2:	96 95       	lsr	r25
    15e4:	87 95       	ror	r24
    15e6:	97 f9       	bld	r25, 7
    15e8:	08 95       	ret

000015ea <__fp_mpack>:
    15ea:	9f 3f       	cpi	r25, 0xFF	; 255
    15ec:	31 f0       	breq	.+12     	; 0x15fa <__fp_mpack_finite+0xc>

000015ee <__fp_mpack_finite>:
    15ee:	91 50       	subi	r25, 0x01	; 1
    15f0:	20 f4       	brcc	.+8      	; 0x15fa <__fp_mpack_finite+0xc>
    15f2:	87 95       	ror	r24
    15f4:	77 95       	ror	r23
    15f6:	67 95       	ror	r22
    15f8:	b7 95       	ror	r27
    15fa:	88 0f       	add	r24, r24
    15fc:	91 1d       	adc	r25, r1
    15fe:	96 95       	lsr	r25
    1600:	87 95       	ror	r24
    1602:	97 f9       	bld	r25, 7
    1604:	08 95       	ret

00001606 <__fp_nan>:
    1606:	9f ef       	ldi	r25, 0xFF	; 255
    1608:	80 ec       	ldi	r24, 0xC0	; 192
    160a:	08 95       	ret

0000160c <__fp_pscA>:
    160c:	00 24       	eor	r0, r0
    160e:	0a 94       	dec	r0
    1610:	16 16       	cp	r1, r22
    1612:	17 06       	cpc	r1, r23
    1614:	18 06       	cpc	r1, r24
    1616:	09 06       	cpc	r0, r25
    1618:	08 95       	ret

0000161a <__fp_pscB>:
    161a:	00 24       	eor	r0, r0
    161c:	0a 94       	dec	r0
    161e:	12 16       	cp	r1, r18
    1620:	13 06       	cpc	r1, r19
    1622:	14 06       	cpc	r1, r20
    1624:	05 06       	cpc	r0, r21
    1626:	08 95       	ret

00001628 <__fp_round>:
    1628:	09 2e       	mov	r0, r25
    162a:	03 94       	inc	r0
    162c:	00 0c       	add	r0, r0
    162e:	11 f4       	brne	.+4      	; 0x1634 <__fp_round+0xc>
    1630:	88 23       	and	r24, r24
    1632:	52 f0       	brmi	.+20     	; 0x1648 <__fp_round+0x20>
    1634:	bb 0f       	add	r27, r27
    1636:	40 f4       	brcc	.+16     	; 0x1648 <__fp_round+0x20>
    1638:	bf 2b       	or	r27, r31
    163a:	11 f4       	brne	.+4      	; 0x1640 <__fp_round+0x18>
    163c:	60 ff       	sbrs	r22, 0
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <__fp_round+0x20>
    1640:	6f 5f       	subi	r22, 0xFF	; 255
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	8f 4f       	sbci	r24, 0xFF	; 255
    1646:	9f 4f       	sbci	r25, 0xFF	; 255
    1648:	08 95       	ret

0000164a <__fp_split3>:
    164a:	57 fd       	sbrc	r21, 7
    164c:	90 58       	subi	r25, 0x80	; 128
    164e:	44 0f       	add	r20, r20
    1650:	55 1f       	adc	r21, r21
    1652:	59 f0       	breq	.+22     	; 0x166a <__fp_splitA+0x10>
    1654:	5f 3f       	cpi	r21, 0xFF	; 255
    1656:	71 f0       	breq	.+28     	; 0x1674 <__fp_splitA+0x1a>
    1658:	47 95       	ror	r20

0000165a <__fp_splitA>:
    165a:	88 0f       	add	r24, r24
    165c:	97 fb       	bst	r25, 7
    165e:	99 1f       	adc	r25, r25
    1660:	61 f0       	breq	.+24     	; 0x167a <__fp_splitA+0x20>
    1662:	9f 3f       	cpi	r25, 0xFF	; 255
    1664:	79 f0       	breq	.+30     	; 0x1684 <__fp_splitA+0x2a>
    1666:	87 95       	ror	r24
    1668:	08 95       	ret
    166a:	12 16       	cp	r1, r18
    166c:	13 06       	cpc	r1, r19
    166e:	14 06       	cpc	r1, r20
    1670:	55 1f       	adc	r21, r21
    1672:	f2 cf       	rjmp	.-28     	; 0x1658 <__fp_split3+0xe>
    1674:	46 95       	lsr	r20
    1676:	f1 df       	rcall	.-30     	; 0x165a <__fp_splitA>
    1678:	08 c0       	rjmp	.+16     	; 0x168a <__fp_splitA+0x30>
    167a:	16 16       	cp	r1, r22
    167c:	17 06       	cpc	r1, r23
    167e:	18 06       	cpc	r1, r24
    1680:	99 1f       	adc	r25, r25
    1682:	f1 cf       	rjmp	.-30     	; 0x1666 <__fp_splitA+0xc>
    1684:	86 95       	lsr	r24
    1686:	71 05       	cpc	r23, r1
    1688:	61 05       	cpc	r22, r1
    168a:	08 94       	sec
    168c:	08 95       	ret

0000168e <__fp_trunc>:
    168e:	e5 df       	rcall	.-54     	; 0x165a <__fp_splitA>
    1690:	a0 f0       	brcs	.+40     	; 0x16ba <__fp_trunc+0x2c>
    1692:	be e7       	ldi	r27, 0x7E	; 126
    1694:	b9 17       	cp	r27, r25
    1696:	88 f4       	brcc	.+34     	; 0x16ba <__fp_trunc+0x2c>
    1698:	bb 27       	eor	r27, r27
    169a:	9f 38       	cpi	r25, 0x8F	; 143
    169c:	60 f4       	brcc	.+24     	; 0x16b6 <__fp_trunc+0x28>
    169e:	16 16       	cp	r1, r22
    16a0:	b1 1d       	adc	r27, r1
    16a2:	67 2f       	mov	r22, r23
    16a4:	78 2f       	mov	r23, r24
    16a6:	88 27       	eor	r24, r24
    16a8:	98 5f       	subi	r25, 0xF8	; 248
    16aa:	f7 cf       	rjmp	.-18     	; 0x169a <__fp_trunc+0xc>
    16ac:	86 95       	lsr	r24
    16ae:	77 95       	ror	r23
    16b0:	67 95       	ror	r22
    16b2:	b1 1d       	adc	r27, r1
    16b4:	93 95       	inc	r25
    16b6:	96 39       	cpi	r25, 0x96	; 150
    16b8:	c8 f3       	brcs	.-14     	; 0x16ac <__fp_trunc+0x1e>
    16ba:	08 95       	ret

000016bc <__fp_zero>:
    16bc:	e8 94       	clt

000016be <__fp_szero>:
    16be:	bb 27       	eor	r27, r27
    16c0:	66 27       	eor	r22, r22
    16c2:	77 27       	eor	r23, r23
    16c4:	cb 01       	movw	r24, r22
    16c6:	97 f9       	bld	r25, 7
    16c8:	08 95       	ret

000016ca <__mulsf3>:
    16ca:	0b d0       	rcall	.+22     	; 0x16e2 <__mulsf3x>
    16cc:	ad cf       	rjmp	.-166    	; 0x1628 <__fp_round>
    16ce:	9e df       	rcall	.-196    	; 0x160c <__fp_pscA>
    16d0:	28 f0       	brcs	.+10     	; 0x16dc <__mulsf3+0x12>
    16d2:	a3 df       	rcall	.-186    	; 0x161a <__fp_pscB>
    16d4:	18 f0       	brcs	.+6      	; 0x16dc <__mulsf3+0x12>
    16d6:	95 23       	and	r25, r21
    16d8:	09 f0       	breq	.+2      	; 0x16dc <__mulsf3+0x12>
    16da:	66 cf       	rjmp	.-308    	; 0x15a8 <__fp_inf>
    16dc:	94 cf       	rjmp	.-216    	; 0x1606 <__fp_nan>
    16de:	11 24       	eor	r1, r1
    16e0:	ee cf       	rjmp	.-36     	; 0x16be <__fp_szero>

000016e2 <__mulsf3x>:
    16e2:	b3 df       	rcall	.-154    	; 0x164a <__fp_split3>
    16e4:	a0 f3       	brcs	.-24     	; 0x16ce <__mulsf3+0x4>

000016e6 <__mulsf3_pse>:
    16e6:	95 9f       	mul	r25, r21
    16e8:	d1 f3       	breq	.-12     	; 0x16de <__mulsf3+0x14>
    16ea:	95 0f       	add	r25, r21
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	55 1f       	adc	r21, r21
    16f0:	62 9f       	mul	r22, r18
    16f2:	f0 01       	movw	r30, r0
    16f4:	72 9f       	mul	r23, r18
    16f6:	bb 27       	eor	r27, r27
    16f8:	f0 0d       	add	r31, r0
    16fa:	b1 1d       	adc	r27, r1
    16fc:	63 9f       	mul	r22, r19
    16fe:	aa 27       	eor	r26, r26
    1700:	f0 0d       	add	r31, r0
    1702:	b1 1d       	adc	r27, r1
    1704:	aa 1f       	adc	r26, r26
    1706:	64 9f       	mul	r22, r20
    1708:	66 27       	eor	r22, r22
    170a:	b0 0d       	add	r27, r0
    170c:	a1 1d       	adc	r26, r1
    170e:	66 1f       	adc	r22, r22
    1710:	82 9f       	mul	r24, r18
    1712:	22 27       	eor	r18, r18
    1714:	b0 0d       	add	r27, r0
    1716:	a1 1d       	adc	r26, r1
    1718:	62 1f       	adc	r22, r18
    171a:	73 9f       	mul	r23, r19
    171c:	b0 0d       	add	r27, r0
    171e:	a1 1d       	adc	r26, r1
    1720:	62 1f       	adc	r22, r18
    1722:	83 9f       	mul	r24, r19
    1724:	a0 0d       	add	r26, r0
    1726:	61 1d       	adc	r22, r1
    1728:	22 1f       	adc	r18, r18
    172a:	74 9f       	mul	r23, r20
    172c:	33 27       	eor	r19, r19
    172e:	a0 0d       	add	r26, r0
    1730:	61 1d       	adc	r22, r1
    1732:	23 1f       	adc	r18, r19
    1734:	84 9f       	mul	r24, r20
    1736:	60 0d       	add	r22, r0
    1738:	21 1d       	adc	r18, r1
    173a:	82 2f       	mov	r24, r18
    173c:	76 2f       	mov	r23, r22
    173e:	6a 2f       	mov	r22, r26
    1740:	11 24       	eor	r1, r1
    1742:	9f 57       	subi	r25, 0x7F	; 127
    1744:	50 40       	sbci	r21, 0x00	; 0
    1746:	8a f0       	brmi	.+34     	; 0x176a <__mulsf3_pse+0x84>
    1748:	e1 f0       	breq	.+56     	; 0x1782 <__mulsf3_pse+0x9c>
    174a:	88 23       	and	r24, r24
    174c:	4a f0       	brmi	.+18     	; 0x1760 <__mulsf3_pse+0x7a>
    174e:	ee 0f       	add	r30, r30
    1750:	ff 1f       	adc	r31, r31
    1752:	bb 1f       	adc	r27, r27
    1754:	66 1f       	adc	r22, r22
    1756:	77 1f       	adc	r23, r23
    1758:	88 1f       	adc	r24, r24
    175a:	91 50       	subi	r25, 0x01	; 1
    175c:	50 40       	sbci	r21, 0x00	; 0
    175e:	a9 f7       	brne	.-22     	; 0x174a <__mulsf3_pse+0x64>
    1760:	9e 3f       	cpi	r25, 0xFE	; 254
    1762:	51 05       	cpc	r21, r1
    1764:	70 f0       	brcs	.+28     	; 0x1782 <__mulsf3_pse+0x9c>
    1766:	20 cf       	rjmp	.-448    	; 0x15a8 <__fp_inf>
    1768:	aa cf       	rjmp	.-172    	; 0x16be <__fp_szero>
    176a:	5f 3f       	cpi	r21, 0xFF	; 255
    176c:	ec f3       	brlt	.-6      	; 0x1768 <__mulsf3_pse+0x82>
    176e:	98 3e       	cpi	r25, 0xE8	; 232
    1770:	dc f3       	brlt	.-10     	; 0x1768 <__mulsf3_pse+0x82>
    1772:	86 95       	lsr	r24
    1774:	77 95       	ror	r23
    1776:	67 95       	ror	r22
    1778:	b7 95       	ror	r27
    177a:	f7 95       	ror	r31
    177c:	e7 95       	ror	r30
    177e:	9f 5f       	subi	r25, 0xFF	; 255
    1780:	c1 f7       	brne	.-16     	; 0x1772 <__mulsf3_pse+0x8c>
    1782:	fe 2b       	or	r31, r30
    1784:	88 0f       	add	r24, r24
    1786:	91 1d       	adc	r25, r1
    1788:	96 95       	lsr	r25
    178a:	87 95       	ror	r24
    178c:	97 f9       	bld	r25, 7
    178e:	08 95       	ret

00001790 <__divmodhi4>:
    1790:	97 fb       	bst	r25, 7
    1792:	07 2e       	mov	r0, r23
    1794:	16 f4       	brtc	.+4      	; 0x179a <__divmodhi4+0xa>
    1796:	00 94       	com	r0
    1798:	06 d0       	rcall	.+12     	; 0x17a6 <__divmodhi4_neg1>
    179a:	77 fd       	sbrc	r23, 7
    179c:	08 d0       	rcall	.+16     	; 0x17ae <__divmodhi4_neg2>
    179e:	23 d0       	rcall	.+70     	; 0x17e6 <__udivmodhi4>
    17a0:	07 fc       	sbrc	r0, 7
    17a2:	05 d0       	rcall	.+10     	; 0x17ae <__divmodhi4_neg2>
    17a4:	3e f4       	brtc	.+14     	; 0x17b4 <__divmodhi4_exit>

000017a6 <__divmodhi4_neg1>:
    17a6:	90 95       	com	r25
    17a8:	81 95       	neg	r24
    17aa:	9f 4f       	sbci	r25, 0xFF	; 255
    17ac:	08 95       	ret

000017ae <__divmodhi4_neg2>:
    17ae:	70 95       	com	r23
    17b0:	61 95       	neg	r22
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255

000017b4 <__divmodhi4_exit>:
    17b4:	08 95       	ret

000017b6 <__tablejump2__>:
    17b6:	ee 0f       	add	r30, r30
    17b8:	ff 1f       	adc	r31, r31
    17ba:	00 24       	eor	r0, r0
    17bc:	00 1c       	adc	r0, r0
    17be:	0b be       	out	0x3b, r0	; 59
    17c0:	07 90       	elpm	r0, Z+
    17c2:	f6 91       	elpm	r31, Z
    17c4:	e0 2d       	mov	r30, r0
    17c6:	09 94       	ijmp

000017c8 <__umulhisi3>:
    17c8:	a2 9f       	mul	r26, r18
    17ca:	b0 01       	movw	r22, r0
    17cc:	b3 9f       	mul	r27, r19
    17ce:	c0 01       	movw	r24, r0
    17d0:	a3 9f       	mul	r26, r19
    17d2:	70 0d       	add	r23, r0
    17d4:	81 1d       	adc	r24, r1
    17d6:	11 24       	eor	r1, r1
    17d8:	91 1d       	adc	r25, r1
    17da:	b2 9f       	mul	r27, r18
    17dc:	70 0d       	add	r23, r0
    17de:	81 1d       	adc	r24, r1
    17e0:	11 24       	eor	r1, r1
    17e2:	91 1d       	adc	r25, r1
    17e4:	08 95       	ret

000017e6 <__udivmodhi4>:
    17e6:	aa 1b       	sub	r26, r26
    17e8:	bb 1b       	sub	r27, r27
    17ea:	51 e1       	ldi	r21, 0x11	; 17
    17ec:	07 c0       	rjmp	.+14     	; 0x17fc <__udivmodhi4_ep>

000017ee <__udivmodhi4_loop>:
    17ee:	aa 1f       	adc	r26, r26
    17f0:	bb 1f       	adc	r27, r27
    17f2:	a6 17       	cp	r26, r22
    17f4:	b7 07       	cpc	r27, r23
    17f6:	10 f0       	brcs	.+4      	; 0x17fc <__udivmodhi4_ep>
    17f8:	a6 1b       	sub	r26, r22
    17fa:	b7 0b       	sbc	r27, r23

000017fc <__udivmodhi4_ep>:
    17fc:	88 1f       	adc	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	5a 95       	dec	r21
    1802:	a9 f7       	brne	.-22     	; 0x17ee <__udivmodhi4_loop>
    1804:	80 95       	com	r24
    1806:	90 95       	com	r25
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	08 95       	ret

0000180e <sprintf>:
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	2e 97       	sbiw	r28, 0x0e	; 14
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	0d 89       	ldd	r16, Y+21	; 0x15
    1828:	1e 89       	ldd	r17, Y+22	; 0x16
    182a:	86 e0       	ldi	r24, 0x06	; 6
    182c:	8c 83       	std	Y+4, r24	; 0x04
    182e:	1a 83       	std	Y+2, r17	; 0x02
    1830:	09 83       	std	Y+1, r16	; 0x01
    1832:	8f ef       	ldi	r24, 0xFF	; 255
    1834:	9f e7       	ldi	r25, 0x7F	; 127
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	8d 83       	std	Y+5, r24	; 0x05
    183a:	ae 01       	movw	r20, r28
    183c:	47 5e       	subi	r20, 0xE7	; 231
    183e:	5f 4f       	sbci	r21, 0xFF	; 255
    1840:	6f 89       	ldd	r22, Y+23	; 0x17
    1842:	78 8d       	ldd	r23, Y+24	; 0x18
    1844:	ce 01       	movw	r24, r28
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	10 d0       	rcall	.+32     	; 0x186a <vfprintf>
    184a:	ef 81       	ldd	r30, Y+7	; 0x07
    184c:	f8 85       	ldd	r31, Y+8	; 0x08
    184e:	e0 0f       	add	r30, r16
    1850:	f1 1f       	adc	r31, r17
    1852:	10 82       	st	Z, r1
    1854:	2e 96       	adiw	r28, 0x0e	; 14
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	08 95       	ret

0000186a <vfprintf>:
    186a:	2f 92       	push	r2
    186c:	3f 92       	push	r3
    186e:	4f 92       	push	r4
    1870:	5f 92       	push	r5
    1872:	6f 92       	push	r6
    1874:	7f 92       	push	r7
    1876:	8f 92       	push	r8
    1878:	9f 92       	push	r9
    187a:	af 92       	push	r10
    187c:	bf 92       	push	r11
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	2b 97       	sbiw	r28, 0x0b	; 11
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	6c 01       	movw	r12, r24
    18a0:	7b 01       	movw	r14, r22
    18a2:	8a 01       	movw	r16, r20
    18a4:	fc 01       	movw	r30, r24
    18a6:	17 82       	std	Z+7, r1	; 0x07
    18a8:	16 82       	std	Z+6, r1	; 0x06
    18aa:	83 81       	ldd	r24, Z+3	; 0x03
    18ac:	81 ff       	sbrs	r24, 1
    18ae:	bf c1       	rjmp	.+894    	; 0x1c2e <vfprintf+0x3c4>
    18b0:	ce 01       	movw	r24, r28
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	3c 01       	movw	r6, r24
    18b6:	f6 01       	movw	r30, r12
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	f7 01       	movw	r30, r14
    18bc:	93 fd       	sbrc	r25, 3
    18be:	85 91       	lpm	r24, Z+
    18c0:	93 ff       	sbrs	r25, 3
    18c2:	81 91       	ld	r24, Z+
    18c4:	7f 01       	movw	r14, r30
    18c6:	88 23       	and	r24, r24
    18c8:	09 f4       	brne	.+2      	; 0x18cc <vfprintf+0x62>
    18ca:	ad c1       	rjmp	.+858    	; 0x1c26 <vfprintf+0x3bc>
    18cc:	85 32       	cpi	r24, 0x25	; 37
    18ce:	39 f4       	brne	.+14     	; 0x18de <vfprintf+0x74>
    18d0:	93 fd       	sbrc	r25, 3
    18d2:	85 91       	lpm	r24, Z+
    18d4:	93 ff       	sbrs	r25, 3
    18d6:	81 91       	ld	r24, Z+
    18d8:	7f 01       	movw	r14, r30
    18da:	85 32       	cpi	r24, 0x25	; 37
    18dc:	21 f4       	brne	.+8      	; 0x18e6 <vfprintf+0x7c>
    18de:	b6 01       	movw	r22, r12
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	d6 d1       	rcall	.+940    	; 0x1c90 <fputc>
    18e4:	e8 cf       	rjmp	.-48     	; 0x18b6 <vfprintf+0x4c>
    18e6:	91 2c       	mov	r9, r1
    18e8:	21 2c       	mov	r2, r1
    18ea:	31 2c       	mov	r3, r1
    18ec:	ff e1       	ldi	r31, 0x1F	; 31
    18ee:	f3 15       	cp	r31, r3
    18f0:	d8 f0       	brcs	.+54     	; 0x1928 <vfprintf+0xbe>
    18f2:	8b 32       	cpi	r24, 0x2B	; 43
    18f4:	79 f0       	breq	.+30     	; 0x1914 <vfprintf+0xaa>
    18f6:	38 f4       	brcc	.+14     	; 0x1906 <vfprintf+0x9c>
    18f8:	80 32       	cpi	r24, 0x20	; 32
    18fa:	79 f0       	breq	.+30     	; 0x191a <vfprintf+0xb0>
    18fc:	83 32       	cpi	r24, 0x23	; 35
    18fe:	a1 f4       	brne	.+40     	; 0x1928 <vfprintf+0xbe>
    1900:	23 2d       	mov	r18, r3
    1902:	20 61       	ori	r18, 0x10	; 16
    1904:	1d c0       	rjmp	.+58     	; 0x1940 <vfprintf+0xd6>
    1906:	8d 32       	cpi	r24, 0x2D	; 45
    1908:	61 f0       	breq	.+24     	; 0x1922 <vfprintf+0xb8>
    190a:	80 33       	cpi	r24, 0x30	; 48
    190c:	69 f4       	brne	.+26     	; 0x1928 <vfprintf+0xbe>
    190e:	23 2d       	mov	r18, r3
    1910:	21 60       	ori	r18, 0x01	; 1
    1912:	16 c0       	rjmp	.+44     	; 0x1940 <vfprintf+0xd6>
    1914:	83 2d       	mov	r24, r3
    1916:	82 60       	ori	r24, 0x02	; 2
    1918:	38 2e       	mov	r3, r24
    191a:	e3 2d       	mov	r30, r3
    191c:	e4 60       	ori	r30, 0x04	; 4
    191e:	3e 2e       	mov	r3, r30
    1920:	2a c0       	rjmp	.+84     	; 0x1976 <vfprintf+0x10c>
    1922:	f3 2d       	mov	r31, r3
    1924:	f8 60       	ori	r31, 0x08	; 8
    1926:	1d c0       	rjmp	.+58     	; 0x1962 <vfprintf+0xf8>
    1928:	37 fc       	sbrc	r3, 7
    192a:	2d c0       	rjmp	.+90     	; 0x1986 <vfprintf+0x11c>
    192c:	20 ed       	ldi	r18, 0xD0	; 208
    192e:	28 0f       	add	r18, r24
    1930:	2a 30       	cpi	r18, 0x0A	; 10
    1932:	40 f0       	brcs	.+16     	; 0x1944 <vfprintf+0xda>
    1934:	8e 32       	cpi	r24, 0x2E	; 46
    1936:	b9 f4       	brne	.+46     	; 0x1966 <vfprintf+0xfc>
    1938:	36 fc       	sbrc	r3, 6
    193a:	75 c1       	rjmp	.+746    	; 0x1c26 <vfprintf+0x3bc>
    193c:	23 2d       	mov	r18, r3
    193e:	20 64       	ori	r18, 0x40	; 64
    1940:	32 2e       	mov	r3, r18
    1942:	19 c0       	rjmp	.+50     	; 0x1976 <vfprintf+0x10c>
    1944:	36 fe       	sbrs	r3, 6
    1946:	06 c0       	rjmp	.+12     	; 0x1954 <vfprintf+0xea>
    1948:	8a e0       	ldi	r24, 0x0A	; 10
    194a:	98 9e       	mul	r9, r24
    194c:	20 0d       	add	r18, r0
    194e:	11 24       	eor	r1, r1
    1950:	92 2e       	mov	r9, r18
    1952:	11 c0       	rjmp	.+34     	; 0x1976 <vfprintf+0x10c>
    1954:	ea e0       	ldi	r30, 0x0A	; 10
    1956:	2e 9e       	mul	r2, r30
    1958:	20 0d       	add	r18, r0
    195a:	11 24       	eor	r1, r1
    195c:	22 2e       	mov	r2, r18
    195e:	f3 2d       	mov	r31, r3
    1960:	f0 62       	ori	r31, 0x20	; 32
    1962:	3f 2e       	mov	r3, r31
    1964:	08 c0       	rjmp	.+16     	; 0x1976 <vfprintf+0x10c>
    1966:	8c 36       	cpi	r24, 0x6C	; 108
    1968:	21 f4       	brne	.+8      	; 0x1972 <vfprintf+0x108>
    196a:	83 2d       	mov	r24, r3
    196c:	80 68       	ori	r24, 0x80	; 128
    196e:	38 2e       	mov	r3, r24
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <vfprintf+0x10c>
    1972:	88 36       	cpi	r24, 0x68	; 104
    1974:	41 f4       	brne	.+16     	; 0x1986 <vfprintf+0x11c>
    1976:	f7 01       	movw	r30, r14
    1978:	93 fd       	sbrc	r25, 3
    197a:	85 91       	lpm	r24, Z+
    197c:	93 ff       	sbrs	r25, 3
    197e:	81 91       	ld	r24, Z+
    1980:	7f 01       	movw	r14, r30
    1982:	81 11       	cpse	r24, r1
    1984:	b3 cf       	rjmp	.-154    	; 0x18ec <vfprintf+0x82>
    1986:	98 2f       	mov	r25, r24
    1988:	9f 7d       	andi	r25, 0xDF	; 223
    198a:	95 54       	subi	r25, 0x45	; 69
    198c:	93 30       	cpi	r25, 0x03	; 3
    198e:	28 f4       	brcc	.+10     	; 0x199a <vfprintf+0x130>
    1990:	0c 5f       	subi	r16, 0xFC	; 252
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	9f e3       	ldi	r25, 0x3F	; 63
    1996:	99 83       	std	Y+1, r25	; 0x01
    1998:	0d c0       	rjmp	.+26     	; 0x19b4 <vfprintf+0x14a>
    199a:	83 36       	cpi	r24, 0x63	; 99
    199c:	31 f0       	breq	.+12     	; 0x19aa <vfprintf+0x140>
    199e:	83 37       	cpi	r24, 0x73	; 115
    19a0:	71 f0       	breq	.+28     	; 0x19be <vfprintf+0x154>
    19a2:	83 35       	cpi	r24, 0x53	; 83
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <vfprintf+0x13e>
    19a6:	55 c0       	rjmp	.+170    	; 0x1a52 <vfprintf+0x1e8>
    19a8:	20 c0       	rjmp	.+64     	; 0x19ea <vfprintf+0x180>
    19aa:	f8 01       	movw	r30, r16
    19ac:	80 81       	ld	r24, Z
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	0e 5f       	subi	r16, 0xFE	; 254
    19b2:	1f 4f       	sbci	r17, 0xFF	; 255
    19b4:	88 24       	eor	r8, r8
    19b6:	83 94       	inc	r8
    19b8:	91 2c       	mov	r9, r1
    19ba:	53 01       	movw	r10, r6
    19bc:	12 c0       	rjmp	.+36     	; 0x19e2 <vfprintf+0x178>
    19be:	28 01       	movw	r4, r16
    19c0:	f2 e0       	ldi	r31, 0x02	; 2
    19c2:	4f 0e       	add	r4, r31
    19c4:	51 1c       	adc	r5, r1
    19c6:	f8 01       	movw	r30, r16
    19c8:	a0 80       	ld	r10, Z
    19ca:	b1 80       	ldd	r11, Z+1	; 0x01
    19cc:	36 fe       	sbrs	r3, 6
    19ce:	03 c0       	rjmp	.+6      	; 0x19d6 <vfprintf+0x16c>
    19d0:	69 2d       	mov	r22, r9
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <vfprintf+0x170>
    19d6:	6f ef       	ldi	r22, 0xFF	; 255
    19d8:	7f ef       	ldi	r23, 0xFF	; 255
    19da:	c5 01       	movw	r24, r10
    19dc:	4e d1       	rcall	.+668    	; 0x1c7a <strnlen>
    19de:	4c 01       	movw	r8, r24
    19e0:	82 01       	movw	r16, r4
    19e2:	f3 2d       	mov	r31, r3
    19e4:	ff 77       	andi	r31, 0x7F	; 127
    19e6:	3f 2e       	mov	r3, r31
    19e8:	15 c0       	rjmp	.+42     	; 0x1a14 <vfprintf+0x1aa>
    19ea:	28 01       	movw	r4, r16
    19ec:	22 e0       	ldi	r18, 0x02	; 2
    19ee:	42 0e       	add	r4, r18
    19f0:	51 1c       	adc	r5, r1
    19f2:	f8 01       	movw	r30, r16
    19f4:	a0 80       	ld	r10, Z
    19f6:	b1 80       	ldd	r11, Z+1	; 0x01
    19f8:	36 fe       	sbrs	r3, 6
    19fa:	03 c0       	rjmp	.+6      	; 0x1a02 <vfprintf+0x198>
    19fc:	69 2d       	mov	r22, r9
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <vfprintf+0x19c>
    1a02:	6f ef       	ldi	r22, 0xFF	; 255
    1a04:	7f ef       	ldi	r23, 0xFF	; 255
    1a06:	c5 01       	movw	r24, r10
    1a08:	2d d1       	rcall	.+602    	; 0x1c64 <strnlen_P>
    1a0a:	4c 01       	movw	r8, r24
    1a0c:	f3 2d       	mov	r31, r3
    1a0e:	f0 68       	ori	r31, 0x80	; 128
    1a10:	3f 2e       	mov	r3, r31
    1a12:	82 01       	movw	r16, r4
    1a14:	33 fc       	sbrc	r3, 3
    1a16:	19 c0       	rjmp	.+50     	; 0x1a4a <vfprintf+0x1e0>
    1a18:	82 2d       	mov	r24, r2
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	88 16       	cp	r8, r24
    1a1e:	99 06       	cpc	r9, r25
    1a20:	a0 f4       	brcc	.+40     	; 0x1a4a <vfprintf+0x1e0>
    1a22:	b6 01       	movw	r22, r12
    1a24:	80 e2       	ldi	r24, 0x20	; 32
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	33 d1       	rcall	.+614    	; 0x1c90 <fputc>
    1a2a:	2a 94       	dec	r2
    1a2c:	f5 cf       	rjmp	.-22     	; 0x1a18 <vfprintf+0x1ae>
    1a2e:	f5 01       	movw	r30, r10
    1a30:	37 fc       	sbrc	r3, 7
    1a32:	85 91       	lpm	r24, Z+
    1a34:	37 fe       	sbrs	r3, 7
    1a36:	81 91       	ld	r24, Z+
    1a38:	5f 01       	movw	r10, r30
    1a3a:	b6 01       	movw	r22, r12
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	28 d1       	rcall	.+592    	; 0x1c90 <fputc>
    1a40:	21 10       	cpse	r2, r1
    1a42:	2a 94       	dec	r2
    1a44:	21 e0       	ldi	r18, 0x01	; 1
    1a46:	82 1a       	sub	r8, r18
    1a48:	91 08       	sbc	r9, r1
    1a4a:	81 14       	cp	r8, r1
    1a4c:	91 04       	cpc	r9, r1
    1a4e:	79 f7       	brne	.-34     	; 0x1a2e <vfprintf+0x1c4>
    1a50:	e1 c0       	rjmp	.+450    	; 0x1c14 <vfprintf+0x3aa>
    1a52:	84 36       	cpi	r24, 0x64	; 100
    1a54:	11 f0       	breq	.+4      	; 0x1a5a <vfprintf+0x1f0>
    1a56:	89 36       	cpi	r24, 0x69	; 105
    1a58:	39 f5       	brne	.+78     	; 0x1aa8 <vfprintf+0x23e>
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	37 fe       	sbrs	r3, 7
    1a5e:	07 c0       	rjmp	.+14     	; 0x1a6e <vfprintf+0x204>
    1a60:	60 81       	ld	r22, Z
    1a62:	71 81       	ldd	r23, Z+1	; 0x01
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	93 81       	ldd	r25, Z+3	; 0x03
    1a68:	0c 5f       	subi	r16, 0xFC	; 252
    1a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6c:	08 c0       	rjmp	.+16     	; 0x1a7e <vfprintf+0x214>
    1a6e:	60 81       	ld	r22, Z
    1a70:	71 81       	ldd	r23, Z+1	; 0x01
    1a72:	07 2e       	mov	r0, r23
    1a74:	00 0c       	add	r0, r0
    1a76:	88 0b       	sbc	r24, r24
    1a78:	99 0b       	sbc	r25, r25
    1a7a:	0e 5f       	subi	r16, 0xFE	; 254
    1a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7e:	f3 2d       	mov	r31, r3
    1a80:	ff 76       	andi	r31, 0x6F	; 111
    1a82:	3f 2e       	mov	r3, r31
    1a84:	97 ff       	sbrs	r25, 7
    1a86:	09 c0       	rjmp	.+18     	; 0x1a9a <vfprintf+0x230>
    1a88:	90 95       	com	r25
    1a8a:	80 95       	com	r24
    1a8c:	70 95       	com	r23
    1a8e:	61 95       	neg	r22
    1a90:	7f 4f       	sbci	r23, 0xFF	; 255
    1a92:	8f 4f       	sbci	r24, 0xFF	; 255
    1a94:	9f 4f       	sbci	r25, 0xFF	; 255
    1a96:	f0 68       	ori	r31, 0x80	; 128
    1a98:	3f 2e       	mov	r3, r31
    1a9a:	2a e0       	ldi	r18, 0x0A	; 10
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	a3 01       	movw	r20, r6
    1aa0:	33 d1       	rcall	.+614    	; 0x1d08 <__ultoa_invert>
    1aa2:	88 2e       	mov	r8, r24
    1aa4:	86 18       	sub	r8, r6
    1aa6:	44 c0       	rjmp	.+136    	; 0x1b30 <vfprintf+0x2c6>
    1aa8:	85 37       	cpi	r24, 0x75	; 117
    1aaa:	31 f4       	brne	.+12     	; 0x1ab8 <vfprintf+0x24e>
    1aac:	23 2d       	mov	r18, r3
    1aae:	2f 7e       	andi	r18, 0xEF	; 239
    1ab0:	b2 2e       	mov	r11, r18
    1ab2:	2a e0       	ldi	r18, 0x0A	; 10
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	25 c0       	rjmp	.+74     	; 0x1b02 <vfprintf+0x298>
    1ab8:	93 2d       	mov	r25, r3
    1aba:	99 7f       	andi	r25, 0xF9	; 249
    1abc:	b9 2e       	mov	r11, r25
    1abe:	8f 36       	cpi	r24, 0x6F	; 111
    1ac0:	c1 f0       	breq	.+48     	; 0x1af2 <vfprintf+0x288>
    1ac2:	18 f4       	brcc	.+6      	; 0x1aca <vfprintf+0x260>
    1ac4:	88 35       	cpi	r24, 0x58	; 88
    1ac6:	79 f0       	breq	.+30     	; 0x1ae6 <vfprintf+0x27c>
    1ac8:	ae c0       	rjmp	.+348    	; 0x1c26 <vfprintf+0x3bc>
    1aca:	80 37       	cpi	r24, 0x70	; 112
    1acc:	19 f0       	breq	.+6      	; 0x1ad4 <vfprintf+0x26a>
    1ace:	88 37       	cpi	r24, 0x78	; 120
    1ad0:	21 f0       	breq	.+8      	; 0x1ada <vfprintf+0x270>
    1ad2:	a9 c0       	rjmp	.+338    	; 0x1c26 <vfprintf+0x3bc>
    1ad4:	e9 2f       	mov	r30, r25
    1ad6:	e0 61       	ori	r30, 0x10	; 16
    1ad8:	be 2e       	mov	r11, r30
    1ada:	b4 fe       	sbrs	r11, 4
    1adc:	0d c0       	rjmp	.+26     	; 0x1af8 <vfprintf+0x28e>
    1ade:	fb 2d       	mov	r31, r11
    1ae0:	f4 60       	ori	r31, 0x04	; 4
    1ae2:	bf 2e       	mov	r11, r31
    1ae4:	09 c0       	rjmp	.+18     	; 0x1af8 <vfprintf+0x28e>
    1ae6:	34 fe       	sbrs	r3, 4
    1ae8:	0a c0       	rjmp	.+20     	; 0x1afe <vfprintf+0x294>
    1aea:	29 2f       	mov	r18, r25
    1aec:	26 60       	ori	r18, 0x06	; 6
    1aee:	b2 2e       	mov	r11, r18
    1af0:	06 c0       	rjmp	.+12     	; 0x1afe <vfprintf+0x294>
    1af2:	28 e0       	ldi	r18, 0x08	; 8
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	05 c0       	rjmp	.+10     	; 0x1b02 <vfprintf+0x298>
    1af8:	20 e1       	ldi	r18, 0x10	; 16
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <vfprintf+0x298>
    1afe:	20 e1       	ldi	r18, 0x10	; 16
    1b00:	32 e0       	ldi	r19, 0x02	; 2
    1b02:	f8 01       	movw	r30, r16
    1b04:	b7 fe       	sbrs	r11, 7
    1b06:	07 c0       	rjmp	.+14     	; 0x1b16 <vfprintf+0x2ac>
    1b08:	60 81       	ld	r22, Z
    1b0a:	71 81       	ldd	r23, Z+1	; 0x01
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	0c 5f       	subi	r16, 0xFC	; 252
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	06 c0       	rjmp	.+12     	; 0x1b22 <vfprintf+0x2b8>
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	0e 5f       	subi	r16, 0xFE	; 254
    1b20:	1f 4f       	sbci	r17, 0xFF	; 255
    1b22:	a3 01       	movw	r20, r6
    1b24:	f1 d0       	rcall	.+482    	; 0x1d08 <__ultoa_invert>
    1b26:	88 2e       	mov	r8, r24
    1b28:	86 18       	sub	r8, r6
    1b2a:	fb 2d       	mov	r31, r11
    1b2c:	ff 77       	andi	r31, 0x7F	; 127
    1b2e:	3f 2e       	mov	r3, r31
    1b30:	36 fe       	sbrs	r3, 6
    1b32:	0d c0       	rjmp	.+26     	; 0x1b4e <vfprintf+0x2e4>
    1b34:	23 2d       	mov	r18, r3
    1b36:	2e 7f       	andi	r18, 0xFE	; 254
    1b38:	a2 2e       	mov	r10, r18
    1b3a:	89 14       	cp	r8, r9
    1b3c:	58 f4       	brcc	.+22     	; 0x1b54 <vfprintf+0x2ea>
    1b3e:	34 fe       	sbrs	r3, 4
    1b40:	0b c0       	rjmp	.+22     	; 0x1b58 <vfprintf+0x2ee>
    1b42:	32 fc       	sbrc	r3, 2
    1b44:	09 c0       	rjmp	.+18     	; 0x1b58 <vfprintf+0x2ee>
    1b46:	83 2d       	mov	r24, r3
    1b48:	8e 7e       	andi	r24, 0xEE	; 238
    1b4a:	a8 2e       	mov	r10, r24
    1b4c:	05 c0       	rjmp	.+10     	; 0x1b58 <vfprintf+0x2ee>
    1b4e:	b8 2c       	mov	r11, r8
    1b50:	a3 2c       	mov	r10, r3
    1b52:	03 c0       	rjmp	.+6      	; 0x1b5a <vfprintf+0x2f0>
    1b54:	b8 2c       	mov	r11, r8
    1b56:	01 c0       	rjmp	.+2      	; 0x1b5a <vfprintf+0x2f0>
    1b58:	b9 2c       	mov	r11, r9
    1b5a:	a4 fe       	sbrs	r10, 4
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <vfprintf+0x312>
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e8 0d       	add	r30, r8
    1b62:	f1 1d       	adc	r31, r1
    1b64:	80 81       	ld	r24, Z
    1b66:	80 33       	cpi	r24, 0x30	; 48
    1b68:	21 f4       	brne	.+8      	; 0x1b72 <vfprintf+0x308>
    1b6a:	9a 2d       	mov	r25, r10
    1b6c:	99 7e       	andi	r25, 0xE9	; 233
    1b6e:	a9 2e       	mov	r10, r25
    1b70:	09 c0       	rjmp	.+18     	; 0x1b84 <vfprintf+0x31a>
    1b72:	a2 fe       	sbrs	r10, 2
    1b74:	06 c0       	rjmp	.+12     	; 0x1b82 <vfprintf+0x318>
    1b76:	b3 94       	inc	r11
    1b78:	b3 94       	inc	r11
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <vfprintf+0x31a>
    1b7c:	8a 2d       	mov	r24, r10
    1b7e:	86 78       	andi	r24, 0x86	; 134
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <vfprintf+0x31a>
    1b82:	b3 94       	inc	r11
    1b84:	a3 fc       	sbrc	r10, 3
    1b86:	10 c0       	rjmp	.+32     	; 0x1ba8 <vfprintf+0x33e>
    1b88:	a0 fe       	sbrs	r10, 0
    1b8a:	06 c0       	rjmp	.+12     	; 0x1b98 <vfprintf+0x32e>
    1b8c:	b2 14       	cp	r11, r2
    1b8e:	80 f4       	brcc	.+32     	; 0x1bb0 <vfprintf+0x346>
    1b90:	28 0c       	add	r2, r8
    1b92:	92 2c       	mov	r9, r2
    1b94:	9b 18       	sub	r9, r11
    1b96:	0d c0       	rjmp	.+26     	; 0x1bb2 <vfprintf+0x348>
    1b98:	b2 14       	cp	r11, r2
    1b9a:	58 f4       	brcc	.+22     	; 0x1bb2 <vfprintf+0x348>
    1b9c:	b6 01       	movw	r22, r12
    1b9e:	80 e2       	ldi	r24, 0x20	; 32
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	76 d0       	rcall	.+236    	; 0x1c90 <fputc>
    1ba4:	b3 94       	inc	r11
    1ba6:	f8 cf       	rjmp	.-16     	; 0x1b98 <vfprintf+0x32e>
    1ba8:	b2 14       	cp	r11, r2
    1baa:	18 f4       	brcc	.+6      	; 0x1bb2 <vfprintf+0x348>
    1bac:	2b 18       	sub	r2, r11
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <vfprintf+0x34a>
    1bb0:	98 2c       	mov	r9, r8
    1bb2:	21 2c       	mov	r2, r1
    1bb4:	a4 fe       	sbrs	r10, 4
    1bb6:	0f c0       	rjmp	.+30     	; 0x1bd6 <vfprintf+0x36c>
    1bb8:	b6 01       	movw	r22, r12
    1bba:	80 e3       	ldi	r24, 0x30	; 48
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	68 d0       	rcall	.+208    	; 0x1c90 <fputc>
    1bc0:	a2 fe       	sbrs	r10, 2
    1bc2:	16 c0       	rjmp	.+44     	; 0x1bf0 <vfprintf+0x386>
    1bc4:	a1 fc       	sbrc	r10, 1
    1bc6:	03 c0       	rjmp	.+6      	; 0x1bce <vfprintf+0x364>
    1bc8:	88 e7       	ldi	r24, 0x78	; 120
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <vfprintf+0x368>
    1bce:	88 e5       	ldi	r24, 0x58	; 88
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	b6 01       	movw	r22, r12
    1bd4:	0c c0       	rjmp	.+24     	; 0x1bee <vfprintf+0x384>
    1bd6:	8a 2d       	mov	r24, r10
    1bd8:	86 78       	andi	r24, 0x86	; 134
    1bda:	51 f0       	breq	.+20     	; 0x1bf0 <vfprintf+0x386>
    1bdc:	a1 fe       	sbrs	r10, 1
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <vfprintf+0x37a>
    1be0:	8b e2       	ldi	r24, 0x2B	; 43
    1be2:	01 c0       	rjmp	.+2      	; 0x1be6 <vfprintf+0x37c>
    1be4:	80 e2       	ldi	r24, 0x20	; 32
    1be6:	a7 fc       	sbrc	r10, 7
    1be8:	8d e2       	ldi	r24, 0x2D	; 45
    1bea:	b6 01       	movw	r22, r12
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	50 d0       	rcall	.+160    	; 0x1c90 <fputc>
    1bf0:	89 14       	cp	r8, r9
    1bf2:	30 f4       	brcc	.+12     	; 0x1c00 <vfprintf+0x396>
    1bf4:	b6 01       	movw	r22, r12
    1bf6:	80 e3       	ldi	r24, 0x30	; 48
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	4a d0       	rcall	.+148    	; 0x1c90 <fputc>
    1bfc:	9a 94       	dec	r9
    1bfe:	f8 cf       	rjmp	.-16     	; 0x1bf0 <vfprintf+0x386>
    1c00:	8a 94       	dec	r8
    1c02:	f3 01       	movw	r30, r6
    1c04:	e8 0d       	add	r30, r8
    1c06:	f1 1d       	adc	r31, r1
    1c08:	80 81       	ld	r24, Z
    1c0a:	b6 01       	movw	r22, r12
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	40 d0       	rcall	.+128    	; 0x1c90 <fputc>
    1c10:	81 10       	cpse	r8, r1
    1c12:	f6 cf       	rjmp	.-20     	; 0x1c00 <vfprintf+0x396>
    1c14:	22 20       	and	r2, r2
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <vfprintf+0x3b0>
    1c18:	4e ce       	rjmp	.-868    	; 0x18b6 <vfprintf+0x4c>
    1c1a:	b6 01       	movw	r22, r12
    1c1c:	80 e2       	ldi	r24, 0x20	; 32
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	37 d0       	rcall	.+110    	; 0x1c90 <fputc>
    1c22:	2a 94       	dec	r2
    1c24:	f7 cf       	rjmp	.-18     	; 0x1c14 <vfprintf+0x3aa>
    1c26:	f6 01       	movw	r30, r12
    1c28:	86 81       	ldd	r24, Z+6	; 0x06
    1c2a:	97 81       	ldd	r25, Z+7	; 0x07
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <vfprintf+0x3c8>
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	9f ef       	ldi	r25, 0xFF	; 255
    1c32:	2b 96       	adiw	r28, 0x0b	; 11
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	ff 90       	pop	r15
    1c48:	ef 90       	pop	r14
    1c4a:	df 90       	pop	r13
    1c4c:	cf 90       	pop	r12
    1c4e:	bf 90       	pop	r11
    1c50:	af 90       	pop	r10
    1c52:	9f 90       	pop	r9
    1c54:	8f 90       	pop	r8
    1c56:	7f 90       	pop	r7
    1c58:	6f 90       	pop	r6
    1c5a:	5f 90       	pop	r5
    1c5c:	4f 90       	pop	r4
    1c5e:	3f 90       	pop	r3
    1c60:	2f 90       	pop	r2
    1c62:	08 95       	ret

00001c64 <strnlen_P>:
    1c64:	fc 01       	movw	r30, r24
    1c66:	05 90       	lpm	r0, Z+
    1c68:	61 50       	subi	r22, 0x01	; 1
    1c6a:	70 40       	sbci	r23, 0x00	; 0
    1c6c:	01 10       	cpse	r0, r1
    1c6e:	d8 f7       	brcc	.-10     	; 0x1c66 <strnlen_P+0x2>
    1c70:	80 95       	com	r24
    1c72:	90 95       	com	r25
    1c74:	8e 0f       	add	r24, r30
    1c76:	9f 1f       	adc	r25, r31
    1c78:	08 95       	ret

00001c7a <strnlen>:
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	61 50       	subi	r22, 0x01	; 1
    1c7e:	70 40       	sbci	r23, 0x00	; 0
    1c80:	01 90       	ld	r0, Z+
    1c82:	01 10       	cpse	r0, r1
    1c84:	d8 f7       	brcc	.-10     	; 0x1c7c <strnlen+0x2>
    1c86:	80 95       	com	r24
    1c88:	90 95       	com	r25
    1c8a:	8e 0f       	add	r24, r30
    1c8c:	9f 1f       	adc	r25, r31
    1c8e:	08 95       	ret

00001c90 <fputc>:
    1c90:	0f 93       	push	r16
    1c92:	1f 93       	push	r17
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
    1c98:	fb 01       	movw	r30, r22
    1c9a:	23 81       	ldd	r18, Z+3	; 0x03
    1c9c:	21 fd       	sbrc	r18, 1
    1c9e:	03 c0       	rjmp	.+6      	; 0x1ca6 <fputc+0x16>
    1ca0:	8f ef       	ldi	r24, 0xFF	; 255
    1ca2:	9f ef       	ldi	r25, 0xFF	; 255
    1ca4:	2c c0       	rjmp	.+88     	; 0x1cfe <fputc+0x6e>
    1ca6:	22 ff       	sbrs	r18, 2
    1ca8:	16 c0       	rjmp	.+44     	; 0x1cd6 <fputc+0x46>
    1caa:	46 81       	ldd	r20, Z+6	; 0x06
    1cac:	57 81       	ldd	r21, Z+7	; 0x07
    1cae:	24 81       	ldd	r18, Z+4	; 0x04
    1cb0:	35 81       	ldd	r19, Z+5	; 0x05
    1cb2:	42 17       	cp	r20, r18
    1cb4:	53 07       	cpc	r21, r19
    1cb6:	44 f4       	brge	.+16     	; 0x1cc8 <fputc+0x38>
    1cb8:	a0 81       	ld	r26, Z
    1cba:	b1 81       	ldd	r27, Z+1	; 0x01
    1cbc:	9d 01       	movw	r18, r26
    1cbe:	2f 5f       	subi	r18, 0xFF	; 255
    1cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc2:	31 83       	std	Z+1, r19	; 0x01
    1cc4:	20 83       	st	Z, r18
    1cc6:	8c 93       	st	X, r24
    1cc8:	26 81       	ldd	r18, Z+6	; 0x06
    1cca:	37 81       	ldd	r19, Z+7	; 0x07
    1ccc:	2f 5f       	subi	r18, 0xFF	; 255
    1cce:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd0:	37 83       	std	Z+7, r19	; 0x07
    1cd2:	26 83       	std	Z+6, r18	; 0x06
    1cd4:	14 c0       	rjmp	.+40     	; 0x1cfe <fputc+0x6e>
    1cd6:	8b 01       	movw	r16, r22
    1cd8:	ec 01       	movw	r28, r24
    1cda:	fb 01       	movw	r30, r22
    1cdc:	00 84       	ldd	r0, Z+8	; 0x08
    1cde:	f1 85       	ldd	r31, Z+9	; 0x09
    1ce0:	e0 2d       	mov	r30, r0
    1ce2:	09 95       	icall
    1ce4:	89 2b       	or	r24, r25
    1ce6:	e1 f6       	brne	.-72     	; 0x1ca0 <fputc+0x10>
    1ce8:	d8 01       	movw	r26, r16
    1cea:	16 96       	adiw	r26, 0x06	; 6
    1cec:	8d 91       	ld	r24, X+
    1cee:	9c 91       	ld	r25, X
    1cf0:	17 97       	sbiw	r26, 0x07	; 7
    1cf2:	01 96       	adiw	r24, 0x01	; 1
    1cf4:	17 96       	adiw	r26, 0x07	; 7
    1cf6:	9c 93       	st	X, r25
    1cf8:	8e 93       	st	-X, r24
    1cfa:	16 97       	sbiw	r26, 0x06	; 6
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	1f 91       	pop	r17
    1d04:	0f 91       	pop	r16
    1d06:	08 95       	ret

00001d08 <__ultoa_invert>:
    1d08:	fa 01       	movw	r30, r20
    1d0a:	aa 27       	eor	r26, r26
    1d0c:	28 30       	cpi	r18, 0x08	; 8
    1d0e:	51 f1       	breq	.+84     	; 0x1d64 <__ultoa_invert+0x5c>
    1d10:	20 31       	cpi	r18, 0x10	; 16
    1d12:	81 f1       	breq	.+96     	; 0x1d74 <__ultoa_invert+0x6c>
    1d14:	e8 94       	clt
    1d16:	6f 93       	push	r22
    1d18:	6e 7f       	andi	r22, 0xFE	; 254
    1d1a:	6e 5f       	subi	r22, 0xFE	; 254
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d20:	9f 4f       	sbci	r25, 0xFF	; 255
    1d22:	af 4f       	sbci	r26, 0xFF	; 255
    1d24:	b1 e0       	ldi	r27, 0x01	; 1
    1d26:	3e d0       	rcall	.+124    	; 0x1da4 <__ultoa_invert+0x9c>
    1d28:	b4 e0       	ldi	r27, 0x04	; 4
    1d2a:	3c d0       	rcall	.+120    	; 0x1da4 <__ultoa_invert+0x9c>
    1d2c:	67 0f       	add	r22, r23
    1d2e:	78 1f       	adc	r23, r24
    1d30:	89 1f       	adc	r24, r25
    1d32:	9a 1f       	adc	r25, r26
    1d34:	a1 1d       	adc	r26, r1
    1d36:	68 0f       	add	r22, r24
    1d38:	79 1f       	adc	r23, r25
    1d3a:	8a 1f       	adc	r24, r26
    1d3c:	91 1d       	adc	r25, r1
    1d3e:	a1 1d       	adc	r26, r1
    1d40:	6a 0f       	add	r22, r26
    1d42:	71 1d       	adc	r23, r1
    1d44:	81 1d       	adc	r24, r1
    1d46:	91 1d       	adc	r25, r1
    1d48:	a1 1d       	adc	r26, r1
    1d4a:	20 d0       	rcall	.+64     	; 0x1d8c <__ultoa_invert+0x84>
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <__ultoa_invert+0x48>
    1d4e:	68 94       	set
    1d50:	3f 91       	pop	r19
    1d52:	2a e0       	ldi	r18, 0x0A	; 10
    1d54:	26 9f       	mul	r18, r22
    1d56:	11 24       	eor	r1, r1
    1d58:	30 19       	sub	r19, r0
    1d5a:	30 5d       	subi	r19, 0xD0	; 208
    1d5c:	31 93       	st	Z+, r19
    1d5e:	de f6       	brtc	.-74     	; 0x1d16 <__ultoa_invert+0xe>
    1d60:	cf 01       	movw	r24, r30
    1d62:	08 95       	ret
    1d64:	46 2f       	mov	r20, r22
    1d66:	47 70       	andi	r20, 0x07	; 7
    1d68:	40 5d       	subi	r20, 0xD0	; 208
    1d6a:	41 93       	st	Z+, r20
    1d6c:	b3 e0       	ldi	r27, 0x03	; 3
    1d6e:	0f d0       	rcall	.+30     	; 0x1d8e <__ultoa_invert+0x86>
    1d70:	c9 f7       	brne	.-14     	; 0x1d64 <__ultoa_invert+0x5c>
    1d72:	f6 cf       	rjmp	.-20     	; 0x1d60 <__ultoa_invert+0x58>
    1d74:	46 2f       	mov	r20, r22
    1d76:	4f 70       	andi	r20, 0x0F	; 15
    1d78:	40 5d       	subi	r20, 0xD0	; 208
    1d7a:	4a 33       	cpi	r20, 0x3A	; 58
    1d7c:	18 f0       	brcs	.+6      	; 0x1d84 <__ultoa_invert+0x7c>
    1d7e:	49 5d       	subi	r20, 0xD9	; 217
    1d80:	31 fd       	sbrc	r19, 1
    1d82:	40 52       	subi	r20, 0x20	; 32
    1d84:	41 93       	st	Z+, r20
    1d86:	02 d0       	rcall	.+4      	; 0x1d8c <__ultoa_invert+0x84>
    1d88:	a9 f7       	brne	.-22     	; 0x1d74 <__ultoa_invert+0x6c>
    1d8a:	ea cf       	rjmp	.-44     	; 0x1d60 <__ultoa_invert+0x58>
    1d8c:	b4 e0       	ldi	r27, 0x04	; 4
    1d8e:	a6 95       	lsr	r26
    1d90:	97 95       	ror	r25
    1d92:	87 95       	ror	r24
    1d94:	77 95       	ror	r23
    1d96:	67 95       	ror	r22
    1d98:	ba 95       	dec	r27
    1d9a:	c9 f7       	brne	.-14     	; 0x1d8e <__ultoa_invert+0x86>
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	61 05       	cpc	r22, r1
    1da0:	71 05       	cpc	r23, r1
    1da2:	08 95       	ret
    1da4:	9b 01       	movw	r18, r22
    1da6:	ac 01       	movw	r20, r24
    1da8:	0a 2e       	mov	r0, r26
    1daa:	06 94       	lsr	r0
    1dac:	57 95       	ror	r21
    1dae:	47 95       	ror	r20
    1db0:	37 95       	ror	r19
    1db2:	27 95       	ror	r18
    1db4:	ba 95       	dec	r27
    1db6:	c9 f7       	brne	.-14     	; 0x1daa <__ultoa_invert+0xa2>
    1db8:	62 0f       	add	r22, r18
    1dba:	73 1f       	adc	r23, r19
    1dbc:	84 1f       	adc	r24, r20
    1dbe:	95 1f       	adc	r25, r21
    1dc0:	a0 1d       	adc	r26, r0
    1dc2:	08 95       	ret

00001dc4 <_exit>:
    1dc4:	f8 94       	cli

00001dc6 <__stop_program>:
    1dc6:	ff cf       	rjmp	.-2      	; 0x1dc6 <__stop_program>
