
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000135a  000013ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000135a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800116  00800116  00001404  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001975  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eca  00000000  00000000  00002f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dfb  00000000  00000000  00003e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00004c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086a  00000000  00000000  00004f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d5d  00000000  00000000  000057d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006533  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	13 c2       	rjmp	.+1062   	; 0x42c <__vector_1>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c0       	rjmp	.+158    	; 0xd0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9b c1       	rjmp	.+822    	; 0x378 <__vector_16>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c0       	rjmp	.+134    	; 0xd0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	f5 c1       	rjmp	.+1002   	; 0x440 <__vector_21>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c0       	rjmp	.+114    	; 0xd0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	f7 c1       	rjmp	.+1006   	; 0x454 <__vector_25>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c0       	rjmp	.+78     	; 0xd0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c0       	rjmp	.+70     	; 0xd0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ea e5       	ldi	r30, 0x5A	; 90
      a8:	f3 e1       	ldi	r31, 0x13	; 19
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 31       	cpi	r26, 0x16	; 22
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	21 e0       	ldi	r18, 0x01	; 1
      bc:	a6 e1       	ldi	r26, 0x16	; 22
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a0 32       	cpi	r26, 0x20	; 32
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	95 d0       	rcall	.+298    	; 0x1f6 <main>
      cc:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <lcd_enable_pulse>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d2:	88 b1       	in	r24, 0x08	; 8
      d4:	88 60       	ori	r24, 0x08	; 8
      d6:	88 b9       	out	0x08, r24	; 8
      d8:	82 e0       	ldi	r24, 0x02	; 2
      da:	8a 95       	dec	r24
      dc:	f1 f7       	brne	.-4      	; 0xda <lcd_enable_pulse+0x8>
      de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_enable_pulse+0xe>
      e0:	88 b1       	in	r24, 0x08	; 8
      e2:	87 7f       	andi	r24, 0xF7	; 247
      e4:	88 b9       	out	0x08, r24	; 8
      e6:	08 95       	ret

000000e8 <lcd_init>:
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	2f e7       	ldi	r18, 0x7F	; 127
      ee:	88 e3       	ldi	r24, 0x38	; 56
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	21 50       	subi	r18, 0x01	; 1
      f4:	80 40       	sbci	r24, 0x00	; 0
      f6:	90 40       	sbci	r25, 0x00	; 0
      f8:	e1 f7       	brne	.-8      	; 0xf2 <lcd_init+0xa>
      fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_init+0x14>
      fc:	00 00       	nop
      fe:	80 e3       	ldi	r24, 0x30	; 48
     100:	88 b9       	out	0x08, r24	; 8
     102:	e7 df       	rcall	.-50     	; 0xd2 <lcd_enable_pulse>
     104:	2a e6       	ldi	r18, 0x6A	; 106
     106:	2a 95       	dec	r18
     108:	f1 f7       	brne	.-4      	; 0x106 <lcd_init+0x1e>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_init+0x24>
     10c:	d0 e2       	ldi	r29, 0x20	; 32
     10e:	d8 b9       	out	0x08, r29	; 8
     110:	e0 df       	rcall	.-64     	; 0xd2 <lcd_enable_pulse>
     112:	c0 e8       	ldi	r28, 0x80	; 128
     114:	c8 b9       	out	0x08, r28	; 8
     116:	dd df       	rcall	.-70     	; 0xd2 <lcd_enable_pulse>
     118:	8a e6       	ldi	r24, 0x6A	; 106
     11a:	8a 95       	dec	r24
     11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x32>
     11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x38>
     120:	d8 b9       	out	0x08, r29	; 8
     122:	d7 df       	rcall	.-82     	; 0xd2 <lcd_enable_pulse>
     124:	c8 b9       	out	0x08, r28	; 8
     126:	d5 df       	rcall	.-86     	; 0xd2 <lcd_enable_pulse>
     128:	9a e6       	ldi	r25, 0x6A	; 106
     12a:	9a 95       	dec	r25
     12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_init+0x42>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_init+0x48>
     130:	18 b8       	out	0x08, r1	; 8
     132:	cf df       	rcall	.-98     	; 0xd2 <lcd_enable_pulse>
     134:	80 ef       	ldi	r24, 0xF0	; 240
     136:	88 b9       	out	0x08, r24	; 8
     138:	cc df       	rcall	.-104    	; 0xd2 <lcd_enable_pulse>
     13a:	2a e6       	ldi	r18, 0x6A	; 106
     13c:	2a 95       	dec	r18
     13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_init+0x54>
     140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_init+0x5a>
     142:	18 b8       	out	0x08, r1	; 8
     144:	c6 df       	rcall	.-116    	; 0xd2 <lcd_enable_pulse>
     146:	80 e1       	ldi	r24, 0x10	; 16
     148:	88 b9       	out	0x08, r24	; 8
     14a:	c3 df       	rcall	.-122    	; 0xd2 <lcd_enable_pulse>
     14c:	8f e9       	ldi	r24, 0x9F	; 159
     14e:	9f e0       	ldi	r25, 0x0F	; 15
     150:	01 97       	sbiw	r24, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x68>
     154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x6e>
     156:	00 00       	nop
     158:	18 b8       	out	0x08, r1	; 8
     15a:	bb df       	rcall	.-138    	; 0xd2 <lcd_enable_pulse>
     15c:	80 e6       	ldi	r24, 0x60	; 96
     15e:	88 b9       	out	0x08, r24	; 8
     160:	b8 df       	rcall	.-144    	; 0xd2 <lcd_enable_pulse>
     162:	8f e1       	ldi	r24, 0x1F	; 31
     164:	9e e4       	ldi	r25, 0x4E	; 78
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <lcd_init+0x7e>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_init+0x84>
     16c:	00 00       	nop
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <lcd_write_char>:
     174:	cf 93       	push	r28
     176:	c8 2f       	mov	r28, r24
     178:	2a e6       	ldi	r18, 0x6A	; 106
     17a:	2a 95       	dec	r18
     17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_write_char+0x6>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_write_char+0xc>
     180:	80 7f       	andi	r24, 0xF0	; 240
     182:	84 60       	ori	r24, 0x04	; 4
     184:	88 b9       	out	0x08, r24	; 8
     186:	a5 df       	rcall	.-182    	; 0xd2 <lcd_enable_pulse>
     188:	20 e1       	ldi	r18, 0x10	; 16
     18a:	c2 9f       	mul	r28, r18
     18c:	c0 01       	movw	r24, r0
     18e:	11 24       	eor	r1, r1
     190:	84 60       	ori	r24, 0x04	; 4
     192:	88 b9       	out	0x08, r24	; 8
     194:	9e df       	rcall	.-196    	; 0xd2 <lcd_enable_pulse>
     196:	cf 91       	pop	r28
     198:	08 95       	ret

0000019a <lcd_set_cursor_position>:
     19a:	cf 93       	push	r28
     19c:	2a e6       	ldi	r18, 0x6A	; 106
     19e:	2a 95       	dec	r18
     1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_set_cursor_position+0x4>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_set_cursor_position+0xa>
     1a4:	83 34       	cpi	r24, 0x43	; 67
     1a6:	60 f4       	brcc	.+24     	; 0x1c0 <lcd_set_cursor_position+0x26>
     1a8:	c8 2f       	mov	r28, r24
     1aa:	c0 68       	ori	r28, 0x80	; 128
     1ac:	80 7f       	andi	r24, 0xF0	; 240
     1ae:	80 68       	ori	r24, 0x80	; 128
     1b0:	88 b9       	out	0x08, r24	; 8
     1b2:	8f df       	rcall	.-226    	; 0xd2 <lcd_enable_pulse>
     1b4:	20 e1       	ldi	r18, 0x10	; 16
     1b6:	c2 9f       	mul	r28, r18
     1b8:	c0 01       	movw	r24, r0
     1ba:	11 24       	eor	r1, r1
     1bc:	88 b9       	out	0x08, r24	; 8
     1be:	89 df       	rcall	.-238    	; 0xd2 <lcd_enable_pulse>
     1c0:	cf 91       	pop	r28
     1c2:	08 95       	ret

000001c4 <lcd_write_string>:
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <lcd_write_string+0xc>
     1cc:	21 96       	adiw	r28, 0x01	; 1
     1ce:	d2 df       	rcall	.-92     	; 0x174 <lcd_write_char>
     1d0:	88 81       	ld	r24, Y
     1d2:	81 11       	cpse	r24, r1
     1d4:	fb cf       	rjmp	.-10     	; 0x1cc <lcd_write_string+0x8>
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	08 95       	ret

000001dc <port_init>:
* Output:
* Notes:
******************************************************************************/
void port_init(void)
{
	DDRA = 0;
     1dc:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xff;
     1de:	8f ef       	ldi	r24, 0xFF	; 255
     1e0:	82 b9       	out	0x02, r24	; 2
	
	DDRF = (1<<PF1) | (1<<PF2);
     1e2:	86 e0       	ldi	r24, 0x06	; 6
     1e4:	80 bb       	out	0x10, r24	; 16
	PORTF = (1<<PF1) | (1<<PF2);
     1e6:	81 bb       	out	0x11, r24	; 17
	
	// For TWI, pullup resistors must be enabled
	DDRD = (0<<PD0) | (0<<PD1);
     1e8:	1a b8       	out	0x0a, r1	; 10
	PORTD = (1<<PD0) | (1<<PD0);
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	8b b9       	out	0x0b, r24	; 11
	
	DDRC = (1<<LCD_E) | (1<<LCD_RS) | (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5) | (1<<LCD_D4);
     1ee:	8c ef       	ldi	r24, 0xFC	; 252
     1f0:	87 b9       	out	0x07, r24	; 7
	PORTC = (0<<LCD_E) | (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
     1f2:	18 b8       	out	0x08, r1	; 8
     1f4:	08 95       	ret

000001f6 <main>:
* Input:
* Output:
* Notes:
******************************************************************************/
int main(void)
{
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	cd b7       	in	r28, 0x3d	; 61
     1fc:	de b7       	in	r29, 0x3e	; 62
     1fe:	e2 97       	sbiw	r28, 0x32	; 50
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	f8 94       	cli
     204:	de bf       	out	0x3e, r29	; 62
     206:	0f be       	out	0x3f, r0	; 63
     208:	cd bf       	out	0x3d, r28	; 61
	port_init();
     20a:	e8 df       	rcall	.-48     	; 0x1dc <port_init>
	timer_init();
     20c:	39 d1       	rcall	.+626    	; 0x480 <timer_init>
	external_int_init();
     20e:	40 d1       	rcall	.+640    	; 0x490 <external_int_init>
	uart0_init(BAUD9600);
     210:	83 e3       	ldi	r24, 0x33	; 51
     212:	90 e0       	ldi	r25, 0x00	; 0
	lcd_init();
     214:	aa d3       	rcall	.+1876   	; 0x96a <uart0_init>
     216:	68 df       	rcall	.-304    	; 0xe8 <lcd_init>
	adc_init();
     218:	41 d1       	rcall	.+642    	; 0x49c <adc_init>
     21a:	eb d1       	rcall	.+982    	; 0x5f2 <twi_init>
	
	// TWI initialization
	twi_init();
     21c:	78 94       	sei
     21e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <task_10ms>
	sei();
	
    /* Replace with your application code */
    while (1) 
    {
		if(task_10ms)
     222:	88 23       	and	r24, r24
     224:	09 f4       	brne	.+2      	; 0x228 <main+0x32>
     226:	5c c0       	rjmp	.+184    	; 0x2e0 <main+0xea>
     228:	00 99       	sbic	0x00, 0	; 0
     22a:	1e c0       	rjmp	.+60     	; 0x268 <main+0x72>
		{
			if((PINA & (1<<PA0)) == 0 && PA0_pushed == FALSE) {
     22c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <PA0_pushed>
     230:	81 11       	cpse	r24, r1
     232:	1a c0       	rjmp	.+52     	; 0x268 <main+0x72>
     234:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
				aktualis = TIME;
     238:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <masodperc>
				masodperc = 0;
     23c:	8b e2       	ldi	r24, 0x2B	; 43
     23e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <perc>
				perc = 43;
     242:	8f e0       	ldi	r24, 0x0F	; 15
     244:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ora>
				ora = 15;
     248:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
				twi_mt_mode(aktualis, masodperc, perc, ora, nap, honap, ev);
     24c:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     250:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <honap>
     254:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <nap>
     258:	2f e0       	ldi	r18, 0x0F	; 15
     25a:	4b e2       	ldi	r20, 0x2B	; 43
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	ce d1       	rcall	.+924    	; 0x5fe <twi_mt_mode>
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <PA0_pushed>
				PA0_pushed = TRUE;
     268:	00 9b       	sbis	0x00, 0	; 0
     26a:	06 c0       	rjmp	.+12     	; 0x278 <main+0x82>
			}
			if((PINA & (1<<PA0)) == (1<<PA0) && PA0_pushed == TRUE) PA0_pushed = FALSE;
     26c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <PA0_pushed>
     270:	81 30       	cpi	r24, 0x01	; 1
     272:	11 f4       	brne	.+4      	; 0x278 <main+0x82>
     274:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <PA0_pushed>
     278:	01 99       	sbic	0x00, 1	; 0
     27a:	28 c0       	rjmp	.+80     	; 0x2cc <main+0xd6>
			
			
			
			
			if((PINA & (1<<PA1)) == 0 && PA1_pushed == FALSE) {
     27c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <PA1_pushed>
     280:	81 11       	cpse	r24, r1
     282:	24 c0       	rjmp	.+72     	; 0x2cc <main+0xd6>
     284:	11 e0       	ldi	r17, 0x01	; 1
     286:	10 93 16 01 	sts	0x0116, r17	; 0x800116 <__data_end>
				aktualis = DATE;
     28a:	84 e1       	ldi	r24, 0x14	; 20
     28c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <nap>
				nap = 20;
     290:	8b e0       	ldi	r24, 0x0B	; 11
     292:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <honap>
				honap = 11;
     296:	88 ee       	ldi	r24, 0xE8	; 232
     298:	97 e0       	ldi	r25, 0x07	; 7
				ev = 2024;
     29a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     29e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     2a2:	0f 2e       	mov	r0, r31
     2a4:	f8 ee       	ldi	r31, 0xE8	; 232
				twi_mt_mode(aktualis, masodperc, perc, ora, nap, honap, ev);
     2a6:	cf 2e       	mov	r12, r31
     2a8:	f7 e0       	ldi	r31, 0x07	; 7
     2aa:	df 2e       	mov	r13, r31
     2ac:	f0 2d       	mov	r31, r0
     2ae:	0f 2e       	mov	r0, r31
     2b0:	fb e0       	ldi	r31, 0x0B	; 11
     2b2:	ef 2e       	mov	r14, r31
     2b4:	f0 2d       	mov	r31, r0
     2b6:	04 e1       	ldi	r16, 0x14	; 20
     2b8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ora>
     2bc:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <perc>
     2c0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <masodperc>
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	9b d1       	rcall	.+822    	; 0x5fe <twi_mt_mode>
     2c8:	10 93 17 01 	sts	0x0117, r17	; 0x800117 <PA1_pushed>
				PA1_pushed = TRUE;
     2cc:	01 9b       	sbis	0x00, 1	; 0
     2ce:	06 c0       	rjmp	.+12     	; 0x2dc <main+0xe6>
			}
			if((PINA & (1<<PA1)) == (1<<PA1) && PA1_pushed == TRUE) PA1_pushed = FALSE;
     2d0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <PA1_pushed>
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	11 f4       	brne	.+4      	; 0x2dc <main+0xe6>
     2d8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <PA1_pushed>
     2dc:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <task_10ms>
			
			task_10ms=FALSE;
     2e0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <task_100ms>
		}
		if(task_100ms)
     2e4:	88 23       	and	r24, r24
     2e6:	79 f1       	breq	.+94     	; 0x346 <main+0x150>
     2e8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <nap>
		{
			char write_string[50];
			sprintf(write_string, "%d%d%d %d%d%d", ora, perc, masodperc, ev, honap, nap);
     2ec:	1f 92       	push	r1
     2ee:	8f 93       	push	r24
     2f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <honap>
     2f4:	1f 92       	push	r1
     2f6:	8f 93       	push	r24
     2f8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2fc:	8f 93       	push	r24
     2fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     302:	8f 93       	push	r24
     304:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <masodperc>
     308:	1f 92       	push	r1
     30a:	8f 93       	push	r24
     30c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <perc>
     310:	1f 92       	push	r1
     312:	8f 93       	push	r24
     314:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ora>
     318:	1f 92       	push	r1
     31a:	8f 93       	push	r24
     31c:	87 e0       	ldi	r24, 0x07	; 7
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	9f 93       	push	r25
     322:	8f 93       	push	r24
     324:	8e 01       	movw	r16, r28
     326:	0f 5f       	subi	r16, 0xFF	; 255
     328:	1f 4f       	sbci	r17, 0xFF	; 255
     32a:	1f 93       	push	r17
     32c:	0f 93       	push	r16
     32e:	38 d5       	rcall	.+2672   	; 0xda0 <sprintf>
			lcd_set_cursor_position(0);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	33 df       	rcall	.-410    	; 0x19a <lcd_set_cursor_position>
     334:	c8 01       	movw	r24, r16
			lcd_write_string(write_string);
     336:	46 df       	rcall	.-372    	; 0x1c4 <lcd_write_string>
     338:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <task_100ms>
			
			task_100ms=FALSE;
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61
     346:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <task_500ms>
		}
		if(task_500ms)
     34a:	88 23       	and	r24, r24
     34c:	09 f4       	brne	.+2      	; 0x350 <main+0x15a>
     34e:	67 cf       	rjmp	.-306    	; 0x21e <main+0x28>
     350:	0f 2e       	mov	r0, r31
     352:	f0 e0       	ldi	r31, 0x00	; 0
		{
			twi_mr_mode(&masodperc, &perc, &ora, &nap, &honap, &ev);
     354:	ef 2e       	mov	r14, r31
     356:	f1 e0       	ldi	r31, 0x01	; 1
     358:	ff 2e       	mov	r15, r31
     35a:	f0 2d       	mov	r31, r0
     35c:	02 e0       	ldi	r16, 0x02	; 2
     35e:	11 e0       	ldi	r17, 0x01	; 1
     360:	23 e0       	ldi	r18, 0x03	; 3
     362:	31 e0       	ldi	r19, 0x01	; 1
     364:	44 e0       	ldi	r20, 0x04	; 4
     366:	51 e0       	ldi	r21, 0x01	; 1
     368:	65 e0       	ldi	r22, 0x05	; 5
     36a:	71 e0       	ldi	r23, 0x01	; 1
     36c:	86 e0       	ldi	r24, 0x06	; 6
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	08 d2       	rcall	.+1040   	; 0x782 <twi_mr_mode>
     372:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <task_500ms>
			task_500ms=FALSE;
     376:	53 cf       	rjmp	.-346    	; 0x21e <main+0x28>

00000378 <__vector_16>:
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0

/******************************************************************************
* Interrupt Routines
******************************************************************************/
ISR(TIMER0_COMP_vect) //timer CTC interrupt
{
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	2f 93       	push	r18
     384:	3f 93       	push	r19
     386:	4f 93       	push	r20
     388:	5f 93       	push	r21
     38a:	6f 93       	push	r22
     38c:	7f 93       	push	r23
     38e:	8f 93       	push	r24
     390:	9f 93       	push	r25
     392:	af 93       	push	r26
     394:	bf 93       	push	r27
	timer_cnt++;
     396:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <timer_cnt>
     39a:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <timer_cnt+0x1>
     39e:	4f 5f       	subi	r20, 0xFF	; 255
     3a0:	5f 4f       	sbci	r21, 0xFF	; 255
     3a2:	50 93 1d 01 	sts	0x011D, r21	; 0x80011d <timer_cnt+0x1>
     3a6:	40 93 1c 01 	sts	0x011C, r20	; 0x80011c <timer_cnt>
	if(timer_cnt % 1 == 0) task_10ms = TRUE;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <task_10ms>
	if(timer_cnt % 10 == 0) task_100ms = TRUE;
     3b0:	9a 01       	movw	r18, r20
     3b2:	ad ec       	ldi	r26, 0xCD	; 205
     3b4:	bc ec       	ldi	r27, 0xCC	; 204
     3b6:	d1 d4       	rcall	.+2466   	; 0xd5a <__umulhisi3>
     3b8:	96 95       	lsr	r25
     3ba:	87 95       	ror	r24
     3bc:	96 95       	lsr	r25
     3be:	87 95       	ror	r24
     3c0:	96 95       	lsr	r25
     3c2:	87 95       	ror	r24
     3c4:	9c 01       	movw	r18, r24
     3c6:	22 0f       	add	r18, r18
     3c8:	33 1f       	adc	r19, r19
     3ca:	88 0f       	add	r24, r24
     3cc:	99 1f       	adc	r25, r25
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	82 0f       	add	r24, r18
     3d8:	93 1f       	adc	r25, r19
     3da:	48 17       	cp	r20, r24
     3dc:	59 07       	cpc	r21, r25
     3de:	19 f4       	brne	.+6      	; 0x3e6 <__vector_16+0x6e>
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <task_100ms>
	if(timer_cnt % 50 == 0) task_500ms =TRUE;
     3e6:	9a 01       	movw	r18, r20
     3e8:	36 95       	lsr	r19
     3ea:	27 95       	ror	r18
     3ec:	ab e7       	ldi	r26, 0x7B	; 123
     3ee:	b4 e1       	ldi	r27, 0x14	; 20
     3f0:	b4 d4       	rcall	.+2408   	; 0xd5a <__umulhisi3>
     3f2:	96 95       	lsr	r25
     3f4:	87 95       	ror	r24
     3f6:	62 e3       	ldi	r22, 0x32	; 50
     3f8:	68 9f       	mul	r22, r24
     3fa:	90 01       	movw	r18, r0
     3fc:	69 9f       	mul	r22, r25
     3fe:	30 0d       	add	r19, r0
     400:	11 24       	eor	r1, r1
     402:	42 17       	cp	r20, r18
     404:	53 07       	cpc	r21, r19
     406:	19 f4       	brne	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <task_500ms>
}
     40e:	bf 91       	pop	r27
     410:	af 91       	pop	r26
     412:	9f 91       	pop	r25
     414:	8f 91       	pop	r24
     416:	7f 91       	pop	r23
     418:	6f 91       	pop	r22
     41a:	5f 91       	pop	r21
     41c:	4f 91       	pop	r20
     41e:	3f 91       	pop	r19
     420:	2f 91       	pop	r18
     422:	0f 90       	pop	r0
     424:	0f be       	out	0x3f, r0	; 63
     426:	0f 90       	pop	r0
     428:	1f 90       	pop	r1
     42a:	18 95       	reti

0000042c <__vector_1>:

ISR(INT0_vect) //extint 0 interrput
{
     42c:	1f 92       	push	r1
     42e:	0f 92       	push	r0
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	0f 92       	push	r0
     434:	11 24       	eor	r1, r1

}
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <__vector_21>:

ISR(USART0_RX_vect)
{
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
	// char c = UDR0;
	// lcd_write_char(c);
}
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <__vector_25>:

ISR(ADC_vect)
{
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
	ad_result = ADC;
     462:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     466:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     46a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <ad_result+0x1>
     46e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ad_result>
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <timer_init>:
     480:	8d e0       	ldi	r24, 0x0D	; 13
     482:	84 bd       	out	0x24, r24	; 36
     484:	8d e4       	ldi	r24, 0x4D	; 77
     486:	87 bd       	out	0x27, r24	; 39
     488:	82 e0       	ldi	r24, 0x02	; 2
     48a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     48e:	08 95       	ret

00000490 <external_int_init>:
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	8d bb       	out	0x1d, r24	; 29
     49a:	08 95       	ret

0000049c <adc_init>:
     49c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     4a0:	ea e7       	ldi	r30, 0x7A	; 122
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	8f e8       	ldi	r24, 0x8F	; 143
     4a6:	80 83       	st	Z, r24
     4a8:	80 81       	ld	r24, Z
     4aa:	80 64       	ori	r24, 0x40	; 64
     4ac:	80 83       	st	Z, r24
     4ae:	08 95       	ret

000004b0 <decimal_to_bcd>:
* Description:		bcd error routine
* Input:			-
* Output:			-
* Notes:			-
******************************************************************************/
void bcd_error(void) {}
     4b0:	84 36       	cpi	r24, 0x64	; 100
     4b2:	c8 f4       	brcc	.+50     	; 0x4e6 <decimal_to_bcd+0x36>
     4b4:	9d ec       	ldi	r25, 0xCD	; 205
     4b6:	89 9f       	mul	r24, r25
     4b8:	91 2d       	mov	r25, r1
     4ba:	11 24       	eor	r1, r1
     4bc:	49 2f       	mov	r20, r25
     4be:	46 95       	lsr	r20
     4c0:	46 95       	lsr	r20
     4c2:	46 95       	lsr	r20
     4c4:	44 0f       	add	r20, r20
     4c6:	24 2f       	mov	r18, r20
     4c8:	22 0f       	add	r18, r18
     4ca:	22 0f       	add	r18, r18
     4cc:	42 0f       	add	r20, r18
     4ce:	84 1b       	sub	r24, r20
     4d0:	48 2f       	mov	r20, r24
     4d2:	96 95       	lsr	r25
     4d4:	96 95       	lsr	r25
     4d6:	96 95       	lsr	r25
     4d8:	80 e1       	ldi	r24, 0x10	; 16
     4da:	98 9f       	mul	r25, r24
     4dc:	90 01       	movw	r18, r0
     4de:	11 24       	eor	r1, r1
     4e0:	84 2f       	mov	r24, r20
     4e2:	82 2b       	or	r24, r18
     4e4:	08 95       	ret
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	08 95       	ret

000004ea <bcd_to_decimal>:
     4ea:	98 2f       	mov	r25, r24
     4ec:	92 95       	swap	r25
     4ee:	9f 70       	andi	r25, 0x0F	; 15
     4f0:	8f 70       	andi	r24, 0x0F	; 15
     4f2:	99 0f       	add	r25, r25
     4f4:	29 2f       	mov	r18, r25
     4f6:	22 0f       	add	r18, r18
     4f8:	22 0f       	add	r18, r18
     4fa:	92 0f       	add	r25, r18
     4fc:	89 0f       	add	r24, r25
     4fe:	08 95       	ret

00000500 <calc_day_of_week>:
* Description:		
* Input:			
* Output:			
* Notes:			
******************************************************************************/
uint8_t calc_day_of_week(uint16_t year, uint8_t month, uint8_t date) {
     500:	8f 92       	push	r8
     502:	9f 92       	push	r9
     504:	af 92       	push	r10
     506:	bf 92       	push	r11
     508:	df 92       	push	r13
     50a:	ef 92       	push	r14
     50c:	ff 92       	push	r15
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	7c 01       	movw	r14, r24
     518:	56 2f       	mov	r21, r22
     51a:	d4 2e       	mov	r13, r20
	// output is between 0...6
	// day of the week is calculated by the following formula
	uint8_t century = year/100;
     51c:	8c 01       	movw	r16, r24
     51e:	16 95       	lsr	r17
     520:	07 95       	ror	r16
     522:	16 95       	lsr	r17
     524:	07 95       	ror	r16
     526:	98 01       	movw	r18, r16
     528:	ab e7       	ldi	r26, 0x7B	; 123
     52a:	b4 e1       	ldi	r27, 0x14	; 20
     52c:	16 d4       	rcall	.+2092   	; 0xd5a <__umulhisi3>
     52e:	ec 01       	movw	r28, r24
     530:	d6 95       	lsr	r29
     532:	c7 95       	ror	r28
	uint8_t day_of_week = ((int)(date + floor(2.6*month-0.2) - 2*century + year + floor(year/4) + floor(century/4))) % 7;
     534:	65 2f       	mov	r22, r21
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	b9 d2       	rcall	.+1394   	; 0xab0 <__floatsisf>
     53e:	26 e6       	ldi	r18, 0x66	; 102
     540:	36 e6       	ldi	r19, 0x66	; 102
     542:	46 e2       	ldi	r20, 0x26	; 38
     544:	50 e4       	ldi	r21, 0x40	; 64
     546:	93 d3       	rcall	.+1830   	; 0xc6e <__mulsf3>
     548:	2d ec       	ldi	r18, 0xCD	; 205
     54a:	3c ec       	ldi	r19, 0xCC	; 204
     54c:	4c e4       	ldi	r20, 0x4C	; 76
     54e:	5e e3       	ldi	r21, 0x3E	; 62
     550:	17 d2       	rcall	.+1070   	; 0x980 <__subsf3>
     552:	e9 d2       	rcall	.+1490   	; 0xb26 <floor>
     554:	4b 01       	movw	r8, r22
     556:	5c 01       	movw	r10, r24
     558:	6d 2d       	mov	r22, r13
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	a7 d2       	rcall	.+1358   	; 0xab0 <__floatsisf>
     562:	a5 01       	movw	r20, r10
     564:	94 01       	movw	r18, r8
     566:	0d d2       	rcall	.+1050   	; 0x982 <__addsf3>
     568:	4b 01       	movw	r8, r22
     56a:	5c 01       	movw	r10, r24
     56c:	be 01       	movw	r22, r28
     56e:	77 27       	eor	r23, r23
     570:	66 0f       	add	r22, r22
     572:	77 1f       	adc	r23, r23
     574:	07 2e       	mov	r0, r23
     576:	00 0c       	add	r0, r0
     578:	88 0b       	sbc	r24, r24
     57a:	99 0b       	sbc	r25, r25
     57c:	99 d2       	rcall	.+1330   	; 0xab0 <__floatsisf>
     57e:	9b 01       	movw	r18, r22
     580:	ac 01       	movw	r20, r24
     582:	c5 01       	movw	r24, r10
     584:	b4 01       	movw	r22, r8
     586:	fc d1       	rcall	.+1016   	; 0x980 <__subsf3>
     588:	4b 01       	movw	r8, r22
     58a:	5c 01       	movw	r10, r24
     58c:	b7 01       	movw	r22, r14
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	8c d2       	rcall	.+1304   	; 0xaac <__floatunsisf>
     594:	a5 01       	movw	r20, r10
     596:	94 01       	movw	r18, r8
     598:	f4 d1       	rcall	.+1000   	; 0x982 <__addsf3>
     59a:	4b 01       	movw	r8, r22
     59c:	5c 01       	movw	r10, r24
     59e:	b8 01       	movw	r22, r16
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	83 d2       	rcall	.+1286   	; 0xaac <__floatunsisf>
     5a6:	bf d2       	rcall	.+1406   	; 0xb26 <floor>
     5a8:	9b 01       	movw	r18, r22
     5aa:	ac 01       	movw	r20, r24
     5ac:	c5 01       	movw	r24, r10
     5ae:	b4 01       	movw	r22, r8
     5b0:	e8 d1       	rcall	.+976    	; 0x982 <__addsf3>
     5b2:	4b 01       	movw	r8, r22
     5b4:	5c 01       	movw	r10, r24
     5b6:	6c 2f       	mov	r22, r28
     5b8:	66 95       	lsr	r22
     5ba:	66 95       	lsr	r22
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	76 d2       	rcall	.+1260   	; 0xab0 <__floatsisf>
     5c4:	b0 d2       	rcall	.+1376   	; 0xb26 <floor>
     5c6:	9b 01       	movw	r18, r22
     5c8:	ac 01       	movw	r20, r24
     5ca:	c5 01       	movw	r24, r10
     5cc:	b4 01       	movw	r22, r8
     5ce:	d9 d1       	rcall	.+946    	; 0x982 <__addsf3>
     5d0:	3c d2       	rcall	.+1144   	; 0xa4a <__fixsfsi>
     5d2:	cb 01       	movw	r24, r22
     5d4:	67 e0       	ldi	r22, 0x07	; 7
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	ad d3       	rcall	.+1882   	; 0xd34 <__divmodhi4>
	return day_of_week;
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	df 90       	pop	r13
     5e8:	bf 90       	pop	r11
     5ea:	af 90       	pop	r10
     5ec:	9f 90       	pop	r9
     5ee:	8f 90       	pop	r8
     5f0:	08 95       	ret

000005f2 <twi_init>:
* Output:			-
* Notes:			SCL Clock Frequency = 100 kHz
					calculated from excel
******************************************************************************/
void twi_init(void) {
	TWBR = 0x08;
     5f2:	88 e0       	ldi	r24, 0x08	; 8
     5f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR = (0<<TWPS1) | (0<<TWPS0);
     5f8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5fc:	08 95       	ret

000005fe <twi_mt_mode>:
* Input:			current edit -> either TIME or DATE
					second, minute, hour, date, month, year -> data that we want to send to the slave
* Output:			-
* Notes:			-
******************************************************************************/
void twi_mt_mode(uint8_t current_edit, uint8_t second, uint8_t minute, uint8_t hour, uint8_t date, uint8_t month, uint16_t year) {
     5fe:	cf 92       	push	r12
     600:	df 92       	push	r13
     602:	ef 92       	push	r14
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	c8 2f       	mov	r28, r24
     60e:	14 2f       	mov	r17, r20
     610:	d2 2f       	mov	r29, r18
	// Generate START Condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     612:	94 ea       	ldi	r25, 0xA4	; 164
     614:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the START condition has been transmitted
	while(!(TWCR & (1<<TWINT)));
     618:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     61c:	99 23       	and	r25, r25
     61e:	e4 f7       	brge	.-8      	; 0x618 <twi_mt_mode+0x1a>
	
	// Check the status register
	if((TWSR & 0xF8) != START) twi_error(TWSR);
     620:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     624:	98 7f       	andi	r25, 0xF8	; 248
     626:	98 30       	cpi	r25, 0x08	; 8
     628:	11 f0       	breq	.+4      	; 0x62e <twi_mt_mode+0x30>
     62a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Send slave address + write bit (0)
	TWDR = DS1307_ADR_W;
     62e:	90 ed       	ldi	r25, 0xD0	; 208
     630:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	
	// Clear TWINT to start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     634:	94 e8       	ldi	r25, 0x84	; 132
     636:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the SLA+W has been transmitted and ACK has been received
	while(!(TWCR & (1<<TWINT)));
     63a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     63e:	99 23       	and	r25, r25
     640:	e4 f7       	brge	.-8      	; 0x63a <twi_mt_mode+0x3c>
	
	// Check the status register
	if((TWSR & 0xF8) != MT_SLA_ACK) twi_error(TWSR);
     642:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     646:	98 7f       	andi	r25, 0xF8	; 248
     648:	98 31       	cpi	r25, 0x18	; 24
     64a:	11 f0       	breq	.+4      	; 0x650 <twi_mt_mode+0x52>
     64c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Send word address (which sets the register pointer on the DS1307)
	if(current_edit == TIME) {
     650:	c1 11       	cpse	r28, r1
     652:	03 c0       	rjmp	.+6      	; 0x65a <twi_mt_mode+0x5c>
		// Address of the first time register (Seconds)
		TWDR = SEC_ADR;
     654:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     658:	05 c0       	rjmp	.+10     	; 0x664 <twi_mt_mode+0x66>
	} else if(current_edit == DATE) {
     65a:	c1 30       	cpi	r28, 0x01	; 1
     65c:	19 f4       	brne	.+6      	; 0x664 <twi_mt_mode+0x66>
		// Address of the first date register (Day)
		TWDR = DAY_ADR;
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	}
	
	// Clear TWINT to start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     664:	94 e8       	ldi	r25, 0x84	; 132
     666:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the data has been transmitted and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     66a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     66e:	99 23       	and	r25, r25
     670:	e4 f7       	brge	.-8      	; 0x66a <twi_mt_mode+0x6c>
	
	// Check the status register
	if((TWSR & 0xF8) != MT_DATA_ACK) twi_error(TWSR);
     672:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     676:	98 7f       	andi	r25, 0xF8	; 248
     678:	98 32       	cpi	r25, 0x28	; 40
     67a:	11 f0       	breq	.+4      	; 0x680 <twi_mt_mode+0x82>
     67c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	

	// IMPORTANT! Data shall be written in BCD format!
	// Send the first data
	if(current_edit == TIME) {
     680:	c1 11       	cpse	r28, r1
     682:	05 c0       	rjmp	.+10     	; 0x68e <twi_mt_mode+0x90>
		// Data for the seconds register
		if(decimal_to_bcd(second) == -1) bcd_error(); // do some error routine
		TWDR = decimal_to_bcd(second) | (0<<CH);
     684:	86 2f       	mov	r24, r22
     686:	14 df       	rcall	.-472    	; 0x4b0 <decimal_to_bcd>
     688:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     68c:	08 c0       	rjmp	.+16     	; 0x69e <twi_mt_mode+0xa0>
	} else if(current_edit == DATE) {
     68e:	c1 30       	cpi	r28, 0x01	; 1
     690:	31 f4       	brne	.+12     	; 0x69e <twi_mt_mode+0xa0>
		// Data for the day register
		TWDR = calc_day_of_week(year, month, date);
     692:	40 2f       	mov	r20, r16
     694:	6e 2d       	mov	r22, r14
     696:	c6 01       	movw	r24, r12
     698:	33 df       	rcall	.-410    	; 0x500 <calc_day_of_week>
     69a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	}
	
	// Clear TWINT to start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     69e:	84 e8       	ldi	r24, 0x84	; 132
     6a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the data has been transmitted and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     6a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6a8:	88 23       	and	r24, r24
     6aa:	e4 f7       	brge	.-8      	; 0x6a4 <twi_mt_mode+0xa6>
	
	// Check the status register
	if((TWSR & 0xF8) != MT_DATA_ACK) twi_error(TWSR);
     6ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     6b0:	88 7f       	andi	r24, 0xF8	; 248
     6b2:	88 32       	cpi	r24, 0x28	; 40
     6b4:	11 f0       	breq	.+4      	; 0x6ba <twi_mt_mode+0xbc>
     6b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Send the second data
	if(current_edit == TIME) {
     6ba:	c1 11       	cpse	r28, r1
		// Data for the Minutes register
		if(decimal_to_bcd(minute) == -1) bcd_error();
		TWDR = decimal_to_bcd(minute);
     6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <twi_mt_mode+0xca>
     6be:	81 2f       	mov	r24, r17
     6c0:	f7 de       	rcall	.-530    	; 0x4b0 <decimal_to_bcd>
     6c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <twi_mt_mode+0xd6>
	} else if(current_edit == DATE) {
     6c8:	c1 30       	cpi	r28, 0x01	; 1
		// Data for the Date register
		if(decimal_to_bcd(date) == -1) bcd_error();
		TWDR = decimal_to_bcd(date);
     6ca:	21 f4       	brne	.+8      	; 0x6d4 <twi_mt_mode+0xd6>
     6cc:	80 2f       	mov	r24, r16
     6ce:	f0 de       	rcall	.-544    	; 0x4b0 <decimal_to_bcd>
     6d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	}
	
	// Clear TWINT to start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     6d4:	84 e8       	ldi	r24, 0x84	; 132
     6d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the data has been transmitted and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     6da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6de:	88 23       	and	r24, r24
     6e0:	e4 f7       	brge	.-8      	; 0x6da <twi_mt_mode+0xdc>
	
	// Check the status register
	if((TWSR & 0xF8) != MT_DATA_ACK) twi_error(TWSR);
     6e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     6e6:	88 7f       	andi	r24, 0xF8	; 248
     6e8:	88 32       	cpi	r24, 0x28	; 40
     6ea:	11 f0       	breq	.+4      	; 0x6f0 <twi_mt_mode+0xf2>
     6ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Send the third data
	if(current_edit == TIME) {
     6f0:	c1 11       	cpse	r28, r1
		// Data for the Hours register. This is the last data for TIME registers
		if(decimal_to_bcd(hour) == -1) bcd_error();
		TWDR = (0<<HOURMODE) | decimal_to_bcd(hour);
     6f2:	05 c0       	rjmp	.+10     	; 0x6fe <twi_mt_mode+0x100>
     6f4:	8d 2f       	mov	r24, r29
     6f6:	dc de       	rcall	.-584    	; 0x4b0 <decimal_to_bcd>
     6f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	} else if(current_edit == DATE) {
     6fc:	06 c0       	rjmp	.+12     	; 0x70a <twi_mt_mode+0x10c>
     6fe:	c1 30       	cpi	r28, 0x01	; 1
		// Data for the Month register
		if(decimal_to_bcd(month) == -1) bcd_error();
		TWDR = decimal_to_bcd(month);
     700:	21 f4       	brne	.+8      	; 0x70a <twi_mt_mode+0x10c>
     702:	8e 2d       	mov	r24, r14
     704:	d5 de       	rcall	.-598    	; 0x4b0 <decimal_to_bcd>
     706:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	}
	
	// Clear TWINT to start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     70a:	84 e8       	ldi	r24, 0x84	; 132
     70c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the data has been transmitted and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     710:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     714:	88 23       	and	r24, r24
     716:	e4 f7       	brge	.-8      	; 0x710 <twi_mt_mode+0x112>
	
	// Check the status register
	if((TWSR & 0xF8) != MT_DATA_ACK) twi_error(TWSR);
     718:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     71c:	88 7f       	andi	r24, 0xF8	; 248
     71e:	88 32       	cpi	r24, 0x28	; 40
     720:	11 f0       	breq	.+4      	; 0x726 <twi_mt_mode+0x128>
     722:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Send the fourth data
	if(current_edit == DATE) {
     726:	c1 30       	cpi	r28, 0x01	; 1
     728:	99 f4       	brne	.+38     	; 0x750 <twi_mt_mode+0x152>
		// Data for the Year Register (only the last two digits of the decimal 4-digit year is needed)
		uint8_t year_short = year % 100;
     72a:	96 01       	movw	r18, r12
     72c:	36 95       	lsr	r19
     72e:	27 95       	ror	r18
     730:	36 95       	lsr	r19
     732:	27 95       	ror	r18
     734:	ab e7       	ldi	r26, 0x7B	; 123
     736:	b4 e1       	ldi	r27, 0x14	; 20
     738:	10 d3       	rcall	.+1568   	; 0xd5a <__umulhisi3>
     73a:	96 95       	lsr	r25
     73c:	87 95       	ror	r24
		if(decimal_to_bcd(year_short) == -1) bcd_error();
		TWDR = decimal_to_bcd(year_short);
     73e:	3c 2d       	mov	r19, r12
     740:	24 e6       	ldi	r18, 0x64	; 100
     742:	82 9f       	mul	r24, r18
     744:	30 19       	sub	r19, r0
     746:	11 24       	eor	r1, r1
     748:	83 2f       	mov	r24, r19
     74a:	b2 de       	rcall	.-668    	; 0x4b0 <decimal_to_bcd>
     74c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     750:	84 e8       	ldi	r24, 0x84	; 132
	}
	
	// Clear TWINT to start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     752:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     756:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the data has been transmitted and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     75a:	88 23       	and	r24, r24
     75c:	e4 f7       	brge	.-8      	; 0x756 <twi_mt_mode+0x158>
     75e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Check the status register
	if((TWSR & 0xF8) != MT_DATA_ACK) twi_error(TWSR);
     762:	88 7f       	andi	r24, 0xF8	; 248
     764:	88 32       	cpi	r24, 0x28	; 40
     766:	11 f0       	breq	.+4      	; 0x76c <twi_mt_mode+0x16e>
     768:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     76c:	84 e9       	ldi	r24, 0x94	; 148
	
	// Generate STOP Condition
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     76e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     772:	df 91       	pop	r29
}
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	cf 90       	pop	r12
     780:	08 95       	ret

00000782 <twi_mr_mode>:
     782:	8f 92       	push	r8
* Description:		Two-wire Serial Interface Master Receiver mode
* Input:			*second, *minute, *hour, *date, *month, *year -> pointer adresses of the variables that we change 
* Output:			-
* Notes:			-
******************************************************************************/
void twi_mr_mode(uint8_t *second, uint8_t *minute, uint8_t *hour, uint8_t *date, uint8_t *month, uint16_t *year) {
     784:	9f 92       	push	r9
     786:	af 92       	push	r10
     788:	bf 92       	push	r11
     78a:	cf 92       	push	r12
     78c:	df 92       	push	r13
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	4c 01       	movw	r8, r24
     79c:	5b 01       	movw	r10, r22
     79e:	6a 01       	movw	r12, r20
     7a0:	e9 01       	movw	r28, r18
	// Generate START Condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     7a2:	84 ea       	ldi	r24, 0xA4	; 164
     7a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// Wait for TWINT flag set, this indicates that the START condition has been transmitted
	while(!(TWCR & (1<<TWINT)));
     7a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7ac:	88 23       	and	r24, r24
     7ae:	e4 f7       	brge	.-8      	; 0x7a8 <twi_mr_mode+0x26>
	
	// Check the status register
	if((TWSR & 0xF8) != START) twi_error(TWSR);
     7b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     7b4:	88 7f       	andi	r24, 0xF8	; 248
     7b6:	88 30       	cpi	r24, 0x08	; 8
     7b8:	11 f0       	breq	.+4      	; 0x7be <twi_mr_mode+0x3c>
     7ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// First we set up the DS1307 Register pointer to point to the first register we want to read: the seconds
	// Send slave address + write bit (0)
	TWDR = DS1307_ADR_W;
     7be:	80 ed       	ldi	r24, 0xD0	; 208
     7c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	
	// Clear TWINT to start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     7c4:	84 e8       	ldi	r24, 0x84	; 132
     7c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the SLA+W has been transmitted and ACK has been received
	while(!(TWCR & (1<<TWINT)));
     7ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7ce:	88 23       	and	r24, r24
     7d0:	e4 f7       	brge	.-8      	; 0x7ca <twi_mr_mode+0x48>
	
	// Check the status register
	if((TWSR & 0xF8) != MT_SLA_ACK) twi_error(TWSR);
     7d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     7d6:	88 7f       	andi	r24, 0xF8	; 248
     7d8:	88 31       	cpi	r24, 0x18	; 24
     7da:	11 f0       	breq	.+4      	; 0x7e0 <twi_mr_mode+0x5e>
     7dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Send word address (which sets the register pointer on the DS1307)
	TWDR = SEC_ADR;
     7e0:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	
	// Clear TWINT to start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     7e4:	84 e8       	ldi	r24, 0x84	; 132
     7e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the data has been transmitted and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     7ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7ee:	88 23       	and	r24, r24
     7f0:	e4 f7       	brge	.-8      	; 0x7ea <twi_mr_mode+0x68>
	
	// Check the status register
	if((TWSR & 0xF8) != MT_DATA_ACK) twi_error(TWSR);
     7f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     7f6:	88 7f       	andi	r24, 0xF8	; 248
     7f8:	88 32       	cpi	r24, 0x28	; 40
     7fa:	11 f0       	breq	.+4      	; 0x800 <twi_mr_mode+0x7e>
     7fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Generate REPEATED START Condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     800:	84 ea       	ldi	r24, 0xA4	; 164
     802:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the REPEATED START condition has been transmitted
	while(!(TWCR & (1<<TWINT)));
     806:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     80a:	88 23       	and	r24, r24
     80c:	e4 f7       	brge	.-8      	; 0x806 <twi_mr_mode+0x84>
	
	// Check the status register
	if((TWSR & 0xF8) != REP_START) twi_error(TWSR);
     80e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     812:	88 7f       	andi	r24, 0xF8	; 248
     814:	80 31       	cpi	r24, 0x10	; 16
     816:	11 f0       	breq	.+4      	; 0x81c <twi_mr_mode+0x9a>
     818:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Send slave address + read bit (1)
	TWDR = DS1307_ADR_R;
     81c:	81 ed       	ldi	r24, 0xD1	; 209
     81e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	
	// Clear TWINT to start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     822:	84 e8       	ldi	r24, 0x84	; 132
     824:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the SLA+W has been transmitted and ACK has been received
	while(!(TWCR & (1<<TWINT)));
     828:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     82c:	88 23       	and	r24, r24
     82e:	e4 f7       	brge	.-8      	; 0x828 <twi_mr_mode+0xa6>
	
	// Check the status register
	if((TWSR & 0xF8) != MR_SLA_ACK) twi_error(TWSR);
     830:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     834:	88 7f       	andi	r24, 0xF8	; 248
     836:	80 34       	cpi	r24, 0x40	; 64
     838:	11 f0       	breq	.+4      	; 0x83e <twi_mr_mode+0xbc>
     83a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Clear TWINT to start receiving the data and send ACK
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     83e:	84 ec       	ldi	r24, 0xC4	; 196
     840:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the data has been received and ACK has been sent
	while(!(TWCR & (1<<TWINT)));
     844:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     848:	88 23       	and	r24, r24
     84a:	e4 f7       	brge	.-8      	; 0x844 <twi_mr_mode+0xc2>
	
	// Check the status register
	if((TWSR & 0xF8) != MR_DATA_ACK) twi_error(TWSR);
     84c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     850:	88 7f       	andi	r24, 0xF8	; 248
     852:	80 35       	cpi	r24, 0x50	; 80
     854:	11 f0       	breq	.+4      	; 0x85a <twi_mr_mode+0xd8>
     856:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Read the first received data byte (seconds)
	uint8_t sec_bcd = (TWDR | (1<<CH)) ^ (1<<CH);
     85a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	*second = bcd_to_decimal(sec_bcd);
     85e:	8f 77       	andi	r24, 0x7F	; 127
     860:	44 de       	rcall	.-888    	; 0x4ea <bcd_to_decimal>
     862:	f4 01       	movw	r30, r8
     864:	80 83       	st	Z, r24
	
	// Clear TWINT to start receiving the data and send ACK
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     866:	84 ec       	ldi	r24, 0xC4	; 196
     868:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the data has been received and ACK has been sent
	while(!(TWCR & (1<<TWINT)));
     86c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     870:	88 23       	and	r24, r24
     872:	e4 f7       	brge	.-8      	; 0x86c <twi_mr_mode+0xea>
	
	// Check the status register
	if((TWSR & 0xF8) != MR_DATA_ACK) twi_error(TWSR);
     874:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     878:	88 7f       	andi	r24, 0xF8	; 248
     87a:	80 35       	cpi	r24, 0x50	; 80
     87c:	11 f0       	breq	.+4      	; 0x882 <twi_mr_mode+0x100>
     87e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Read the second received data byte (minutes)
	*minute = bcd_to_decimal(TWDR);
     882:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     886:	31 de       	rcall	.-926    	; 0x4ea <bcd_to_decimal>
     888:	f5 01       	movw	r30, r10
     88a:	80 83       	st	Z, r24
	
	// Clear TWINT to start receiving the data and send ACK
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     88c:	84 ec       	ldi	r24, 0xC4	; 196
     88e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the data has been received and ACK has been sent
	while(!(TWCR & (1<<TWINT)));
     892:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     896:	88 23       	and	r24, r24
     898:	e4 f7       	brge	.-8      	; 0x892 <twi_mr_mode+0x110>
	
	// Check the status register
	if((TWSR & 0xF8) != MR_DATA_ACK) twi_error(TWSR);
     89a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     89e:	88 7f       	andi	r24, 0xF8	; 248
     8a0:	80 35       	cpi	r24, 0x50	; 80
     8a2:	11 f0       	breq	.+4      	; 0x8a8 <twi_mr_mode+0x126>
     8a4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Read the third received data byte (hours)
	*hour = bcd_to_decimal(TWDR);
     8a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     8ac:	1e de       	rcall	.-964    	; 0x4ea <bcd_to_decimal>
     8ae:	f6 01       	movw	r30, r12
     8b0:	80 83       	st	Z, r24
	
	// Clear TWINT to start receiving the data and send ACK
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     8b2:	84 ec       	ldi	r24, 0xC4	; 196
     8b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the data has been received and ACK has been sent
	while(!(TWCR & (1<<TWINT)));
     8b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     8bc:	88 23       	and	r24, r24
     8be:	e4 f7       	brge	.-8      	; 0x8b8 <twi_mr_mode+0x136>
	
	// Check the status register
	if((TWSR & 0xF8) != MR_DATA_ACK) twi_error(TWSR);
     8c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     8c4:	88 7f       	andi	r24, 0xF8	; 248
     8c6:	80 35       	cpi	r24, 0x50	; 80
     8c8:	11 f0       	breq	.+4      	; 0x8ce <twi_mr_mode+0x14c>
     8ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Read the fourth received data byte (Day Register)
	uint8_t day = bcd_to_decimal(TWDR);
     8ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	
	// Clear TWINT to start receiving the data and send ACK
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     8d2:	84 ec       	ldi	r24, 0xC4	; 196
     8d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the data has been received and ACK has been sent
	while(!(TWCR & (1<<TWINT)));
     8d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     8dc:	88 23       	and	r24, r24
     8de:	e4 f7       	brge	.-8      	; 0x8d8 <twi_mr_mode+0x156>
	
	// Check the status register
	if((TWSR & 0xF8) != MR_DATA_ACK) twi_error(TWSR);
     8e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     8e4:	88 7f       	andi	r24, 0xF8	; 248
     8e6:	80 35       	cpi	r24, 0x50	; 80
     8e8:	11 f0       	breq	.+4      	; 0x8ee <twi_mr_mode+0x16c>
     8ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Read the fifth received data byte (Date register)
	*date = bcd_to_decimal(TWDR);
     8ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     8f2:	fb dd       	rcall	.-1034   	; 0x4ea <bcd_to_decimal>
     8f4:	88 83       	st	Y, r24
	
	// Clear TWINT to start receiving the data and send ACK
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     8f6:	84 ec       	ldi	r24, 0xC4	; 196
     8f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the data has been received and ACK has been sent
	while(!(TWCR & (1<<TWINT)));
     8fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     900:	88 23       	and	r24, r24
     902:	e4 f7       	brge	.-8      	; 0x8fc <twi_mr_mode+0x17a>
	
	// Check the status register
	if((TWSR & 0xF8) != MR_DATA_ACK) twi_error(TWSR);
     904:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     908:	88 7f       	andi	r24, 0xF8	; 248
     90a:	80 35       	cpi	r24, 0x50	; 80
     90c:	11 f0       	breq	.+4      	; 0x912 <twi_mr_mode+0x190>
     90e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Read the sixth received data byte (Month register)
	*month = bcd_to_decimal(TWDR);
     912:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     916:	e9 dd       	rcall	.-1070   	; 0x4ea <bcd_to_decimal>
     918:	f8 01       	movw	r30, r16
     91a:	80 83       	st	Z, r24
	
	// Clear TWINT to start receiving the data and send NACK (since the last byte will be received)
	TWCR = (1<<TWINT) | (1<<TWEN);
     91c:	84 e8       	ldi	r24, 0x84	; 132
     91e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// Wait for TWINT flag set, this indicates that the data has been received and NACK has been sent
	while(!(TWCR & (1<<TWINT)));
     922:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     926:	88 23       	and	r24, r24
     928:	e4 f7       	brge	.-8      	; 0x922 <twi_mr_mode+0x1a0>
	
	// Check the status register
	if((TWSR & 0xF8) != MR_DATA_NACK) twi_error(TWSR);
     92a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     92e:	88 7f       	andi	r24, 0xF8	; 248
     930:	88 35       	cpi	r24, 0x58	; 88
     932:	11 f0       	breq	.+4      	; 0x938 <twi_mr_mode+0x1b6>
     934:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	// Read the seventh (last) data byte (Year register)
	*year = bcd_to_decimal(TWDR) + 2000;
     938:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     93c:	d6 dd       	rcall	.-1108   	; 0x4ea <bcd_to_decimal>
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	80 53       	subi	r24, 0x30	; 48
     942:	98 4f       	sbci	r25, 0xF8	; 248
     944:	f7 01       	movw	r30, r14
     946:	91 83       	std	Z+1, r25	; 0x01
     948:	80 83       	st	Z, r24
	
	// Generate STOP Condition
	TWCR = (1<<TWINT) |(1<<TWSTO) | (1<<TWEN);
     94a:	84 e9       	ldi	r24, 0x94	; 148
     94c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	ff 90       	pop	r15
     95a:	ef 90       	pop	r14
     95c:	df 90       	pop	r13
     95e:	cf 90       	pop	r12
     960:	bf 90       	pop	r11
     962:	af 90       	pop	r10
     964:	9f 90       	pop	r9
     966:	8f 90       	pop	r8
     968:	08 95       	ret

0000096a <uart0_init>:
     96a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     96e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     972:	8e e0       	ldi	r24, 0x0E	; 14
     974:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     978:	88 e9       	ldi	r24, 0x98	; 152
     97a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     97e:	08 95       	ret

00000980 <__subsf3>:
     980:	50 58       	subi	r21, 0x80	; 128

00000982 <__addsf3>:
     982:	bb 27       	eor	r27, r27
     984:	aa 27       	eor	r26, r26
     986:	0e d0       	rcall	.+28     	; 0x9a4 <__addsf3x>
     988:	21 c1       	rjmp	.+578    	; 0xbcc <__fp_round>
     98a:	12 d1       	rcall	.+548    	; 0xbb0 <__fp_pscA>
     98c:	30 f0       	brcs	.+12     	; 0x99a <__addsf3+0x18>
     98e:	17 d1       	rcall	.+558    	; 0xbbe <__fp_pscB>
     990:	20 f0       	brcs	.+8      	; 0x99a <__addsf3+0x18>
     992:	31 f4       	brne	.+12     	; 0x9a0 <__addsf3+0x1e>
     994:	9f 3f       	cpi	r25, 0xFF	; 255
     996:	11 f4       	brne	.+4      	; 0x99c <__addsf3+0x1a>
     998:	1e f4       	brtc	.+6      	; 0x9a0 <__addsf3+0x1e>
     99a:	07 c1       	rjmp	.+526    	; 0xbaa <__fp_nan>
     99c:	0e f4       	brtc	.+2      	; 0x9a0 <__addsf3+0x1e>
     99e:	e0 95       	com	r30
     9a0:	e7 fb       	bst	r30, 7
     9a2:	d4 c0       	rjmp	.+424    	; 0xb4c <__fp_inf>

000009a4 <__addsf3x>:
     9a4:	e9 2f       	mov	r30, r25
     9a6:	23 d1       	rcall	.+582    	; 0xbee <__fp_split3>
     9a8:	80 f3       	brcs	.-32     	; 0x98a <__addsf3+0x8>
     9aa:	ba 17       	cp	r27, r26
     9ac:	62 07       	cpc	r22, r18
     9ae:	73 07       	cpc	r23, r19
     9b0:	84 07       	cpc	r24, r20
     9b2:	95 07       	cpc	r25, r21
     9b4:	18 f0       	brcs	.+6      	; 0x9bc <__addsf3x+0x18>
     9b6:	71 f4       	brne	.+28     	; 0x9d4 <__addsf3x+0x30>
     9b8:	9e f5       	brtc	.+102    	; 0xa20 <__addsf3x+0x7c>
     9ba:	52 c1       	rjmp	.+676    	; 0xc60 <__fp_zero>
     9bc:	0e f4       	brtc	.+2      	; 0x9c0 <__addsf3x+0x1c>
     9be:	e0 95       	com	r30
     9c0:	0b 2e       	mov	r0, r27
     9c2:	ba 2f       	mov	r27, r26
     9c4:	a0 2d       	mov	r26, r0
     9c6:	0b 01       	movw	r0, r22
     9c8:	b9 01       	movw	r22, r18
     9ca:	90 01       	movw	r18, r0
     9cc:	0c 01       	movw	r0, r24
     9ce:	ca 01       	movw	r24, r20
     9d0:	a0 01       	movw	r20, r0
     9d2:	11 24       	eor	r1, r1
     9d4:	ff 27       	eor	r31, r31
     9d6:	59 1b       	sub	r21, r25
     9d8:	99 f0       	breq	.+38     	; 0xa00 <__addsf3x+0x5c>
     9da:	59 3f       	cpi	r21, 0xF9	; 249
     9dc:	50 f4       	brcc	.+20     	; 0x9f2 <__addsf3x+0x4e>
     9de:	50 3e       	cpi	r21, 0xE0	; 224
     9e0:	68 f1       	brcs	.+90     	; 0xa3c <__addsf3x+0x98>
     9e2:	1a 16       	cp	r1, r26
     9e4:	f0 40       	sbci	r31, 0x00	; 0
     9e6:	a2 2f       	mov	r26, r18
     9e8:	23 2f       	mov	r18, r19
     9ea:	34 2f       	mov	r19, r20
     9ec:	44 27       	eor	r20, r20
     9ee:	58 5f       	subi	r21, 0xF8	; 248
     9f0:	f3 cf       	rjmp	.-26     	; 0x9d8 <__addsf3x+0x34>
     9f2:	46 95       	lsr	r20
     9f4:	37 95       	ror	r19
     9f6:	27 95       	ror	r18
     9f8:	a7 95       	ror	r26
     9fa:	f0 40       	sbci	r31, 0x00	; 0
     9fc:	53 95       	inc	r21
     9fe:	c9 f7       	brne	.-14     	; 0x9f2 <__addsf3x+0x4e>
     a00:	7e f4       	brtc	.+30     	; 0xa20 <__addsf3x+0x7c>
     a02:	1f 16       	cp	r1, r31
     a04:	ba 0b       	sbc	r27, r26
     a06:	62 0b       	sbc	r22, r18
     a08:	73 0b       	sbc	r23, r19
     a0a:	84 0b       	sbc	r24, r20
     a0c:	ba f0       	brmi	.+46     	; 0xa3c <__addsf3x+0x98>
     a0e:	91 50       	subi	r25, 0x01	; 1
     a10:	a1 f0       	breq	.+40     	; 0xa3a <__addsf3x+0x96>
     a12:	ff 0f       	add	r31, r31
     a14:	bb 1f       	adc	r27, r27
     a16:	66 1f       	adc	r22, r22
     a18:	77 1f       	adc	r23, r23
     a1a:	88 1f       	adc	r24, r24
     a1c:	c2 f7       	brpl	.-16     	; 0xa0e <__addsf3x+0x6a>
     a1e:	0e c0       	rjmp	.+28     	; 0xa3c <__addsf3x+0x98>
     a20:	ba 0f       	add	r27, r26
     a22:	62 1f       	adc	r22, r18
     a24:	73 1f       	adc	r23, r19
     a26:	84 1f       	adc	r24, r20
     a28:	48 f4       	brcc	.+18     	; 0xa3c <__addsf3x+0x98>
     a2a:	87 95       	ror	r24
     a2c:	77 95       	ror	r23
     a2e:	67 95       	ror	r22
     a30:	b7 95       	ror	r27
     a32:	f7 95       	ror	r31
     a34:	9e 3f       	cpi	r25, 0xFE	; 254
     a36:	08 f0       	brcs	.+2      	; 0xa3a <__addsf3x+0x96>
     a38:	b3 cf       	rjmp	.-154    	; 0x9a0 <__addsf3+0x1e>
     a3a:	93 95       	inc	r25
     a3c:	88 0f       	add	r24, r24
     a3e:	08 f0       	brcs	.+2      	; 0xa42 <__addsf3x+0x9e>
     a40:	99 27       	eor	r25, r25
     a42:	ee 0f       	add	r30, r30
     a44:	97 95       	ror	r25
     a46:	87 95       	ror	r24
     a48:	08 95       	ret

00000a4a <__fixsfsi>:
     a4a:	04 d0       	rcall	.+8      	; 0xa54 <__fixunssfsi>
     a4c:	68 94       	set
     a4e:	b1 11       	cpse	r27, r1
     a50:	08 c1       	rjmp	.+528    	; 0xc62 <__fp_szero>
     a52:	08 95       	ret

00000a54 <__fixunssfsi>:
     a54:	d4 d0       	rcall	.+424    	; 0xbfe <__fp_splitA>
     a56:	88 f0       	brcs	.+34     	; 0xa7a <__fixunssfsi+0x26>
     a58:	9f 57       	subi	r25, 0x7F	; 127
     a5a:	90 f0       	brcs	.+36     	; 0xa80 <__fixunssfsi+0x2c>
     a5c:	b9 2f       	mov	r27, r25
     a5e:	99 27       	eor	r25, r25
     a60:	b7 51       	subi	r27, 0x17	; 23
     a62:	a0 f0       	brcs	.+40     	; 0xa8c <__fixunssfsi+0x38>
     a64:	d1 f0       	breq	.+52     	; 0xa9a <__fixunssfsi+0x46>
     a66:	66 0f       	add	r22, r22
     a68:	77 1f       	adc	r23, r23
     a6a:	88 1f       	adc	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	1a f0       	brmi	.+6      	; 0xa76 <__fixunssfsi+0x22>
     a70:	ba 95       	dec	r27
     a72:	c9 f7       	brne	.-14     	; 0xa66 <__fixunssfsi+0x12>
     a74:	12 c0       	rjmp	.+36     	; 0xa9a <__fixunssfsi+0x46>
     a76:	b1 30       	cpi	r27, 0x01	; 1
     a78:	81 f0       	breq	.+32     	; 0xa9a <__fixunssfsi+0x46>
     a7a:	f2 d0       	rcall	.+484    	; 0xc60 <__fp_zero>
     a7c:	b1 e0       	ldi	r27, 0x01	; 1
     a7e:	08 95       	ret
     a80:	ef c0       	rjmp	.+478    	; 0xc60 <__fp_zero>
     a82:	67 2f       	mov	r22, r23
     a84:	78 2f       	mov	r23, r24
     a86:	88 27       	eor	r24, r24
     a88:	b8 5f       	subi	r27, 0xF8	; 248
     a8a:	39 f0       	breq	.+14     	; 0xa9a <__fixunssfsi+0x46>
     a8c:	b9 3f       	cpi	r27, 0xF9	; 249
     a8e:	cc f3       	brlt	.-14     	; 0xa82 <__fixunssfsi+0x2e>
     a90:	86 95       	lsr	r24
     a92:	77 95       	ror	r23
     a94:	67 95       	ror	r22
     a96:	b3 95       	inc	r27
     a98:	d9 f7       	brne	.-10     	; 0xa90 <__fixunssfsi+0x3c>
     a9a:	3e f4       	brtc	.+14     	; 0xaaa <__fixunssfsi+0x56>
     a9c:	90 95       	com	r25
     a9e:	80 95       	com	r24
     aa0:	70 95       	com	r23
     aa2:	61 95       	neg	r22
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	8f 4f       	sbci	r24, 0xFF	; 255
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	08 95       	ret

00000aac <__floatunsisf>:
     aac:	e8 94       	clt
     aae:	09 c0       	rjmp	.+18     	; 0xac2 <__floatsisf+0x12>

00000ab0 <__floatsisf>:
     ab0:	97 fb       	bst	r25, 7
     ab2:	3e f4       	brtc	.+14     	; 0xac2 <__floatsisf+0x12>
     ab4:	90 95       	com	r25
     ab6:	80 95       	com	r24
     ab8:	70 95       	com	r23
     aba:	61 95       	neg	r22
     abc:	7f 4f       	sbci	r23, 0xFF	; 255
     abe:	8f 4f       	sbci	r24, 0xFF	; 255
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	99 23       	and	r25, r25
     ac4:	a9 f0       	breq	.+42     	; 0xaf0 <__floatsisf+0x40>
     ac6:	f9 2f       	mov	r31, r25
     ac8:	96 e9       	ldi	r25, 0x96	; 150
     aca:	bb 27       	eor	r27, r27
     acc:	93 95       	inc	r25
     ace:	f6 95       	lsr	r31
     ad0:	87 95       	ror	r24
     ad2:	77 95       	ror	r23
     ad4:	67 95       	ror	r22
     ad6:	b7 95       	ror	r27
     ad8:	f1 11       	cpse	r31, r1
     ada:	f8 cf       	rjmp	.-16     	; 0xacc <__floatsisf+0x1c>
     adc:	fa f4       	brpl	.+62     	; 0xb1c <__floatsisf+0x6c>
     ade:	bb 0f       	add	r27, r27
     ae0:	11 f4       	brne	.+4      	; 0xae6 <__floatsisf+0x36>
     ae2:	60 ff       	sbrs	r22, 0
     ae4:	1b c0       	rjmp	.+54     	; 0xb1c <__floatsisf+0x6c>
     ae6:	6f 5f       	subi	r22, 0xFF	; 255
     ae8:	7f 4f       	sbci	r23, 0xFF	; 255
     aea:	8f 4f       	sbci	r24, 0xFF	; 255
     aec:	9f 4f       	sbci	r25, 0xFF	; 255
     aee:	16 c0       	rjmp	.+44     	; 0xb1c <__floatsisf+0x6c>
     af0:	88 23       	and	r24, r24
     af2:	11 f0       	breq	.+4      	; 0xaf8 <__floatsisf+0x48>
     af4:	96 e9       	ldi	r25, 0x96	; 150
     af6:	11 c0       	rjmp	.+34     	; 0xb1a <__floatsisf+0x6a>
     af8:	77 23       	and	r23, r23
     afa:	21 f0       	breq	.+8      	; 0xb04 <__floatsisf+0x54>
     afc:	9e e8       	ldi	r25, 0x8E	; 142
     afe:	87 2f       	mov	r24, r23
     b00:	76 2f       	mov	r23, r22
     b02:	05 c0       	rjmp	.+10     	; 0xb0e <__floatsisf+0x5e>
     b04:	66 23       	and	r22, r22
     b06:	71 f0       	breq	.+28     	; 0xb24 <__floatsisf+0x74>
     b08:	96 e8       	ldi	r25, 0x86	; 134
     b0a:	86 2f       	mov	r24, r22
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	2a f0       	brmi	.+10     	; 0xb1c <__floatsisf+0x6c>
     b12:	9a 95       	dec	r25
     b14:	66 0f       	add	r22, r22
     b16:	77 1f       	adc	r23, r23
     b18:	88 1f       	adc	r24, r24
     b1a:	da f7       	brpl	.-10     	; 0xb12 <__floatsisf+0x62>
     b1c:	88 0f       	add	r24, r24
     b1e:	96 95       	lsr	r25
     b20:	87 95       	ror	r24
     b22:	97 f9       	bld	r25, 7
     b24:	08 95       	ret

00000b26 <floor>:
     b26:	85 d0       	rcall	.+266    	; 0xc32 <__fp_trunc>
     b28:	80 f0       	brcs	.+32     	; 0xb4a <floor+0x24>
     b2a:	9f 37       	cpi	r25, 0x7F	; 127
     b2c:	40 f4       	brcc	.+16     	; 0xb3e <floor+0x18>
     b2e:	91 11       	cpse	r25, r1
     b30:	0e f0       	brts	.+2      	; 0xb34 <floor+0xe>
     b32:	97 c0       	rjmp	.+302    	; 0xc62 <__fp_szero>
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	80 e8       	ldi	r24, 0x80	; 128
     b3a:	9f eb       	ldi	r25, 0xBF	; 191
     b3c:	08 95       	ret
     b3e:	26 f4       	brtc	.+8      	; 0xb48 <floor+0x22>
     b40:	1b 16       	cp	r1, r27
     b42:	61 1d       	adc	r22, r1
     b44:	71 1d       	adc	r23, r1
     b46:	81 1d       	adc	r24, r1
     b48:	07 c0       	rjmp	.+14     	; 0xb58 <__fp_mintl>
     b4a:	21 c0       	rjmp	.+66     	; 0xb8e <__fp_mpack>

00000b4c <__fp_inf>:
     b4c:	97 f9       	bld	r25, 7
     b4e:	9f 67       	ori	r25, 0x7F	; 127
     b50:	80 e8       	ldi	r24, 0x80	; 128
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	08 95       	ret

00000b58 <__fp_mintl>:
     b58:	88 23       	and	r24, r24
     b5a:	71 f4       	brne	.+28     	; 0xb78 <__fp_mintl+0x20>
     b5c:	77 23       	and	r23, r23
     b5e:	21 f0       	breq	.+8      	; 0xb68 <__fp_mintl+0x10>
     b60:	98 50       	subi	r25, 0x08	; 8
     b62:	87 2b       	or	r24, r23
     b64:	76 2f       	mov	r23, r22
     b66:	07 c0       	rjmp	.+14     	; 0xb76 <__fp_mintl+0x1e>
     b68:	66 23       	and	r22, r22
     b6a:	11 f4       	brne	.+4      	; 0xb70 <__fp_mintl+0x18>
     b6c:	99 27       	eor	r25, r25
     b6e:	0d c0       	rjmp	.+26     	; 0xb8a <__fp_mintl+0x32>
     b70:	90 51       	subi	r25, 0x10	; 16
     b72:	86 2b       	or	r24, r22
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	2a f0       	brmi	.+10     	; 0xb84 <__fp_mintl+0x2c>
     b7a:	9a 95       	dec	r25
     b7c:	66 0f       	add	r22, r22
     b7e:	77 1f       	adc	r23, r23
     b80:	88 1f       	adc	r24, r24
     b82:	da f7       	brpl	.-10     	; 0xb7a <__fp_mintl+0x22>
     b84:	88 0f       	add	r24, r24
     b86:	96 95       	lsr	r25
     b88:	87 95       	ror	r24
     b8a:	97 f9       	bld	r25, 7
     b8c:	08 95       	ret

00000b8e <__fp_mpack>:
     b8e:	9f 3f       	cpi	r25, 0xFF	; 255
     b90:	31 f0       	breq	.+12     	; 0xb9e <__fp_mpack_finite+0xc>

00000b92 <__fp_mpack_finite>:
     b92:	91 50       	subi	r25, 0x01	; 1
     b94:	20 f4       	brcc	.+8      	; 0xb9e <__fp_mpack_finite+0xc>
     b96:	87 95       	ror	r24
     b98:	77 95       	ror	r23
     b9a:	67 95       	ror	r22
     b9c:	b7 95       	ror	r27
     b9e:	88 0f       	add	r24, r24
     ba0:	91 1d       	adc	r25, r1
     ba2:	96 95       	lsr	r25
     ba4:	87 95       	ror	r24
     ba6:	97 f9       	bld	r25, 7
     ba8:	08 95       	ret

00000baa <__fp_nan>:
     baa:	9f ef       	ldi	r25, 0xFF	; 255
     bac:	80 ec       	ldi	r24, 0xC0	; 192
     bae:	08 95       	ret

00000bb0 <__fp_pscA>:
     bb0:	00 24       	eor	r0, r0
     bb2:	0a 94       	dec	r0
     bb4:	16 16       	cp	r1, r22
     bb6:	17 06       	cpc	r1, r23
     bb8:	18 06       	cpc	r1, r24
     bba:	09 06       	cpc	r0, r25
     bbc:	08 95       	ret

00000bbe <__fp_pscB>:
     bbe:	00 24       	eor	r0, r0
     bc0:	0a 94       	dec	r0
     bc2:	12 16       	cp	r1, r18
     bc4:	13 06       	cpc	r1, r19
     bc6:	14 06       	cpc	r1, r20
     bc8:	05 06       	cpc	r0, r21
     bca:	08 95       	ret

00000bcc <__fp_round>:
     bcc:	09 2e       	mov	r0, r25
     bce:	03 94       	inc	r0
     bd0:	00 0c       	add	r0, r0
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <__fp_round+0xc>
     bd4:	88 23       	and	r24, r24
     bd6:	52 f0       	brmi	.+20     	; 0xbec <__fp_round+0x20>
     bd8:	bb 0f       	add	r27, r27
     bda:	40 f4       	brcc	.+16     	; 0xbec <__fp_round+0x20>
     bdc:	bf 2b       	or	r27, r31
     bde:	11 f4       	brne	.+4      	; 0xbe4 <__fp_round+0x18>
     be0:	60 ff       	sbrs	r22, 0
     be2:	04 c0       	rjmp	.+8      	; 0xbec <__fp_round+0x20>
     be4:	6f 5f       	subi	r22, 0xFF	; 255
     be6:	7f 4f       	sbci	r23, 0xFF	; 255
     be8:	8f 4f       	sbci	r24, 0xFF	; 255
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	08 95       	ret

00000bee <__fp_split3>:
     bee:	57 fd       	sbrc	r21, 7
     bf0:	90 58       	subi	r25, 0x80	; 128
     bf2:	44 0f       	add	r20, r20
     bf4:	55 1f       	adc	r21, r21
     bf6:	59 f0       	breq	.+22     	; 0xc0e <__fp_splitA+0x10>
     bf8:	5f 3f       	cpi	r21, 0xFF	; 255
     bfa:	71 f0       	breq	.+28     	; 0xc18 <__fp_splitA+0x1a>
     bfc:	47 95       	ror	r20

00000bfe <__fp_splitA>:
     bfe:	88 0f       	add	r24, r24
     c00:	97 fb       	bst	r25, 7
     c02:	99 1f       	adc	r25, r25
     c04:	61 f0       	breq	.+24     	; 0xc1e <__fp_splitA+0x20>
     c06:	9f 3f       	cpi	r25, 0xFF	; 255
     c08:	79 f0       	breq	.+30     	; 0xc28 <__fp_splitA+0x2a>
     c0a:	87 95       	ror	r24
     c0c:	08 95       	ret
     c0e:	12 16       	cp	r1, r18
     c10:	13 06       	cpc	r1, r19
     c12:	14 06       	cpc	r1, r20
     c14:	55 1f       	adc	r21, r21
     c16:	f2 cf       	rjmp	.-28     	; 0xbfc <__fp_split3+0xe>
     c18:	46 95       	lsr	r20
     c1a:	f1 df       	rcall	.-30     	; 0xbfe <__fp_splitA>
     c1c:	08 c0       	rjmp	.+16     	; 0xc2e <__fp_splitA+0x30>
     c1e:	16 16       	cp	r1, r22
     c20:	17 06       	cpc	r1, r23
     c22:	18 06       	cpc	r1, r24
     c24:	99 1f       	adc	r25, r25
     c26:	f1 cf       	rjmp	.-30     	; 0xc0a <__fp_splitA+0xc>
     c28:	86 95       	lsr	r24
     c2a:	71 05       	cpc	r23, r1
     c2c:	61 05       	cpc	r22, r1
     c2e:	08 94       	sec
     c30:	08 95       	ret

00000c32 <__fp_trunc>:
     c32:	e5 df       	rcall	.-54     	; 0xbfe <__fp_splitA>
     c34:	a0 f0       	brcs	.+40     	; 0xc5e <__fp_trunc+0x2c>
     c36:	be e7       	ldi	r27, 0x7E	; 126
     c38:	b9 17       	cp	r27, r25
     c3a:	88 f4       	brcc	.+34     	; 0xc5e <__fp_trunc+0x2c>
     c3c:	bb 27       	eor	r27, r27
     c3e:	9f 38       	cpi	r25, 0x8F	; 143
     c40:	60 f4       	brcc	.+24     	; 0xc5a <__fp_trunc+0x28>
     c42:	16 16       	cp	r1, r22
     c44:	b1 1d       	adc	r27, r1
     c46:	67 2f       	mov	r22, r23
     c48:	78 2f       	mov	r23, r24
     c4a:	88 27       	eor	r24, r24
     c4c:	98 5f       	subi	r25, 0xF8	; 248
     c4e:	f7 cf       	rjmp	.-18     	; 0xc3e <__fp_trunc+0xc>
     c50:	86 95       	lsr	r24
     c52:	77 95       	ror	r23
     c54:	67 95       	ror	r22
     c56:	b1 1d       	adc	r27, r1
     c58:	93 95       	inc	r25
     c5a:	96 39       	cpi	r25, 0x96	; 150
     c5c:	c8 f3       	brcs	.-14     	; 0xc50 <__fp_trunc+0x1e>
     c5e:	08 95       	ret

00000c60 <__fp_zero>:
     c60:	e8 94       	clt

00000c62 <__fp_szero>:
     c62:	bb 27       	eor	r27, r27
     c64:	66 27       	eor	r22, r22
     c66:	77 27       	eor	r23, r23
     c68:	cb 01       	movw	r24, r22
     c6a:	97 f9       	bld	r25, 7
     c6c:	08 95       	ret

00000c6e <__mulsf3>:
     c6e:	0b d0       	rcall	.+22     	; 0xc86 <__mulsf3x>
     c70:	ad cf       	rjmp	.-166    	; 0xbcc <__fp_round>
     c72:	9e df       	rcall	.-196    	; 0xbb0 <__fp_pscA>
     c74:	28 f0       	brcs	.+10     	; 0xc80 <__mulsf3+0x12>
     c76:	a3 df       	rcall	.-186    	; 0xbbe <__fp_pscB>
     c78:	18 f0       	brcs	.+6      	; 0xc80 <__mulsf3+0x12>
     c7a:	95 23       	and	r25, r21
     c7c:	09 f0       	breq	.+2      	; 0xc80 <__mulsf3+0x12>
     c7e:	66 cf       	rjmp	.-308    	; 0xb4c <__fp_inf>
     c80:	94 cf       	rjmp	.-216    	; 0xbaa <__fp_nan>
     c82:	11 24       	eor	r1, r1
     c84:	ee cf       	rjmp	.-36     	; 0xc62 <__fp_szero>

00000c86 <__mulsf3x>:
     c86:	b3 df       	rcall	.-154    	; 0xbee <__fp_split3>
     c88:	a0 f3       	brcs	.-24     	; 0xc72 <__mulsf3+0x4>

00000c8a <__mulsf3_pse>:
     c8a:	95 9f       	mul	r25, r21
     c8c:	d1 f3       	breq	.-12     	; 0xc82 <__mulsf3+0x14>
     c8e:	95 0f       	add	r25, r21
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	55 1f       	adc	r21, r21
     c94:	62 9f       	mul	r22, r18
     c96:	f0 01       	movw	r30, r0
     c98:	72 9f       	mul	r23, r18
     c9a:	bb 27       	eor	r27, r27
     c9c:	f0 0d       	add	r31, r0
     c9e:	b1 1d       	adc	r27, r1
     ca0:	63 9f       	mul	r22, r19
     ca2:	aa 27       	eor	r26, r26
     ca4:	f0 0d       	add	r31, r0
     ca6:	b1 1d       	adc	r27, r1
     ca8:	aa 1f       	adc	r26, r26
     caa:	64 9f       	mul	r22, r20
     cac:	66 27       	eor	r22, r22
     cae:	b0 0d       	add	r27, r0
     cb0:	a1 1d       	adc	r26, r1
     cb2:	66 1f       	adc	r22, r22
     cb4:	82 9f       	mul	r24, r18
     cb6:	22 27       	eor	r18, r18
     cb8:	b0 0d       	add	r27, r0
     cba:	a1 1d       	adc	r26, r1
     cbc:	62 1f       	adc	r22, r18
     cbe:	73 9f       	mul	r23, r19
     cc0:	b0 0d       	add	r27, r0
     cc2:	a1 1d       	adc	r26, r1
     cc4:	62 1f       	adc	r22, r18
     cc6:	83 9f       	mul	r24, r19
     cc8:	a0 0d       	add	r26, r0
     cca:	61 1d       	adc	r22, r1
     ccc:	22 1f       	adc	r18, r18
     cce:	74 9f       	mul	r23, r20
     cd0:	33 27       	eor	r19, r19
     cd2:	a0 0d       	add	r26, r0
     cd4:	61 1d       	adc	r22, r1
     cd6:	23 1f       	adc	r18, r19
     cd8:	84 9f       	mul	r24, r20
     cda:	60 0d       	add	r22, r0
     cdc:	21 1d       	adc	r18, r1
     cde:	82 2f       	mov	r24, r18
     ce0:	76 2f       	mov	r23, r22
     ce2:	6a 2f       	mov	r22, r26
     ce4:	11 24       	eor	r1, r1
     ce6:	9f 57       	subi	r25, 0x7F	; 127
     ce8:	50 40       	sbci	r21, 0x00	; 0
     cea:	8a f0       	brmi	.+34     	; 0xd0e <__mulsf3_pse+0x84>
     cec:	e1 f0       	breq	.+56     	; 0xd26 <__mulsf3_pse+0x9c>
     cee:	88 23       	and	r24, r24
     cf0:	4a f0       	brmi	.+18     	; 0xd04 <__mulsf3_pse+0x7a>
     cf2:	ee 0f       	add	r30, r30
     cf4:	ff 1f       	adc	r31, r31
     cf6:	bb 1f       	adc	r27, r27
     cf8:	66 1f       	adc	r22, r22
     cfa:	77 1f       	adc	r23, r23
     cfc:	88 1f       	adc	r24, r24
     cfe:	91 50       	subi	r25, 0x01	; 1
     d00:	50 40       	sbci	r21, 0x00	; 0
     d02:	a9 f7       	brne	.-22     	; 0xcee <__mulsf3_pse+0x64>
     d04:	9e 3f       	cpi	r25, 0xFE	; 254
     d06:	51 05       	cpc	r21, r1
     d08:	70 f0       	brcs	.+28     	; 0xd26 <__mulsf3_pse+0x9c>
     d0a:	20 cf       	rjmp	.-448    	; 0xb4c <__fp_inf>
     d0c:	aa cf       	rjmp	.-172    	; 0xc62 <__fp_szero>
     d0e:	5f 3f       	cpi	r21, 0xFF	; 255
     d10:	ec f3       	brlt	.-6      	; 0xd0c <__mulsf3_pse+0x82>
     d12:	98 3e       	cpi	r25, 0xE8	; 232
     d14:	dc f3       	brlt	.-10     	; 0xd0c <__mulsf3_pse+0x82>
     d16:	86 95       	lsr	r24
     d18:	77 95       	ror	r23
     d1a:	67 95       	ror	r22
     d1c:	b7 95       	ror	r27
     d1e:	f7 95       	ror	r31
     d20:	e7 95       	ror	r30
     d22:	9f 5f       	subi	r25, 0xFF	; 255
     d24:	c1 f7       	brne	.-16     	; 0xd16 <__mulsf3_pse+0x8c>
     d26:	fe 2b       	or	r31, r30
     d28:	88 0f       	add	r24, r24
     d2a:	91 1d       	adc	r25, r1
     d2c:	96 95       	lsr	r25
     d2e:	87 95       	ror	r24
     d30:	97 f9       	bld	r25, 7
     d32:	08 95       	ret

00000d34 <__divmodhi4>:
     d34:	97 fb       	bst	r25, 7
     d36:	07 2e       	mov	r0, r23
     d38:	16 f4       	brtc	.+4      	; 0xd3e <__divmodhi4+0xa>
     d3a:	00 94       	com	r0
     d3c:	06 d0       	rcall	.+12     	; 0xd4a <__divmodhi4_neg1>
     d3e:	77 fd       	sbrc	r23, 7
     d40:	08 d0       	rcall	.+16     	; 0xd52 <__divmodhi4_neg2>
     d42:	1a d0       	rcall	.+52     	; 0xd78 <__udivmodhi4>
     d44:	07 fc       	sbrc	r0, 7
     d46:	05 d0       	rcall	.+10     	; 0xd52 <__divmodhi4_neg2>
     d48:	3e f4       	brtc	.+14     	; 0xd58 <__divmodhi4_exit>

00000d4a <__divmodhi4_neg1>:
     d4a:	90 95       	com	r25
     d4c:	81 95       	neg	r24
     d4e:	9f 4f       	sbci	r25, 0xFF	; 255
     d50:	08 95       	ret

00000d52 <__divmodhi4_neg2>:
     d52:	70 95       	com	r23
     d54:	61 95       	neg	r22
     d56:	7f 4f       	sbci	r23, 0xFF	; 255

00000d58 <__divmodhi4_exit>:
     d58:	08 95       	ret

00000d5a <__umulhisi3>:
     d5a:	a2 9f       	mul	r26, r18
     d5c:	b0 01       	movw	r22, r0
     d5e:	b3 9f       	mul	r27, r19
     d60:	c0 01       	movw	r24, r0
     d62:	a3 9f       	mul	r26, r19
     d64:	70 0d       	add	r23, r0
     d66:	81 1d       	adc	r24, r1
     d68:	11 24       	eor	r1, r1
     d6a:	91 1d       	adc	r25, r1
     d6c:	b2 9f       	mul	r27, r18
     d6e:	70 0d       	add	r23, r0
     d70:	81 1d       	adc	r24, r1
     d72:	11 24       	eor	r1, r1
     d74:	91 1d       	adc	r25, r1
     d76:	08 95       	ret

00000d78 <__udivmodhi4>:
     d78:	aa 1b       	sub	r26, r26
     d7a:	bb 1b       	sub	r27, r27
     d7c:	51 e1       	ldi	r21, 0x11	; 17
     d7e:	07 c0       	rjmp	.+14     	; 0xd8e <__udivmodhi4_ep>

00000d80 <__udivmodhi4_loop>:
     d80:	aa 1f       	adc	r26, r26
     d82:	bb 1f       	adc	r27, r27
     d84:	a6 17       	cp	r26, r22
     d86:	b7 07       	cpc	r27, r23
     d88:	10 f0       	brcs	.+4      	; 0xd8e <__udivmodhi4_ep>
     d8a:	a6 1b       	sub	r26, r22
     d8c:	b7 0b       	sbc	r27, r23

00000d8e <__udivmodhi4_ep>:
     d8e:	88 1f       	adc	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	5a 95       	dec	r21
     d94:	a9 f7       	brne	.-22     	; 0xd80 <__udivmodhi4_loop>
     d96:	80 95       	com	r24
     d98:	90 95       	com	r25
     d9a:	bc 01       	movw	r22, r24
     d9c:	cd 01       	movw	r24, r26
     d9e:	08 95       	ret

00000da0 <sprintf>:
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	2e 97       	sbiw	r28, 0x0e	; 14
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	0d 89       	ldd	r16, Y+21	; 0x15
     dba:	1e 89       	ldd	r17, Y+22	; 0x16
     dbc:	86 e0       	ldi	r24, 0x06	; 6
     dbe:	8c 83       	std	Y+4, r24	; 0x04
     dc0:	1a 83       	std	Y+2, r17	; 0x02
     dc2:	09 83       	std	Y+1, r16	; 0x01
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	9f e7       	ldi	r25, 0x7F	; 127
     dc8:	9e 83       	std	Y+6, r25	; 0x06
     dca:	8d 83       	std	Y+5, r24	; 0x05
     dcc:	ae 01       	movw	r20, r28
     dce:	47 5e       	subi	r20, 0xE7	; 231
     dd0:	5f 4f       	sbci	r21, 0xFF	; 255
     dd2:	6f 89       	ldd	r22, Y+23	; 0x17
     dd4:	78 8d       	ldd	r23, Y+24	; 0x18
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	10 d0       	rcall	.+32     	; 0xdfc <vfprintf>
     ddc:	ef 81       	ldd	r30, Y+7	; 0x07
     dde:	f8 85       	ldd	r31, Y+8	; 0x08
     de0:	e0 0f       	add	r30, r16
     de2:	f1 1f       	adc	r31, r17
     de4:	10 82       	st	Z, r1
     de6:	2e 96       	adiw	r28, 0x0e	; 14
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	08 95       	ret

00000dfc <vfprintf>:
     dfc:	2f 92       	push	r2
     dfe:	3f 92       	push	r3
     e00:	4f 92       	push	r4
     e02:	5f 92       	push	r5
     e04:	6f 92       	push	r6
     e06:	7f 92       	push	r7
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	2b 97       	sbiw	r28, 0x0b	; 11
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	6c 01       	movw	r12, r24
     e32:	7b 01       	movw	r14, r22
     e34:	8a 01       	movw	r16, r20
     e36:	fc 01       	movw	r30, r24
     e38:	17 82       	std	Z+7, r1	; 0x07
     e3a:	16 82       	std	Z+6, r1	; 0x06
     e3c:	83 81       	ldd	r24, Z+3	; 0x03
     e3e:	81 ff       	sbrs	r24, 1
     e40:	bf c1       	rjmp	.+894    	; 0x11c0 <__stack+0xc1>
     e42:	ce 01       	movw	r24, r28
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	3c 01       	movw	r6, r24
     e48:	f6 01       	movw	r30, r12
     e4a:	93 81       	ldd	r25, Z+3	; 0x03
     e4c:	f7 01       	movw	r30, r14
     e4e:	93 fd       	sbrc	r25, 3
     e50:	85 91       	lpm	r24, Z+
     e52:	93 ff       	sbrs	r25, 3
     e54:	81 91       	ld	r24, Z+
     e56:	7f 01       	movw	r14, r30
     e58:	88 23       	and	r24, r24
     e5a:	09 f4       	brne	.+2      	; 0xe5e <vfprintf+0x62>
     e5c:	ad c1       	rjmp	.+858    	; 0x11b8 <__stack+0xb9>
     e5e:	85 32       	cpi	r24, 0x25	; 37
     e60:	39 f4       	brne	.+14     	; 0xe70 <vfprintf+0x74>
     e62:	93 fd       	sbrc	r25, 3
     e64:	85 91       	lpm	r24, Z+
     e66:	93 ff       	sbrs	r25, 3
     e68:	81 91       	ld	r24, Z+
     e6a:	7f 01       	movw	r14, r30
     e6c:	85 32       	cpi	r24, 0x25	; 37
     e6e:	21 f4       	brne	.+8      	; 0xe78 <vfprintf+0x7c>
     e70:	b6 01       	movw	r22, r12
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	d6 d1       	rcall	.+940    	; 0x1222 <fputc>
     e76:	e8 cf       	rjmp	.-48     	; 0xe48 <vfprintf+0x4c>
     e78:	91 2c       	mov	r9, r1
     e7a:	21 2c       	mov	r2, r1
     e7c:	31 2c       	mov	r3, r1
     e7e:	ff e1       	ldi	r31, 0x1F	; 31
     e80:	f3 15       	cp	r31, r3
     e82:	d8 f0       	brcs	.+54     	; 0xeba <vfprintf+0xbe>
     e84:	8b 32       	cpi	r24, 0x2B	; 43
     e86:	79 f0       	breq	.+30     	; 0xea6 <vfprintf+0xaa>
     e88:	38 f4       	brcc	.+14     	; 0xe98 <vfprintf+0x9c>
     e8a:	80 32       	cpi	r24, 0x20	; 32
     e8c:	79 f0       	breq	.+30     	; 0xeac <vfprintf+0xb0>
     e8e:	83 32       	cpi	r24, 0x23	; 35
     e90:	a1 f4       	brne	.+40     	; 0xeba <vfprintf+0xbe>
     e92:	23 2d       	mov	r18, r3
     e94:	20 61       	ori	r18, 0x10	; 16
     e96:	1d c0       	rjmp	.+58     	; 0xed2 <vfprintf+0xd6>
     e98:	8d 32       	cpi	r24, 0x2D	; 45
     e9a:	61 f0       	breq	.+24     	; 0xeb4 <vfprintf+0xb8>
     e9c:	80 33       	cpi	r24, 0x30	; 48
     e9e:	69 f4       	brne	.+26     	; 0xeba <vfprintf+0xbe>
     ea0:	23 2d       	mov	r18, r3
     ea2:	21 60       	ori	r18, 0x01	; 1
     ea4:	16 c0       	rjmp	.+44     	; 0xed2 <vfprintf+0xd6>
     ea6:	83 2d       	mov	r24, r3
     ea8:	82 60       	ori	r24, 0x02	; 2
     eaa:	38 2e       	mov	r3, r24
     eac:	e3 2d       	mov	r30, r3
     eae:	e4 60       	ori	r30, 0x04	; 4
     eb0:	3e 2e       	mov	r3, r30
     eb2:	2a c0       	rjmp	.+84     	; 0xf08 <vfprintf+0x10c>
     eb4:	f3 2d       	mov	r31, r3
     eb6:	f8 60       	ori	r31, 0x08	; 8
     eb8:	1d c0       	rjmp	.+58     	; 0xef4 <vfprintf+0xf8>
     eba:	37 fc       	sbrc	r3, 7
     ebc:	2d c0       	rjmp	.+90     	; 0xf18 <vfprintf+0x11c>
     ebe:	20 ed       	ldi	r18, 0xD0	; 208
     ec0:	28 0f       	add	r18, r24
     ec2:	2a 30       	cpi	r18, 0x0A	; 10
     ec4:	40 f0       	brcs	.+16     	; 0xed6 <vfprintf+0xda>
     ec6:	8e 32       	cpi	r24, 0x2E	; 46
     ec8:	b9 f4       	brne	.+46     	; 0xef8 <vfprintf+0xfc>
     eca:	36 fc       	sbrc	r3, 6
     ecc:	75 c1       	rjmp	.+746    	; 0x11b8 <__stack+0xb9>
     ece:	23 2d       	mov	r18, r3
     ed0:	20 64       	ori	r18, 0x40	; 64
     ed2:	32 2e       	mov	r3, r18
     ed4:	19 c0       	rjmp	.+50     	; 0xf08 <vfprintf+0x10c>
     ed6:	36 fe       	sbrs	r3, 6
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <vfprintf+0xea>
     eda:	8a e0       	ldi	r24, 0x0A	; 10
     edc:	98 9e       	mul	r9, r24
     ede:	20 0d       	add	r18, r0
     ee0:	11 24       	eor	r1, r1
     ee2:	92 2e       	mov	r9, r18
     ee4:	11 c0       	rjmp	.+34     	; 0xf08 <vfprintf+0x10c>
     ee6:	ea e0       	ldi	r30, 0x0A	; 10
     ee8:	2e 9e       	mul	r2, r30
     eea:	20 0d       	add	r18, r0
     eec:	11 24       	eor	r1, r1
     eee:	22 2e       	mov	r2, r18
     ef0:	f3 2d       	mov	r31, r3
     ef2:	f0 62       	ori	r31, 0x20	; 32
     ef4:	3f 2e       	mov	r3, r31
     ef6:	08 c0       	rjmp	.+16     	; 0xf08 <vfprintf+0x10c>
     ef8:	8c 36       	cpi	r24, 0x6C	; 108
     efa:	21 f4       	brne	.+8      	; 0xf04 <vfprintf+0x108>
     efc:	83 2d       	mov	r24, r3
     efe:	80 68       	ori	r24, 0x80	; 128
     f00:	38 2e       	mov	r3, r24
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <vfprintf+0x10c>
     f04:	88 36       	cpi	r24, 0x68	; 104
     f06:	41 f4       	brne	.+16     	; 0xf18 <vfprintf+0x11c>
     f08:	f7 01       	movw	r30, r14
     f0a:	93 fd       	sbrc	r25, 3
     f0c:	85 91       	lpm	r24, Z+
     f0e:	93 ff       	sbrs	r25, 3
     f10:	81 91       	ld	r24, Z+
     f12:	7f 01       	movw	r14, r30
     f14:	81 11       	cpse	r24, r1
     f16:	b3 cf       	rjmp	.-154    	; 0xe7e <vfprintf+0x82>
     f18:	98 2f       	mov	r25, r24
     f1a:	9f 7d       	andi	r25, 0xDF	; 223
     f1c:	95 54       	subi	r25, 0x45	; 69
     f1e:	93 30       	cpi	r25, 0x03	; 3
     f20:	28 f4       	brcc	.+10     	; 0xf2c <vfprintf+0x130>
     f22:	0c 5f       	subi	r16, 0xFC	; 252
     f24:	1f 4f       	sbci	r17, 0xFF	; 255
     f26:	9f e3       	ldi	r25, 0x3F	; 63
     f28:	99 83       	std	Y+1, r25	; 0x01
     f2a:	0d c0       	rjmp	.+26     	; 0xf46 <vfprintf+0x14a>
     f2c:	83 36       	cpi	r24, 0x63	; 99
     f2e:	31 f0       	breq	.+12     	; 0xf3c <vfprintf+0x140>
     f30:	83 37       	cpi	r24, 0x73	; 115
     f32:	71 f0       	breq	.+28     	; 0xf50 <vfprintf+0x154>
     f34:	83 35       	cpi	r24, 0x53	; 83
     f36:	09 f0       	breq	.+2      	; 0xf3a <vfprintf+0x13e>
     f38:	55 c0       	rjmp	.+170    	; 0xfe4 <vfprintf+0x1e8>
     f3a:	20 c0       	rjmp	.+64     	; 0xf7c <vfprintf+0x180>
     f3c:	f8 01       	movw	r30, r16
     f3e:	80 81       	ld	r24, Z
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	0e 5f       	subi	r16, 0xFE	; 254
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	88 24       	eor	r8, r8
     f48:	83 94       	inc	r8
     f4a:	91 2c       	mov	r9, r1
     f4c:	53 01       	movw	r10, r6
     f4e:	12 c0       	rjmp	.+36     	; 0xf74 <vfprintf+0x178>
     f50:	28 01       	movw	r4, r16
     f52:	f2 e0       	ldi	r31, 0x02	; 2
     f54:	4f 0e       	add	r4, r31
     f56:	51 1c       	adc	r5, r1
     f58:	f8 01       	movw	r30, r16
     f5a:	a0 80       	ld	r10, Z
     f5c:	b1 80       	ldd	r11, Z+1	; 0x01
     f5e:	36 fe       	sbrs	r3, 6
     f60:	03 c0       	rjmp	.+6      	; 0xf68 <vfprintf+0x16c>
     f62:	69 2d       	mov	r22, r9
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <vfprintf+0x170>
     f68:	6f ef       	ldi	r22, 0xFF	; 255
     f6a:	7f ef       	ldi	r23, 0xFF	; 255
     f6c:	c5 01       	movw	r24, r10
     f6e:	4e d1       	rcall	.+668    	; 0x120c <strnlen>
     f70:	4c 01       	movw	r8, r24
     f72:	82 01       	movw	r16, r4
     f74:	f3 2d       	mov	r31, r3
     f76:	ff 77       	andi	r31, 0x7F	; 127
     f78:	3f 2e       	mov	r3, r31
     f7a:	15 c0       	rjmp	.+42     	; 0xfa6 <vfprintf+0x1aa>
     f7c:	28 01       	movw	r4, r16
     f7e:	22 e0       	ldi	r18, 0x02	; 2
     f80:	42 0e       	add	r4, r18
     f82:	51 1c       	adc	r5, r1
     f84:	f8 01       	movw	r30, r16
     f86:	a0 80       	ld	r10, Z
     f88:	b1 80       	ldd	r11, Z+1	; 0x01
     f8a:	36 fe       	sbrs	r3, 6
     f8c:	03 c0       	rjmp	.+6      	; 0xf94 <vfprintf+0x198>
     f8e:	69 2d       	mov	r22, r9
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <vfprintf+0x19c>
     f94:	6f ef       	ldi	r22, 0xFF	; 255
     f96:	7f ef       	ldi	r23, 0xFF	; 255
     f98:	c5 01       	movw	r24, r10
     f9a:	2d d1       	rcall	.+602    	; 0x11f6 <strnlen_P>
     f9c:	4c 01       	movw	r8, r24
     f9e:	f3 2d       	mov	r31, r3
     fa0:	f0 68       	ori	r31, 0x80	; 128
     fa2:	3f 2e       	mov	r3, r31
     fa4:	82 01       	movw	r16, r4
     fa6:	33 fc       	sbrc	r3, 3
     fa8:	19 c0       	rjmp	.+50     	; 0xfdc <vfprintf+0x1e0>
     faa:	82 2d       	mov	r24, r2
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	88 16       	cp	r8, r24
     fb0:	99 06       	cpc	r9, r25
     fb2:	a0 f4       	brcc	.+40     	; 0xfdc <vfprintf+0x1e0>
     fb4:	b6 01       	movw	r22, r12
     fb6:	80 e2       	ldi	r24, 0x20	; 32
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	33 d1       	rcall	.+614    	; 0x1222 <fputc>
     fbc:	2a 94       	dec	r2
     fbe:	f5 cf       	rjmp	.-22     	; 0xfaa <vfprintf+0x1ae>
     fc0:	f5 01       	movw	r30, r10
     fc2:	37 fc       	sbrc	r3, 7
     fc4:	85 91       	lpm	r24, Z+
     fc6:	37 fe       	sbrs	r3, 7
     fc8:	81 91       	ld	r24, Z+
     fca:	5f 01       	movw	r10, r30
     fcc:	b6 01       	movw	r22, r12
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	28 d1       	rcall	.+592    	; 0x1222 <fputc>
     fd2:	21 10       	cpse	r2, r1
     fd4:	2a 94       	dec	r2
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	82 1a       	sub	r8, r18
     fda:	91 08       	sbc	r9, r1
     fdc:	81 14       	cp	r8, r1
     fde:	91 04       	cpc	r9, r1
     fe0:	79 f7       	brne	.-34     	; 0xfc0 <vfprintf+0x1c4>
     fe2:	e1 c0       	rjmp	.+450    	; 0x11a6 <__stack+0xa7>
     fe4:	84 36       	cpi	r24, 0x64	; 100
     fe6:	11 f0       	breq	.+4      	; 0xfec <vfprintf+0x1f0>
     fe8:	89 36       	cpi	r24, 0x69	; 105
     fea:	39 f5       	brne	.+78     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
     fec:	f8 01       	movw	r30, r16
     fee:	37 fe       	sbrs	r3, 7
     ff0:	07 c0       	rjmp	.+14     	; 0x1000 <__DATA_REGION_LENGTH__>
     ff2:	60 81       	ld	r22, Z
     ff4:	71 81       	ldd	r23, Z+1	; 0x01
     ff6:	82 81       	ldd	r24, Z+2	; 0x02
     ff8:	93 81       	ldd	r25, Z+3	; 0x03
     ffa:	0c 5f       	subi	r16, 0xFC	; 252
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	08 c0       	rjmp	.+16     	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
    1000:	60 81       	ld	r22, Z
    1002:	71 81       	ldd	r23, Z+1	; 0x01
    1004:	07 2e       	mov	r0, r23
    1006:	00 0c       	add	r0, r0
    1008:	88 0b       	sbc	r24, r24
    100a:	99 0b       	sbc	r25, r25
    100c:	0e 5f       	subi	r16, 0xFE	; 254
    100e:	1f 4f       	sbci	r17, 0xFF	; 255
    1010:	f3 2d       	mov	r31, r3
    1012:	ff 76       	andi	r31, 0x6F	; 111
    1014:	3f 2e       	mov	r3, r31
    1016:	97 ff       	sbrs	r25, 7
    1018:	09 c0       	rjmp	.+18     	; 0x102c <__DATA_REGION_LENGTH__+0x2c>
    101a:	90 95       	com	r25
    101c:	80 95       	com	r24
    101e:	70 95       	com	r23
    1020:	61 95       	neg	r22
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	8f 4f       	sbci	r24, 0xFF	; 255
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	f0 68       	ori	r31, 0x80	; 128
    102a:	3f 2e       	mov	r3, r31
    102c:	2a e0       	ldi	r18, 0x0A	; 10
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	a3 01       	movw	r20, r6
    1032:	33 d1       	rcall	.+614    	; 0x129a <__ultoa_invert>
    1034:	88 2e       	mov	r8, r24
    1036:	86 18       	sub	r8, r6
    1038:	44 c0       	rjmp	.+136    	; 0x10c2 <__DATA_REGION_LENGTH__+0xc2>
    103a:	85 37       	cpi	r24, 0x75	; 117
    103c:	31 f4       	brne	.+12     	; 0x104a <__DATA_REGION_LENGTH__+0x4a>
    103e:	23 2d       	mov	r18, r3
    1040:	2f 7e       	andi	r18, 0xEF	; 239
    1042:	b2 2e       	mov	r11, r18
    1044:	2a e0       	ldi	r18, 0x0A	; 10
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	25 c0       	rjmp	.+74     	; 0x1094 <__DATA_REGION_LENGTH__+0x94>
    104a:	93 2d       	mov	r25, r3
    104c:	99 7f       	andi	r25, 0xF9	; 249
    104e:	b9 2e       	mov	r11, r25
    1050:	8f 36       	cpi	r24, 0x6F	; 111
    1052:	c1 f0       	breq	.+48     	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
    1054:	18 f4       	brcc	.+6      	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
    1056:	88 35       	cpi	r24, 0x58	; 88
    1058:	79 f0       	breq	.+30     	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
    105a:	ae c0       	rjmp	.+348    	; 0x11b8 <__stack+0xb9>
    105c:	80 37       	cpi	r24, 0x70	; 112
    105e:	19 f0       	breq	.+6      	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
    1060:	88 37       	cpi	r24, 0x78	; 120
    1062:	21 f0       	breq	.+8      	; 0x106c <__DATA_REGION_LENGTH__+0x6c>
    1064:	a9 c0       	rjmp	.+338    	; 0x11b8 <__stack+0xb9>
    1066:	e9 2f       	mov	r30, r25
    1068:	e0 61       	ori	r30, 0x10	; 16
    106a:	be 2e       	mov	r11, r30
    106c:	b4 fe       	sbrs	r11, 4
    106e:	0d c0       	rjmp	.+26     	; 0x108a <__DATA_REGION_LENGTH__+0x8a>
    1070:	fb 2d       	mov	r31, r11
    1072:	f4 60       	ori	r31, 0x04	; 4
    1074:	bf 2e       	mov	r11, r31
    1076:	09 c0       	rjmp	.+18     	; 0x108a <__DATA_REGION_LENGTH__+0x8a>
    1078:	34 fe       	sbrs	r3, 4
    107a:	0a c0       	rjmp	.+20     	; 0x1090 <__DATA_REGION_LENGTH__+0x90>
    107c:	29 2f       	mov	r18, r25
    107e:	26 60       	ori	r18, 0x06	; 6
    1080:	b2 2e       	mov	r11, r18
    1082:	06 c0       	rjmp	.+12     	; 0x1090 <__DATA_REGION_LENGTH__+0x90>
    1084:	28 e0       	ldi	r18, 0x08	; 8
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	05 c0       	rjmp	.+10     	; 0x1094 <__DATA_REGION_LENGTH__+0x94>
    108a:	20 e1       	ldi	r18, 0x10	; 16
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <__DATA_REGION_LENGTH__+0x94>
    1090:	20 e1       	ldi	r18, 0x10	; 16
    1092:	32 e0       	ldi	r19, 0x02	; 2
    1094:	f8 01       	movw	r30, r16
    1096:	b7 fe       	sbrs	r11, 7
    1098:	07 c0       	rjmp	.+14     	; 0x10a8 <__DATA_REGION_LENGTH__+0xa8>
    109a:	60 81       	ld	r22, Z
    109c:	71 81       	ldd	r23, Z+1	; 0x01
    109e:	82 81       	ldd	r24, Z+2	; 0x02
    10a0:	93 81       	ldd	r25, Z+3	; 0x03
    10a2:	0c 5f       	subi	r16, 0xFC	; 252
    10a4:	1f 4f       	sbci	r17, 0xFF	; 255
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <__DATA_REGION_LENGTH__+0xb4>
    10a8:	60 81       	ld	r22, Z
    10aa:	71 81       	ldd	r23, Z+1	; 0x01
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 5f       	subi	r16, 0xFE	; 254
    10b2:	1f 4f       	sbci	r17, 0xFF	; 255
    10b4:	a3 01       	movw	r20, r6
    10b6:	f1 d0       	rcall	.+482    	; 0x129a <__ultoa_invert>
    10b8:	88 2e       	mov	r8, r24
    10ba:	86 18       	sub	r8, r6
    10bc:	fb 2d       	mov	r31, r11
    10be:	ff 77       	andi	r31, 0x7F	; 127
    10c0:	3f 2e       	mov	r3, r31
    10c2:	36 fe       	sbrs	r3, 6
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <__DATA_REGION_LENGTH__+0xe0>
    10c6:	23 2d       	mov	r18, r3
    10c8:	2e 7f       	andi	r18, 0xFE	; 254
    10ca:	a2 2e       	mov	r10, r18
    10cc:	89 14       	cp	r8, r9
    10ce:	58 f4       	brcc	.+22     	; 0x10e6 <__DATA_REGION_LENGTH__+0xe6>
    10d0:	34 fe       	sbrs	r3, 4
    10d2:	0b c0       	rjmp	.+22     	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    10d4:	32 fc       	sbrc	r3, 2
    10d6:	09 c0       	rjmp	.+18     	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    10d8:	83 2d       	mov	r24, r3
    10da:	8e 7e       	andi	r24, 0xEE	; 238
    10dc:	a8 2e       	mov	r10, r24
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    10e0:	b8 2c       	mov	r11, r8
    10e2:	a3 2c       	mov	r10, r3
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <__DATA_REGION_LENGTH__+0xec>
    10e6:	b8 2c       	mov	r11, r8
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <__DATA_REGION_LENGTH__+0xec>
    10ea:	b9 2c       	mov	r11, r9
    10ec:	a4 fe       	sbrs	r10, 4
    10ee:	0f c0       	rjmp	.+30     	; 0x110e <__stack+0xf>
    10f0:	fe 01       	movw	r30, r28
    10f2:	e8 0d       	add	r30, r8
    10f4:	f1 1d       	adc	r31, r1
    10f6:	80 81       	ld	r24, Z
    10f8:	80 33       	cpi	r24, 0x30	; 48
    10fa:	21 f4       	brne	.+8      	; 0x1104 <__stack+0x5>
    10fc:	9a 2d       	mov	r25, r10
    10fe:	99 7e       	andi	r25, 0xE9	; 233
    1100:	a9 2e       	mov	r10, r25
    1102:	09 c0       	rjmp	.+18     	; 0x1116 <__stack+0x17>
    1104:	a2 fe       	sbrs	r10, 2
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <__stack+0x15>
    1108:	b3 94       	inc	r11
    110a:	b3 94       	inc	r11
    110c:	04 c0       	rjmp	.+8      	; 0x1116 <__stack+0x17>
    110e:	8a 2d       	mov	r24, r10
    1110:	86 78       	andi	r24, 0x86	; 134
    1112:	09 f0       	breq	.+2      	; 0x1116 <__stack+0x17>
    1114:	b3 94       	inc	r11
    1116:	a3 fc       	sbrc	r10, 3
    1118:	10 c0       	rjmp	.+32     	; 0x113a <__stack+0x3b>
    111a:	a0 fe       	sbrs	r10, 0
    111c:	06 c0       	rjmp	.+12     	; 0x112a <__stack+0x2b>
    111e:	b2 14       	cp	r11, r2
    1120:	80 f4       	brcc	.+32     	; 0x1142 <__stack+0x43>
    1122:	28 0c       	add	r2, r8
    1124:	92 2c       	mov	r9, r2
    1126:	9b 18       	sub	r9, r11
    1128:	0d c0       	rjmp	.+26     	; 0x1144 <__stack+0x45>
    112a:	b2 14       	cp	r11, r2
    112c:	58 f4       	brcc	.+22     	; 0x1144 <__stack+0x45>
    112e:	b6 01       	movw	r22, r12
    1130:	80 e2       	ldi	r24, 0x20	; 32
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	76 d0       	rcall	.+236    	; 0x1222 <fputc>
    1136:	b3 94       	inc	r11
    1138:	f8 cf       	rjmp	.-16     	; 0x112a <__stack+0x2b>
    113a:	b2 14       	cp	r11, r2
    113c:	18 f4       	brcc	.+6      	; 0x1144 <__stack+0x45>
    113e:	2b 18       	sub	r2, r11
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <__stack+0x47>
    1142:	98 2c       	mov	r9, r8
    1144:	21 2c       	mov	r2, r1
    1146:	a4 fe       	sbrs	r10, 4
    1148:	0f c0       	rjmp	.+30     	; 0x1168 <__stack+0x69>
    114a:	b6 01       	movw	r22, r12
    114c:	80 e3       	ldi	r24, 0x30	; 48
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	68 d0       	rcall	.+208    	; 0x1222 <fputc>
    1152:	a2 fe       	sbrs	r10, 2
    1154:	16 c0       	rjmp	.+44     	; 0x1182 <__stack+0x83>
    1156:	a1 fc       	sbrc	r10, 1
    1158:	03 c0       	rjmp	.+6      	; 0x1160 <__stack+0x61>
    115a:	88 e7       	ldi	r24, 0x78	; 120
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <__stack+0x65>
    1160:	88 e5       	ldi	r24, 0x58	; 88
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	b6 01       	movw	r22, r12
    1166:	0c c0       	rjmp	.+24     	; 0x1180 <__stack+0x81>
    1168:	8a 2d       	mov	r24, r10
    116a:	86 78       	andi	r24, 0x86	; 134
    116c:	51 f0       	breq	.+20     	; 0x1182 <__stack+0x83>
    116e:	a1 fe       	sbrs	r10, 1
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <__stack+0x77>
    1172:	8b e2       	ldi	r24, 0x2B	; 43
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <__stack+0x79>
    1176:	80 e2       	ldi	r24, 0x20	; 32
    1178:	a7 fc       	sbrc	r10, 7
    117a:	8d e2       	ldi	r24, 0x2D	; 45
    117c:	b6 01       	movw	r22, r12
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	50 d0       	rcall	.+160    	; 0x1222 <fputc>
    1182:	89 14       	cp	r8, r9
    1184:	30 f4       	brcc	.+12     	; 0x1192 <__stack+0x93>
    1186:	b6 01       	movw	r22, r12
    1188:	80 e3       	ldi	r24, 0x30	; 48
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	4a d0       	rcall	.+148    	; 0x1222 <fputc>
    118e:	9a 94       	dec	r9
    1190:	f8 cf       	rjmp	.-16     	; 0x1182 <__stack+0x83>
    1192:	8a 94       	dec	r8
    1194:	f3 01       	movw	r30, r6
    1196:	e8 0d       	add	r30, r8
    1198:	f1 1d       	adc	r31, r1
    119a:	80 81       	ld	r24, Z
    119c:	b6 01       	movw	r22, r12
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	40 d0       	rcall	.+128    	; 0x1222 <fputc>
    11a2:	81 10       	cpse	r8, r1
    11a4:	f6 cf       	rjmp	.-20     	; 0x1192 <__stack+0x93>
    11a6:	22 20       	and	r2, r2
    11a8:	09 f4       	brne	.+2      	; 0x11ac <__stack+0xad>
    11aa:	4e ce       	rjmp	.-868    	; 0xe48 <vfprintf+0x4c>
    11ac:	b6 01       	movw	r22, r12
    11ae:	80 e2       	ldi	r24, 0x20	; 32
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	37 d0       	rcall	.+110    	; 0x1222 <fputc>
    11b4:	2a 94       	dec	r2
    11b6:	f7 cf       	rjmp	.-18     	; 0x11a6 <__stack+0xa7>
    11b8:	f6 01       	movw	r30, r12
    11ba:	86 81       	ldd	r24, Z+6	; 0x06
    11bc:	97 81       	ldd	r25, Z+7	; 0x07
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <__stack+0xc5>
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	9f ef       	ldi	r25, 0xFF	; 255
    11c4:	2b 96       	adiw	r28, 0x0b	; 11
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	df 90       	pop	r13
    11de:	cf 90       	pop	r12
    11e0:	bf 90       	pop	r11
    11e2:	af 90       	pop	r10
    11e4:	9f 90       	pop	r9
    11e6:	8f 90       	pop	r8
    11e8:	7f 90       	pop	r7
    11ea:	6f 90       	pop	r6
    11ec:	5f 90       	pop	r5
    11ee:	4f 90       	pop	r4
    11f0:	3f 90       	pop	r3
    11f2:	2f 90       	pop	r2
    11f4:	08 95       	ret

000011f6 <strnlen_P>:
    11f6:	fc 01       	movw	r30, r24
    11f8:	05 90       	lpm	r0, Z+
    11fa:	61 50       	subi	r22, 0x01	; 1
    11fc:	70 40       	sbci	r23, 0x00	; 0
    11fe:	01 10       	cpse	r0, r1
    1200:	d8 f7       	brcc	.-10     	; 0x11f8 <strnlen_P+0x2>
    1202:	80 95       	com	r24
    1204:	90 95       	com	r25
    1206:	8e 0f       	add	r24, r30
    1208:	9f 1f       	adc	r25, r31
    120a:	08 95       	ret

0000120c <strnlen>:
    120c:	fc 01       	movw	r30, r24
    120e:	61 50       	subi	r22, 0x01	; 1
    1210:	70 40       	sbci	r23, 0x00	; 0
    1212:	01 90       	ld	r0, Z+
    1214:	01 10       	cpse	r0, r1
    1216:	d8 f7       	brcc	.-10     	; 0x120e <strnlen+0x2>
    1218:	80 95       	com	r24
    121a:	90 95       	com	r25
    121c:	8e 0f       	add	r24, r30
    121e:	9f 1f       	adc	r25, r31
    1220:	08 95       	ret

00001222 <fputc>:
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	fb 01       	movw	r30, r22
    122c:	23 81       	ldd	r18, Z+3	; 0x03
    122e:	21 fd       	sbrc	r18, 1
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <fputc+0x16>
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	9f ef       	ldi	r25, 0xFF	; 255
    1236:	2c c0       	rjmp	.+88     	; 0x1290 <fputc+0x6e>
    1238:	22 ff       	sbrs	r18, 2
    123a:	16 c0       	rjmp	.+44     	; 0x1268 <fputc+0x46>
    123c:	46 81       	ldd	r20, Z+6	; 0x06
    123e:	57 81       	ldd	r21, Z+7	; 0x07
    1240:	24 81       	ldd	r18, Z+4	; 0x04
    1242:	35 81       	ldd	r19, Z+5	; 0x05
    1244:	42 17       	cp	r20, r18
    1246:	53 07       	cpc	r21, r19
    1248:	44 f4       	brge	.+16     	; 0x125a <fputc+0x38>
    124a:	a0 81       	ld	r26, Z
    124c:	b1 81       	ldd	r27, Z+1	; 0x01
    124e:	9d 01       	movw	r18, r26
    1250:	2f 5f       	subi	r18, 0xFF	; 255
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	31 83       	std	Z+1, r19	; 0x01
    1256:	20 83       	st	Z, r18
    1258:	8c 93       	st	X, r24
    125a:	26 81       	ldd	r18, Z+6	; 0x06
    125c:	37 81       	ldd	r19, Z+7	; 0x07
    125e:	2f 5f       	subi	r18, 0xFF	; 255
    1260:	3f 4f       	sbci	r19, 0xFF	; 255
    1262:	37 83       	std	Z+7, r19	; 0x07
    1264:	26 83       	std	Z+6, r18	; 0x06
    1266:	14 c0       	rjmp	.+40     	; 0x1290 <fputc+0x6e>
    1268:	8b 01       	movw	r16, r22
    126a:	ec 01       	movw	r28, r24
    126c:	fb 01       	movw	r30, r22
    126e:	00 84       	ldd	r0, Z+8	; 0x08
    1270:	f1 85       	ldd	r31, Z+9	; 0x09
    1272:	e0 2d       	mov	r30, r0
    1274:	09 95       	icall
    1276:	89 2b       	or	r24, r25
    1278:	e1 f6       	brne	.-72     	; 0x1232 <fputc+0x10>
    127a:	d8 01       	movw	r26, r16
    127c:	16 96       	adiw	r26, 0x06	; 6
    127e:	8d 91       	ld	r24, X+
    1280:	9c 91       	ld	r25, X
    1282:	17 97       	sbiw	r26, 0x07	; 7
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	17 96       	adiw	r26, 0x07	; 7
    1288:	9c 93       	st	X, r25
    128a:	8e 93       	st	-X, r24
    128c:	16 97       	sbiw	r26, 0x06	; 6
    128e:	ce 01       	movw	r24, r28
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	08 95       	ret

0000129a <__ultoa_invert>:
    129a:	fa 01       	movw	r30, r20
    129c:	aa 27       	eor	r26, r26
    129e:	28 30       	cpi	r18, 0x08	; 8
    12a0:	51 f1       	breq	.+84     	; 0x12f6 <__ultoa_invert+0x5c>
    12a2:	20 31       	cpi	r18, 0x10	; 16
    12a4:	81 f1       	breq	.+96     	; 0x1306 <__ultoa_invert+0x6c>
    12a6:	e8 94       	clt
    12a8:	6f 93       	push	r22
    12aa:	6e 7f       	andi	r22, 0xFE	; 254
    12ac:	6e 5f       	subi	r22, 0xFE	; 254
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	af 4f       	sbci	r26, 0xFF	; 255
    12b6:	b1 e0       	ldi	r27, 0x01	; 1
    12b8:	3e d0       	rcall	.+124    	; 0x1336 <__ultoa_invert+0x9c>
    12ba:	b4 e0       	ldi	r27, 0x04	; 4
    12bc:	3c d0       	rcall	.+120    	; 0x1336 <__ultoa_invert+0x9c>
    12be:	67 0f       	add	r22, r23
    12c0:	78 1f       	adc	r23, r24
    12c2:	89 1f       	adc	r24, r25
    12c4:	9a 1f       	adc	r25, r26
    12c6:	a1 1d       	adc	r26, r1
    12c8:	68 0f       	add	r22, r24
    12ca:	79 1f       	adc	r23, r25
    12cc:	8a 1f       	adc	r24, r26
    12ce:	91 1d       	adc	r25, r1
    12d0:	a1 1d       	adc	r26, r1
    12d2:	6a 0f       	add	r22, r26
    12d4:	71 1d       	adc	r23, r1
    12d6:	81 1d       	adc	r24, r1
    12d8:	91 1d       	adc	r25, r1
    12da:	a1 1d       	adc	r26, r1
    12dc:	20 d0       	rcall	.+64     	; 0x131e <__ultoa_invert+0x84>
    12de:	09 f4       	brne	.+2      	; 0x12e2 <__ultoa_invert+0x48>
    12e0:	68 94       	set
    12e2:	3f 91       	pop	r19
    12e4:	2a e0       	ldi	r18, 0x0A	; 10
    12e6:	26 9f       	mul	r18, r22
    12e8:	11 24       	eor	r1, r1
    12ea:	30 19       	sub	r19, r0
    12ec:	30 5d       	subi	r19, 0xD0	; 208
    12ee:	31 93       	st	Z+, r19
    12f0:	de f6       	brtc	.-74     	; 0x12a8 <__ultoa_invert+0xe>
    12f2:	cf 01       	movw	r24, r30
    12f4:	08 95       	ret
    12f6:	46 2f       	mov	r20, r22
    12f8:	47 70       	andi	r20, 0x07	; 7
    12fa:	40 5d       	subi	r20, 0xD0	; 208
    12fc:	41 93       	st	Z+, r20
    12fe:	b3 e0       	ldi	r27, 0x03	; 3
    1300:	0f d0       	rcall	.+30     	; 0x1320 <__ultoa_invert+0x86>
    1302:	c9 f7       	brne	.-14     	; 0x12f6 <__ultoa_invert+0x5c>
    1304:	f6 cf       	rjmp	.-20     	; 0x12f2 <__ultoa_invert+0x58>
    1306:	46 2f       	mov	r20, r22
    1308:	4f 70       	andi	r20, 0x0F	; 15
    130a:	40 5d       	subi	r20, 0xD0	; 208
    130c:	4a 33       	cpi	r20, 0x3A	; 58
    130e:	18 f0       	brcs	.+6      	; 0x1316 <__ultoa_invert+0x7c>
    1310:	49 5d       	subi	r20, 0xD9	; 217
    1312:	31 fd       	sbrc	r19, 1
    1314:	40 52       	subi	r20, 0x20	; 32
    1316:	41 93       	st	Z+, r20
    1318:	02 d0       	rcall	.+4      	; 0x131e <__ultoa_invert+0x84>
    131a:	a9 f7       	brne	.-22     	; 0x1306 <__ultoa_invert+0x6c>
    131c:	ea cf       	rjmp	.-44     	; 0x12f2 <__ultoa_invert+0x58>
    131e:	b4 e0       	ldi	r27, 0x04	; 4
    1320:	a6 95       	lsr	r26
    1322:	97 95       	ror	r25
    1324:	87 95       	ror	r24
    1326:	77 95       	ror	r23
    1328:	67 95       	ror	r22
    132a:	ba 95       	dec	r27
    132c:	c9 f7       	brne	.-14     	; 0x1320 <__ultoa_invert+0x86>
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	61 05       	cpc	r22, r1
    1332:	71 05       	cpc	r23, r1
    1334:	08 95       	ret
    1336:	9b 01       	movw	r18, r22
    1338:	ac 01       	movw	r20, r24
    133a:	0a 2e       	mov	r0, r26
    133c:	06 94       	lsr	r0
    133e:	57 95       	ror	r21
    1340:	47 95       	ror	r20
    1342:	37 95       	ror	r19
    1344:	27 95       	ror	r18
    1346:	ba 95       	dec	r27
    1348:	c9 f7       	brne	.-14     	; 0x133c <__ultoa_invert+0xa2>
    134a:	62 0f       	add	r22, r18
    134c:	73 1f       	adc	r23, r19
    134e:	84 1f       	adc	r24, r20
    1350:	95 1f       	adc	r25, r21
    1352:	a0 1d       	adc	r26, r0
    1354:	08 95       	ret

00001356 <_exit>:
    1356:	f8 94       	cli

00001358 <__stop_program>:
    1358:	ff cf       	rjmp	.-2      	; 0x1358 <__stop_program>
