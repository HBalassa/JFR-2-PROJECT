
gyak05_10.03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000a60  00000af4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800108  00800108  00000afc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001479  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d42  00000000  00000000  00002101  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ab  00000000  00000000  00002e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  000036f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cd  00000000  00000000  00003950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e0  00000000  00000000  0000401d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000047fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	ba c1       	rjmp	.+884    	; 0x37a <__vector_1>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c1       	rjmp	.+644    	; 0x2c6 <__vector_16>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	a4 c1       	rjmp	.+840    	; 0x39e <__vector_21>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	c9 c1       	rjmp	.+914    	; 0x3f8 <__vector_25>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e0 e6       	ldi	r30, 0x60	; 96
  a8:	fa e0       	ldi	r31, 0x0A	; 10
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a8 30       	cpi	r26, 0x08	; 8
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a8 e0       	ldi	r26, 0x08	; 8
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	af 30       	cpi	r26, 0x0F	; 15
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	a7 d0       	rcall	.+334    	; 0x21a <main>
  cc:	c7 c4       	rjmp	.+2446   	; 0xa5c <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <lcd_enable_pulse>:
* Output:
* Notes:
******************************************************************************/
void lcd_enable_pulse(void)
{
	PORTC = PORTC | (1<<LCD_E);
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_enable_pulse+0x8>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_enable_pulse+0xe>
	_delay_us(1);
	PORTC = PORTC & ~(1<<LCD_E);
  de:	88 b1       	in	r24, 0x08	; 8
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	88 b9       	out	0x08, r24	; 8
  e4:	08 95       	ret

000000e6 <lcd_init>:
* Input:
* Output:
* Notes:
******************************************************************************/
void lcd_init(void)
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f e7       	ldi	r18, 0x7F	; 127
  ec:	88 e3       	ldi	r24, 0x38	; 56
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <lcd_init+0xa>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_init+0x14>
  fa:	00 00       	nop
	_delay_ms(50);
	
	//function set 1
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (1<<LCD_D5) | (1<<LCD_D4);
  fc:	80 e3       	ldi	r24, 0x30	; 48
  fe:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 100:	e7 df       	rcall	.-50     	; 0xd0 <lcd_enable_pulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2a e6       	ldi	r18, 0x6A	; 106
 104:	2a 95       	dec	r18
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_init+0x1e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_init+0x24>
	_delay_us(40);
	
	//function set 2
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (1<<LCD_D5) | (0<<LCD_D4);
 10a:	d0 e2       	ldi	r29, 0x20	; 32
	lcd_enable_pulse();
 10c:	d8 b9       	out	0x08, r29	; 8
 10e:	e0 df       	rcall	.-64     	; 0xd0 <lcd_enable_pulse>
	PORTC = (0<<LCD_RS) | (1<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 110:	c0 e8       	ldi	r28, 0x80	; 128
	lcd_enable_pulse();
 112:	c8 b9       	out	0x08, r28	; 8
 114:	dd df       	rcall	.-70     	; 0xd0 <lcd_enable_pulse>
 116:	8a e6       	ldi	r24, 0x6A	; 106
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_init+0x32>
	_delay_us(40);
	
	//function set 3
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (1<<LCD_D5) | (0<<LCD_D4);
	lcd_enable_pulse();
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_init+0x38>
 11e:	d8 b9       	out	0x08, r29	; 8
	PORTC = (0<<LCD_RS) | (1<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 120:	d7 df       	rcall	.-82     	; 0xd0 <lcd_enable_pulse>
	lcd_enable_pulse();
 122:	c8 b9       	out	0x08, r28	; 8
 124:	d5 df       	rcall	.-86     	; 0xd0 <lcd_enable_pulse>
 126:	9a e6       	ldi	r25, 0x6A	; 106
 128:	9a 95       	dec	r25
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init+0x42>
	_delay_us(40);
	
	//display on/off control
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_init+0x48>
	lcd_enable_pulse();
 12e:	18 b8       	out	0x08, r1	; 8
 130:	cf df       	rcall	.-98     	; 0xd0 <lcd_enable_pulse>
	PORTC = (0<<LCD_RS) | (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5) | (1<<LCD_D4);
 132:	80 ef       	ldi	r24, 0xF0	; 240
 134:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 136:	cc df       	rcall	.-104    	; 0xd0 <lcd_enable_pulse>
 138:	2a e6       	ldi	r18, 0x6A	; 106
 13a:	2a 95       	dec	r18
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_init+0x54>
	_delay_us(40);
	
	//clear display
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_init+0x5a>
	lcd_enable_pulse();
 140:	18 b8       	out	0x08, r1	; 8
 142:	c6 df       	rcall	.-116    	; 0xd0 <lcd_enable_pulse>
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (1<<LCD_D4);
 144:	80 e1       	ldi	r24, 0x10	; 16
 146:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 148:	c3 df       	rcall	.-122    	; 0xd0 <lcd_enable_pulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	8f e9       	ldi	r24, 0x9F	; 159
 14c:	9f e0       	ldi	r25, 0x0F	; 15
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_init+0x68>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_init+0x6e>
	_delay_ms(2);
	
	//entry mode set
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 154:	00 00       	nop
	lcd_enable_pulse();
 156:	18 b8       	out	0x08, r1	; 8
 158:	bb df       	rcall	.-138    	; 0xd0 <lcd_enable_pulse>
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5) | (0<<LCD_D4);
 15a:	80 e6       	ldi	r24, 0x60	; 96
 15c:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 15e:	b8 df       	rcall	.-144    	; 0xd0 <lcd_enable_pulse>
 160:	8f e1       	ldi	r24, 0x1F	; 31
 162:	9e e4       	ldi	r25, 0x4E	; 78
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_init+0x7e>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_init+0x84>
 16a:	00 00       	nop
 16c:	df 91       	pop	r29
	_delay_ms(10);
}
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <lcd_write_char>:
 172:	cf 93       	push	r28
* Input:
* Output:
* Notes:
******************************************************************************/
void lcd_write_char(char c)
{
 174:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	2a e6       	ldi	r18, 0x6A	; 106
 178:	2a 95       	dec	r18
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_write_char+0x6>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_write_char+0xc>
	_delay_us(40);
	PORTC = (c & 0xf0) | (1<<LCD_RS);
 17e:	80 7f       	andi	r24, 0xF0	; 240
 180:	84 60       	ori	r24, 0x04	; 4
 182:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 184:	a5 df       	rcall	.-182    	; 0xd0 <lcd_enable_pulse>
	PORTC = ((c & 0x0f)<<4) | (1<<LCD_RS);
 186:	20 e1       	ldi	r18, 0x10	; 16
 188:	c2 9f       	mul	r28, r18
 18a:	c0 01       	movw	r24, r0
 18c:	11 24       	eor	r1, r1
 18e:	84 60       	ori	r24, 0x04	; 4
	lcd_enable_pulse();
 190:	88 b9       	out	0x08, r24	; 8
 192:	9e df       	rcall	.-196    	; 0xd0 <lcd_enable_pulse>
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <lcd_clear_display>:
 198:	8a e6       	ldi	r24, 0x6A	; 106
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_clear_display+0x2>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_clear_display+0x8>
* Notes:
******************************************************************************/
void lcd_clear_display(void)
{
	_delay_us(40);
	PORTC = 0x00 | (0<<LCD_RS);
 1a0:	18 b8       	out	0x08, r1	; 8
	lcd_enable_pulse();
 1a2:	96 df       	rcall	.-212    	; 0xd0 <lcd_enable_pulse>
	PORTC = (0x01<<4) | (0<<LCD_RS);
 1a4:	80 e1       	ldi	r24, 0x10	; 16
	lcd_enable_pulse();
 1a6:	88 b9       	out	0x08, r24	; 8
 1a8:	93 df       	rcall	.-218    	; 0xd0 <lcd_enable_pulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	8f e9       	ldi	r24, 0x9F	; 159
 1ac:	9f e0       	ldi	r25, 0x0F	; 15
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_clear_display+0x16>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_clear_display+0x1c>
 1b4:	00 00       	nop
 1b6:	08 95       	ret

000001b8 <lcd_set_cursor_position>:
* Input:
* Output:
* Notes:
******************************************************************************/
void lcd_set_cursor_position(uint8_t pos)
{
 1b8:	cf 93       	push	r28
	if(pos < 0x67)
 1ba:	87 36       	cpi	r24, 0x67	; 103
 1bc:	a0 f4       	brcc	.+40     	; 0x1e6 <lcd_set_cursor_position+0x2e>
	{
		pos = pos | (1<<LCD_D7);
 1be:	c8 2f       	mov	r28, r24
 1c0:	c0 68       	ori	r28, 0x80	; 128
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	2a e6       	ldi	r18, 0x6A	; 106
 1c4:	2a 95       	dec	r18
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_set_cursor_position+0xc>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_set_cursor_position+0x12>
		
		_delay_us(40);
		PORTC = (pos & 0xf0) | (0<<LCD_RS);
 1ca:	80 7f       	andi	r24, 0xF0	; 240
 1cc:	80 68       	ori	r24, 0x80	; 128
 1ce:	88 b9       	out	0x08, r24	; 8
		lcd_enable_pulse();
 1d0:	7f df       	rcall	.-258    	; 0xd0 <lcd_enable_pulse>
		PORTC = ((pos & 0x0f)<<4) | (0<<LCD_RS);
 1d2:	20 e1       	ldi	r18, 0x10	; 16
 1d4:	c2 9f       	mul	r28, r18
 1d6:	c0 01       	movw	r24, r0
 1d8:	11 24       	eor	r1, r1
		lcd_enable_pulse();
 1da:	88 b9       	out	0x08, r24	; 8
 1dc:	79 df       	rcall	.-270    	; 0xd0 <lcd_enable_pulse>
 1de:	8a e6       	ldi	r24, 0x6A	; 106
 1e0:	8a 95       	dec	r24
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_set_cursor_position+0x28>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_set_cursor_position+0x2e>
		_delay_us(40);
	}
	
}
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <lcd_write_string>:
* Input:
* Output:
* Notes:
******************************************************************************/
void lcd_write_string(char *string)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	ec 01       	movw	r28, r24
	char *p = string;
	while(*p != 0) lcd_write_char(*p++);
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <lcd_write_string+0xc>
 1f2:	21 96       	adiw	r28, 0x01	; 1
 1f4:	be df       	rcall	.-132    	; 0x172 <lcd_write_char>
 1f6:	88 81       	ld	r24, Y
 1f8:	81 11       	cpse	r24, r1
 1fa:	fb cf       	rjmp	.-10     	; 0x1f2 <lcd_write_string+0x8>
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <port_init>:
* Output:
* Notes:
******************************************************************************/
void port_init(void)
{
	DDRA = 0xff;
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xff;
 206:	82 b9       	out	0x02, r24	; 2
	
	DDRF = (1<<PF3) | (1<<PF2) | (1<<PF1) | (0<<PF0);
 208:	8e e0       	ldi	r24, 0x0E	; 14
 20a:	80 bb       	out	0x10, r24	; 16
	//PORTF = 0x0f;
	
	DDRD = (0<<PD0);
 20c:	1a b8       	out	0x0a, r1	; 10
	PORTD = (1<<PD0);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	8b b9       	out	0x0b, r24	; 11
	
	DDRC = (1<<LCD_E) | (1<<LCD_RS) | (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5) | (1<<LCD_D4);
 212:	8c ef       	ldi	r24, 0xFC	; 252
 214:	87 b9       	out	0x07, r24	; 7
	PORTC = (0<<LCD_E) | (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 216:	18 b8       	out	0x08, r1	; 8
 218:	08 95       	ret

0000021a <main>:
* Input:
* Output:
* Notes:
******************************************************************************/
int main(void)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	e2 97       	sbiw	r28, 0x32	; 50
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
	port_init();
 22e:	e9 df       	rcall	.-46     	; 0x202 <port_init>
	timer_init();
 230:	f9 d0       	rcall	.+498    	; 0x424 <timer_init>
	external_int_init();
 232:	00 d1       	rcall	.+512    	; 0x434 <external_int_init>
 234:	58 df       	rcall	.-336    	; 0xe6 <lcd_init>
	lcd_init();
 236:	83 e3       	ldi	r24, 0x33	; 51
	uart0_init(BAUD9600);
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	08 d1       	rcall	.+528    	; 0x44c <uart0_init>
 23c:	01 d1       	rcall	.+514    	; 0x440 <adc_init>
 23e:	78 94       	sei
	adc_init();
 240:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <task_10ms>
	sei();
 244:	81 30       	cpi	r24, 0x01	; 1
    /* Replace with your application code */
    while (1)
    {
		if(task_10ms == TRUE)
 246:	11 f4       	brne	.+4      	; 0x24c <main+0x32>
 248:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <task_10ms>
 24c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <task_100ms>
		{
			//PORTF ^= 0x01;
			task_10ms = FALSE;
 250:	81 30       	cpi	r24, 0x01	; 1
		}
		
		if(task_100ms == TRUE)
 252:	69 f5       	brne	.+90     	; 0x2ae <main+0x94>
 254:	ea e7       	ldi	r30, 0x7A	; 122
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
		{
			ADCSRA |= (1<<ADSC); 
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	80 83       	st	Z, r24
 25e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ad_result>
 262:	82 b9       	out	0x02, r24	; 2
			PORTA =ad_result;
 264:	91 b3       	in	r25, 0x11	; 17
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	89 27       	eor	r24, r25
			PORTF ^= 0X02;
 26a:	81 bb       	out	0x11, r24	; 17
 26c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ad_result+0x1>
 270:	8f 93       	push	r24
			char write_string[50];
			sprintf(write_string,"%4d",ad_result);
 272:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ad_result>
 276:	8f 93       	push	r24
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	9f 93       	push	r25
 27e:	8f 93       	push	r24
 280:	8e 01       	movw	r16, r28
 282:	0f 5f       	subi	r16, 0xFF	; 255
 284:	1f 4f       	sbci	r17, 0xFF	; 255
 286:	1f 93       	push	r17
 288:	0f 93       	push	r16
 28a:	0d d1       	rcall	.+538    	; 0x4a6 <sprintf>
 28c:	80 e0       	ldi	r24, 0x00	; 0
			lcd_set_cursor_position(0);
 28e:	94 df       	rcall	.-216    	; 0x1b8 <lcd_set_cursor_position>
 290:	c8 01       	movw	r24, r16
			lcd_write_string(write_string);
 292:	ab df       	rcall	.-170    	; 0x1ea <lcd_write_string>
 294:	c8 01       	movw	r24, r16
 296:	ec d0       	rcall	.+472    	; 0x470 <uart_write_string>
			uart_write_string(write_string);
 298:	84 e0       	ldi	r24, 0x04	; 4
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	e9 d0       	rcall	.+466    	; 0x470 <uart_write_string>
			uart_write_string("\r\n");
 29e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <task_100ms>
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
			task_100ms = FALSE;
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <task_500ms>
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <main+0x9e>
		}
		
		if(task_500ms == TRUE)
 2b6:	c4 cf       	rjmp	.-120    	; 0x240 <main+0x26>
 2b8:	91 b3       	in	r25, 0x11	; 17
 2ba:	84 e0       	ldi	r24, 0x04	; 4
 2bc:	89 27       	eor	r24, r25
 2be:	81 bb       	out	0x11, r24	; 17
			//lcd_write_string(szoveg);
			//lcd_set_cursor_position(0);
			//lcd_clear_display();
			//lcd_write_string("masik szoveg");
			
			PORTF ^= 0x04;
 2c0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <task_500ms>
 2c4:	bd cf       	rjmp	.-134    	; 0x240 <main+0x26>

000002c6 <__vector_16>:
 2c6:	1f 92       	push	r1
			task_500ms = FALSE;
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0

/******************************************************************************
* Interrupt Routines
******************************************************************************/
ISR(TIMER0_COMP_vect) //timer CTC interrupt
{
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
	timer_cnt++;
 2e4:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__data_end>
 2e8:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__data_end+0x1>
 2ec:	4f 5f       	subi	r20, 0xFF	; 255
 2ee:	5f 4f       	sbci	r21, 0xFF	; 255
 2f0:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <__data_end+0x1>
 2f4:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <__data_end>
	if((timer_cnt % 1) == 0) task_10ms = TRUE;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <task_10ms>
	if((timer_cnt % 10) == 0) task_100ms =TRUE;
 2fe:	9a 01       	movw	r18, r20
 300:	ad ec       	ldi	r26, 0xCD	; 205
 302:	bc ec       	ldi	r27, 0xCC	; 204
 304:	c1 d0       	rcall	.+386    	; 0x488 <__umulhisi3>
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	96 95       	lsr	r25
 310:	87 95       	ror	r24
 312:	9c 01       	movw	r18, r24
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	82 0f       	add	r24, r18
 326:	93 1f       	adc	r25, r19
 328:	48 17       	cp	r20, r24
 32a:	59 07       	cpc	r21, r25
 32c:	19 f4       	brne	.+6      	; 0x334 <__vector_16+0x6e>
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <task_100ms>
	if((timer_cnt % 50) == 0) task_500ms = TRUE;
 334:	9a 01       	movw	r18, r20
 336:	36 95       	lsr	r19
 338:	27 95       	ror	r18
 33a:	ab e7       	ldi	r26, 0x7B	; 123
 33c:	b4 e1       	ldi	r27, 0x14	; 20
 33e:	a4 d0       	rcall	.+328    	; 0x488 <__umulhisi3>
 340:	96 95       	lsr	r25
 342:	87 95       	ror	r24
 344:	62 e3       	ldi	r22, 0x32	; 50
 346:	68 9f       	mul	r22, r24
 348:	90 01       	movw	r18, r0
 34a:	69 9f       	mul	r22, r25
 34c:	30 0d       	add	r19, r0
 34e:	11 24       	eor	r1, r1
 350:	42 17       	cp	r20, r18
 352:	53 07       	cpc	r21, r19
 354:	19 f4       	brne	.+6      	; 0x35c <__vector_16+0x96>
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <task_500ms>
}
 35c:	bf 91       	pop	r27
 35e:	af 91       	pop	r26
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	7f 91       	pop	r23
 366:	6f 91       	pop	r22
 368:	5f 91       	pop	r21
 36a:	4f 91       	pop	r20
 36c:	3f 91       	pop	r19
 36e:	2f 91       	pop	r18
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <__vector_1>:

ISR(INT0_vect) //ext 0 interrupt
{
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
	
	PORTA = PORTA ^ 0x01;
 388:	92 b1       	in	r25, 0x02	; 2
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	89 27       	eor	r24, r25
 38e:	82 b9       	out	0x02, r24	; 2
}
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <__vector_21>:

ISR(USART0_RX_vect)
{
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	0b b6       	in	r0, 0x3b	; 59
 3aa:	0f 92       	push	r0
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
	char c = UDR0;
 3c4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(c == 0x7F)
 3c8:	8f 37       	cpi	r24, 0x7F	; 127
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <__vector_21+0x32>
		lcd_clear_display();
 3cc:	e5 de       	rcall	.-566    	; 0x198 <lcd_clear_display>
 3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <__vector_21+0x34>
	else
		lcd_write_char(c);
 3d0:	d0 de       	rcall	.-608    	; 0x172 <lcd_write_char>
 3d2:	ff 91       	pop	r31
}
 3d4:	ef 91       	pop	r30
 3d6:	bf 91       	pop	r27
 3d8:	af 91       	pop	r26
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	7f 91       	pop	r23
 3e0:	6f 91       	pop	r22
 3e2:	5f 91       	pop	r21
 3e4:	4f 91       	pop	r20
 3e6:	3f 91       	pop	r19
 3e8:	2f 91       	pop	r18
 3ea:	0f 90       	pop	r0
 3ec:	0b be       	out	0x3b, r0	; 59
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <__vector_25>:
 3f8:	1f 92       	push	r1

ISR(ADC_vect)
{
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
	ad_result = ADC;
 406:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 40a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 40e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ad_result+0x1>
 412:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ad_result>
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <timer_init>:
* Output:
* Notes:			10 ms, CTC
******************************************************************************/
void timer_init(void)
{
	TCCR0A = (0<<WGM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
 424:	8d e0       	ldi	r24, 0x0D	; 13
 426:	84 bd       	out	0x24, r24	; 36
	OCR0A = 77;
 428:	8d e4       	ldi	r24, 0x4D	; 77
 42a:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1<<OCIE0A);
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 432:	08 95       	ret

00000434 <external_int_init>:
* Output:
* Notes:
******************************************************************************/
void external_int_init(void)
{
	EICRA = (1<<ISC01) | (0<<ISC00);
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1<<INT0);
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	8d bb       	out	0x1d, r24	; 29
 43e:	08 95       	ret

00000440 <adc_init>:
* Output:
* Notes:
******************************************************************************/
void adc_init(void)
{
	ADMUX = 0;
 440:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 444:	8f ec       	ldi	r24, 0xCF	; 207
 446:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 44a:	08 95       	ret

0000044c <uart0_init>:
* Notes:
******************************************************************************/
void uart0_init(uint16_t baud)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 44c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) baud;
 450:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* Set frame format: 8data, no parity & 1 stop bits */
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (1<<UCSZ1) | (1<<UCSZ0);
 454:	8e e0       	ldi	r24, 0x0E	; 14
 456:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
 45a:	88 e9       	ldi	r24, 0x98	; 152
 45c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 460:	08 95       	ret

00000462 <uart0_send_char>:
* Notes:
******************************************************************************/
void uart0_send_char(char data)
{
	/* Wait for empty transmit buffer */
	while ( ! ( UCSR0A & (1<<UDRE0)));
 462:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 466:	95 ff       	sbrs	r25, 5
 468:	fc cf       	rjmp	.-8      	; 0x462 <uart0_send_char>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 46a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 46e:	08 95       	ret

00000470 <uart_write_string>:
* Input:
* Output:
* Notes:
******************************************************************************/
void uart_write_string(char *string)
{
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	ec 01       	movw	r28, r24
	char *p = string;
	while(*p != 0) uart0_send_char(*p++);
 476:	02 c0       	rjmp	.+4      	; 0x47c <uart_write_string+0xc>
 478:	21 96       	adiw	r28, 0x01	; 1
 47a:	f3 df       	rcall	.-26     	; 0x462 <uart0_send_char>
 47c:	88 81       	ld	r24, Y
 47e:	81 11       	cpse	r24, r1
 480:	fb cf       	rjmp	.-10     	; 0x478 <uart_write_string+0x8>
}
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <__umulhisi3>:
 488:	a2 9f       	mul	r26, r18
 48a:	b0 01       	movw	r22, r0
 48c:	b3 9f       	mul	r27, r19
 48e:	c0 01       	movw	r24, r0
 490:	a3 9f       	mul	r26, r19
 492:	70 0d       	add	r23, r0
 494:	81 1d       	adc	r24, r1
 496:	11 24       	eor	r1, r1
 498:	91 1d       	adc	r25, r1
 49a:	b2 9f       	mul	r27, r18
 49c:	70 0d       	add	r23, r0
 49e:	81 1d       	adc	r24, r1
 4a0:	11 24       	eor	r1, r1
 4a2:	91 1d       	adc	r25, r1
 4a4:	08 95       	ret

000004a6 <sprintf>:
 4a6:	0f 93       	push	r16
 4a8:	1f 93       	push	r17
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	2e 97       	sbiw	r28, 0x0e	; 14
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	0d 89       	ldd	r16, Y+21	; 0x15
 4c0:	1e 89       	ldd	r17, Y+22	; 0x16
 4c2:	86 e0       	ldi	r24, 0x06	; 6
 4c4:	8c 83       	std	Y+4, r24	; 0x04
 4c6:	1a 83       	std	Y+2, r17	; 0x02
 4c8:	09 83       	std	Y+1, r16	; 0x01
 4ca:	8f ef       	ldi	r24, 0xFF	; 255
 4cc:	9f e7       	ldi	r25, 0x7F	; 127
 4ce:	9e 83       	std	Y+6, r25	; 0x06
 4d0:	8d 83       	std	Y+5, r24	; 0x05
 4d2:	ae 01       	movw	r20, r28
 4d4:	47 5e       	subi	r20, 0xE7	; 231
 4d6:	5f 4f       	sbci	r21, 0xFF	; 255
 4d8:	6f 89       	ldd	r22, Y+23	; 0x17
 4da:	78 8d       	ldd	r23, Y+24	; 0x18
 4dc:	ce 01       	movw	r24, r28
 4de:	01 96       	adiw	r24, 0x01	; 1
 4e0:	10 d0       	rcall	.+32     	; 0x502 <vfprintf>
 4e2:	ef 81       	ldd	r30, Y+7	; 0x07
 4e4:	f8 85       	ldd	r31, Y+8	; 0x08
 4e6:	e0 0f       	add	r30, r16
 4e8:	f1 1f       	adc	r31, r17
 4ea:	10 82       	st	Z, r1
 4ec:	2e 96       	adiw	r28, 0x0e	; 14
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	f8 94       	cli
 4f2:	de bf       	out	0x3e, r29	; 62
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	cd bf       	out	0x3d, r28	; 61
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	0f 91       	pop	r16
 500:	08 95       	ret

00000502 <vfprintf>:
 502:	2f 92       	push	r2
 504:	3f 92       	push	r3
 506:	4f 92       	push	r4
 508:	5f 92       	push	r5
 50a:	6f 92       	push	r6
 50c:	7f 92       	push	r7
 50e:	8f 92       	push	r8
 510:	9f 92       	push	r9
 512:	af 92       	push	r10
 514:	bf 92       	push	r11
 516:	cf 92       	push	r12
 518:	df 92       	push	r13
 51a:	ef 92       	push	r14
 51c:	ff 92       	push	r15
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	2b 97       	sbiw	r28, 0x0b	; 11
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	de bf       	out	0x3e, r29	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	cd bf       	out	0x3d, r28	; 61
 536:	6c 01       	movw	r12, r24
 538:	7b 01       	movw	r14, r22
 53a:	8a 01       	movw	r16, r20
 53c:	fc 01       	movw	r30, r24
 53e:	17 82       	std	Z+7, r1	; 0x07
 540:	16 82       	std	Z+6, r1	; 0x06
 542:	83 81       	ldd	r24, Z+3	; 0x03
 544:	81 ff       	sbrs	r24, 1
 546:	bf c1       	rjmp	.+894    	; 0x8c6 <vfprintf+0x3c4>
 548:	ce 01       	movw	r24, r28
 54a:	01 96       	adiw	r24, 0x01	; 1
 54c:	3c 01       	movw	r6, r24
 54e:	f6 01       	movw	r30, r12
 550:	93 81       	ldd	r25, Z+3	; 0x03
 552:	f7 01       	movw	r30, r14
 554:	93 fd       	sbrc	r25, 3
 556:	85 91       	lpm	r24, Z+
 558:	93 ff       	sbrs	r25, 3
 55a:	81 91       	ld	r24, Z+
 55c:	7f 01       	movw	r14, r30
 55e:	88 23       	and	r24, r24
 560:	09 f4       	brne	.+2      	; 0x564 <vfprintf+0x62>
 562:	ad c1       	rjmp	.+858    	; 0x8be <vfprintf+0x3bc>
 564:	85 32       	cpi	r24, 0x25	; 37
 566:	39 f4       	brne	.+14     	; 0x576 <vfprintf+0x74>
 568:	93 fd       	sbrc	r25, 3
 56a:	85 91       	lpm	r24, Z+
 56c:	93 ff       	sbrs	r25, 3
 56e:	81 91       	ld	r24, Z+
 570:	7f 01       	movw	r14, r30
 572:	85 32       	cpi	r24, 0x25	; 37
 574:	21 f4       	brne	.+8      	; 0x57e <vfprintf+0x7c>
 576:	b6 01       	movw	r22, r12
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	d6 d1       	rcall	.+940    	; 0x928 <fputc>
 57c:	e8 cf       	rjmp	.-48     	; 0x54e <vfprintf+0x4c>
 57e:	91 2c       	mov	r9, r1
 580:	21 2c       	mov	r2, r1
 582:	31 2c       	mov	r3, r1
 584:	ff e1       	ldi	r31, 0x1F	; 31
 586:	f3 15       	cp	r31, r3
 588:	d8 f0       	brcs	.+54     	; 0x5c0 <vfprintf+0xbe>
 58a:	8b 32       	cpi	r24, 0x2B	; 43
 58c:	79 f0       	breq	.+30     	; 0x5ac <vfprintf+0xaa>
 58e:	38 f4       	brcc	.+14     	; 0x59e <vfprintf+0x9c>
 590:	80 32       	cpi	r24, 0x20	; 32
 592:	79 f0       	breq	.+30     	; 0x5b2 <vfprintf+0xb0>
 594:	83 32       	cpi	r24, 0x23	; 35
 596:	a1 f4       	brne	.+40     	; 0x5c0 <vfprintf+0xbe>
 598:	23 2d       	mov	r18, r3
 59a:	20 61       	ori	r18, 0x10	; 16
 59c:	1d c0       	rjmp	.+58     	; 0x5d8 <vfprintf+0xd6>
 59e:	8d 32       	cpi	r24, 0x2D	; 45
 5a0:	61 f0       	breq	.+24     	; 0x5ba <vfprintf+0xb8>
 5a2:	80 33       	cpi	r24, 0x30	; 48
 5a4:	69 f4       	brne	.+26     	; 0x5c0 <vfprintf+0xbe>
 5a6:	23 2d       	mov	r18, r3
 5a8:	21 60       	ori	r18, 0x01	; 1
 5aa:	16 c0       	rjmp	.+44     	; 0x5d8 <vfprintf+0xd6>
 5ac:	83 2d       	mov	r24, r3
 5ae:	82 60       	ori	r24, 0x02	; 2
 5b0:	38 2e       	mov	r3, r24
 5b2:	e3 2d       	mov	r30, r3
 5b4:	e4 60       	ori	r30, 0x04	; 4
 5b6:	3e 2e       	mov	r3, r30
 5b8:	2a c0       	rjmp	.+84     	; 0x60e <vfprintf+0x10c>
 5ba:	f3 2d       	mov	r31, r3
 5bc:	f8 60       	ori	r31, 0x08	; 8
 5be:	1d c0       	rjmp	.+58     	; 0x5fa <vfprintf+0xf8>
 5c0:	37 fc       	sbrc	r3, 7
 5c2:	2d c0       	rjmp	.+90     	; 0x61e <vfprintf+0x11c>
 5c4:	20 ed       	ldi	r18, 0xD0	; 208
 5c6:	28 0f       	add	r18, r24
 5c8:	2a 30       	cpi	r18, 0x0A	; 10
 5ca:	40 f0       	brcs	.+16     	; 0x5dc <vfprintf+0xda>
 5cc:	8e 32       	cpi	r24, 0x2E	; 46
 5ce:	b9 f4       	brne	.+46     	; 0x5fe <vfprintf+0xfc>
 5d0:	36 fc       	sbrc	r3, 6
 5d2:	75 c1       	rjmp	.+746    	; 0x8be <vfprintf+0x3bc>
 5d4:	23 2d       	mov	r18, r3
 5d6:	20 64       	ori	r18, 0x40	; 64
 5d8:	32 2e       	mov	r3, r18
 5da:	19 c0       	rjmp	.+50     	; 0x60e <vfprintf+0x10c>
 5dc:	36 fe       	sbrs	r3, 6
 5de:	06 c0       	rjmp	.+12     	; 0x5ec <vfprintf+0xea>
 5e0:	8a e0       	ldi	r24, 0x0A	; 10
 5e2:	98 9e       	mul	r9, r24
 5e4:	20 0d       	add	r18, r0
 5e6:	11 24       	eor	r1, r1
 5e8:	92 2e       	mov	r9, r18
 5ea:	11 c0       	rjmp	.+34     	; 0x60e <vfprintf+0x10c>
 5ec:	ea e0       	ldi	r30, 0x0A	; 10
 5ee:	2e 9e       	mul	r2, r30
 5f0:	20 0d       	add	r18, r0
 5f2:	11 24       	eor	r1, r1
 5f4:	22 2e       	mov	r2, r18
 5f6:	f3 2d       	mov	r31, r3
 5f8:	f0 62       	ori	r31, 0x20	; 32
 5fa:	3f 2e       	mov	r3, r31
 5fc:	08 c0       	rjmp	.+16     	; 0x60e <vfprintf+0x10c>
 5fe:	8c 36       	cpi	r24, 0x6C	; 108
 600:	21 f4       	brne	.+8      	; 0x60a <vfprintf+0x108>
 602:	83 2d       	mov	r24, r3
 604:	80 68       	ori	r24, 0x80	; 128
 606:	38 2e       	mov	r3, r24
 608:	02 c0       	rjmp	.+4      	; 0x60e <vfprintf+0x10c>
 60a:	88 36       	cpi	r24, 0x68	; 104
 60c:	41 f4       	brne	.+16     	; 0x61e <vfprintf+0x11c>
 60e:	f7 01       	movw	r30, r14
 610:	93 fd       	sbrc	r25, 3
 612:	85 91       	lpm	r24, Z+
 614:	93 ff       	sbrs	r25, 3
 616:	81 91       	ld	r24, Z+
 618:	7f 01       	movw	r14, r30
 61a:	81 11       	cpse	r24, r1
 61c:	b3 cf       	rjmp	.-154    	; 0x584 <vfprintf+0x82>
 61e:	98 2f       	mov	r25, r24
 620:	9f 7d       	andi	r25, 0xDF	; 223
 622:	95 54       	subi	r25, 0x45	; 69
 624:	93 30       	cpi	r25, 0x03	; 3
 626:	28 f4       	brcc	.+10     	; 0x632 <vfprintf+0x130>
 628:	0c 5f       	subi	r16, 0xFC	; 252
 62a:	1f 4f       	sbci	r17, 0xFF	; 255
 62c:	9f e3       	ldi	r25, 0x3F	; 63
 62e:	99 83       	std	Y+1, r25	; 0x01
 630:	0d c0       	rjmp	.+26     	; 0x64c <vfprintf+0x14a>
 632:	83 36       	cpi	r24, 0x63	; 99
 634:	31 f0       	breq	.+12     	; 0x642 <vfprintf+0x140>
 636:	83 37       	cpi	r24, 0x73	; 115
 638:	71 f0       	breq	.+28     	; 0x656 <vfprintf+0x154>
 63a:	83 35       	cpi	r24, 0x53	; 83
 63c:	09 f0       	breq	.+2      	; 0x640 <vfprintf+0x13e>
 63e:	55 c0       	rjmp	.+170    	; 0x6ea <vfprintf+0x1e8>
 640:	20 c0       	rjmp	.+64     	; 0x682 <vfprintf+0x180>
 642:	f8 01       	movw	r30, r16
 644:	80 81       	ld	r24, Z
 646:	89 83       	std	Y+1, r24	; 0x01
 648:	0e 5f       	subi	r16, 0xFE	; 254
 64a:	1f 4f       	sbci	r17, 0xFF	; 255
 64c:	88 24       	eor	r8, r8
 64e:	83 94       	inc	r8
 650:	91 2c       	mov	r9, r1
 652:	53 01       	movw	r10, r6
 654:	12 c0       	rjmp	.+36     	; 0x67a <vfprintf+0x178>
 656:	28 01       	movw	r4, r16
 658:	f2 e0       	ldi	r31, 0x02	; 2
 65a:	4f 0e       	add	r4, r31
 65c:	51 1c       	adc	r5, r1
 65e:	f8 01       	movw	r30, r16
 660:	a0 80       	ld	r10, Z
 662:	b1 80       	ldd	r11, Z+1	; 0x01
 664:	36 fe       	sbrs	r3, 6
 666:	03 c0       	rjmp	.+6      	; 0x66e <vfprintf+0x16c>
 668:	69 2d       	mov	r22, r9
 66a:	70 e0       	ldi	r23, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <vfprintf+0x170>
 66e:	6f ef       	ldi	r22, 0xFF	; 255
 670:	7f ef       	ldi	r23, 0xFF	; 255
 672:	c5 01       	movw	r24, r10
 674:	4e d1       	rcall	.+668    	; 0x912 <strnlen>
 676:	4c 01       	movw	r8, r24
 678:	82 01       	movw	r16, r4
 67a:	f3 2d       	mov	r31, r3
 67c:	ff 77       	andi	r31, 0x7F	; 127
 67e:	3f 2e       	mov	r3, r31
 680:	15 c0       	rjmp	.+42     	; 0x6ac <vfprintf+0x1aa>
 682:	28 01       	movw	r4, r16
 684:	22 e0       	ldi	r18, 0x02	; 2
 686:	42 0e       	add	r4, r18
 688:	51 1c       	adc	r5, r1
 68a:	f8 01       	movw	r30, r16
 68c:	a0 80       	ld	r10, Z
 68e:	b1 80       	ldd	r11, Z+1	; 0x01
 690:	36 fe       	sbrs	r3, 6
 692:	03 c0       	rjmp	.+6      	; 0x69a <vfprintf+0x198>
 694:	69 2d       	mov	r22, r9
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	02 c0       	rjmp	.+4      	; 0x69e <vfprintf+0x19c>
 69a:	6f ef       	ldi	r22, 0xFF	; 255
 69c:	7f ef       	ldi	r23, 0xFF	; 255
 69e:	c5 01       	movw	r24, r10
 6a0:	2d d1       	rcall	.+602    	; 0x8fc <strnlen_P>
 6a2:	4c 01       	movw	r8, r24
 6a4:	f3 2d       	mov	r31, r3
 6a6:	f0 68       	ori	r31, 0x80	; 128
 6a8:	3f 2e       	mov	r3, r31
 6aa:	82 01       	movw	r16, r4
 6ac:	33 fc       	sbrc	r3, 3
 6ae:	19 c0       	rjmp	.+50     	; 0x6e2 <vfprintf+0x1e0>
 6b0:	82 2d       	mov	r24, r2
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	88 16       	cp	r8, r24
 6b6:	99 06       	cpc	r9, r25
 6b8:	a0 f4       	brcc	.+40     	; 0x6e2 <vfprintf+0x1e0>
 6ba:	b6 01       	movw	r22, r12
 6bc:	80 e2       	ldi	r24, 0x20	; 32
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	33 d1       	rcall	.+614    	; 0x928 <fputc>
 6c2:	2a 94       	dec	r2
 6c4:	f5 cf       	rjmp	.-22     	; 0x6b0 <vfprintf+0x1ae>
 6c6:	f5 01       	movw	r30, r10
 6c8:	37 fc       	sbrc	r3, 7
 6ca:	85 91       	lpm	r24, Z+
 6cc:	37 fe       	sbrs	r3, 7
 6ce:	81 91       	ld	r24, Z+
 6d0:	5f 01       	movw	r10, r30
 6d2:	b6 01       	movw	r22, r12
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	28 d1       	rcall	.+592    	; 0x928 <fputc>
 6d8:	21 10       	cpse	r2, r1
 6da:	2a 94       	dec	r2
 6dc:	21 e0       	ldi	r18, 0x01	; 1
 6de:	82 1a       	sub	r8, r18
 6e0:	91 08       	sbc	r9, r1
 6e2:	81 14       	cp	r8, r1
 6e4:	91 04       	cpc	r9, r1
 6e6:	79 f7       	brne	.-34     	; 0x6c6 <vfprintf+0x1c4>
 6e8:	e1 c0       	rjmp	.+450    	; 0x8ac <vfprintf+0x3aa>
 6ea:	84 36       	cpi	r24, 0x64	; 100
 6ec:	11 f0       	breq	.+4      	; 0x6f2 <vfprintf+0x1f0>
 6ee:	89 36       	cpi	r24, 0x69	; 105
 6f0:	39 f5       	brne	.+78     	; 0x740 <vfprintf+0x23e>
 6f2:	f8 01       	movw	r30, r16
 6f4:	37 fe       	sbrs	r3, 7
 6f6:	07 c0       	rjmp	.+14     	; 0x706 <vfprintf+0x204>
 6f8:	60 81       	ld	r22, Z
 6fa:	71 81       	ldd	r23, Z+1	; 0x01
 6fc:	82 81       	ldd	r24, Z+2	; 0x02
 6fe:	93 81       	ldd	r25, Z+3	; 0x03
 700:	0c 5f       	subi	r16, 0xFC	; 252
 702:	1f 4f       	sbci	r17, 0xFF	; 255
 704:	08 c0       	rjmp	.+16     	; 0x716 <vfprintf+0x214>
 706:	60 81       	ld	r22, Z
 708:	71 81       	ldd	r23, Z+1	; 0x01
 70a:	07 2e       	mov	r0, r23
 70c:	00 0c       	add	r0, r0
 70e:	88 0b       	sbc	r24, r24
 710:	99 0b       	sbc	r25, r25
 712:	0e 5f       	subi	r16, 0xFE	; 254
 714:	1f 4f       	sbci	r17, 0xFF	; 255
 716:	f3 2d       	mov	r31, r3
 718:	ff 76       	andi	r31, 0x6F	; 111
 71a:	3f 2e       	mov	r3, r31
 71c:	97 ff       	sbrs	r25, 7
 71e:	09 c0       	rjmp	.+18     	; 0x732 <vfprintf+0x230>
 720:	90 95       	com	r25
 722:	80 95       	com	r24
 724:	70 95       	com	r23
 726:	61 95       	neg	r22
 728:	7f 4f       	sbci	r23, 0xFF	; 255
 72a:	8f 4f       	sbci	r24, 0xFF	; 255
 72c:	9f 4f       	sbci	r25, 0xFF	; 255
 72e:	f0 68       	ori	r31, 0x80	; 128
 730:	3f 2e       	mov	r3, r31
 732:	2a e0       	ldi	r18, 0x0A	; 10
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	a3 01       	movw	r20, r6
 738:	33 d1       	rcall	.+614    	; 0x9a0 <__ultoa_invert>
 73a:	88 2e       	mov	r8, r24
 73c:	86 18       	sub	r8, r6
 73e:	44 c0       	rjmp	.+136    	; 0x7c8 <vfprintf+0x2c6>
 740:	85 37       	cpi	r24, 0x75	; 117
 742:	31 f4       	brne	.+12     	; 0x750 <vfprintf+0x24e>
 744:	23 2d       	mov	r18, r3
 746:	2f 7e       	andi	r18, 0xEF	; 239
 748:	b2 2e       	mov	r11, r18
 74a:	2a e0       	ldi	r18, 0x0A	; 10
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	25 c0       	rjmp	.+74     	; 0x79a <vfprintf+0x298>
 750:	93 2d       	mov	r25, r3
 752:	99 7f       	andi	r25, 0xF9	; 249
 754:	b9 2e       	mov	r11, r25
 756:	8f 36       	cpi	r24, 0x6F	; 111
 758:	c1 f0       	breq	.+48     	; 0x78a <vfprintf+0x288>
 75a:	18 f4       	brcc	.+6      	; 0x762 <vfprintf+0x260>
 75c:	88 35       	cpi	r24, 0x58	; 88
 75e:	79 f0       	breq	.+30     	; 0x77e <vfprintf+0x27c>
 760:	ae c0       	rjmp	.+348    	; 0x8be <vfprintf+0x3bc>
 762:	80 37       	cpi	r24, 0x70	; 112
 764:	19 f0       	breq	.+6      	; 0x76c <vfprintf+0x26a>
 766:	88 37       	cpi	r24, 0x78	; 120
 768:	21 f0       	breq	.+8      	; 0x772 <vfprintf+0x270>
 76a:	a9 c0       	rjmp	.+338    	; 0x8be <vfprintf+0x3bc>
 76c:	e9 2f       	mov	r30, r25
 76e:	e0 61       	ori	r30, 0x10	; 16
 770:	be 2e       	mov	r11, r30
 772:	b4 fe       	sbrs	r11, 4
 774:	0d c0       	rjmp	.+26     	; 0x790 <vfprintf+0x28e>
 776:	fb 2d       	mov	r31, r11
 778:	f4 60       	ori	r31, 0x04	; 4
 77a:	bf 2e       	mov	r11, r31
 77c:	09 c0       	rjmp	.+18     	; 0x790 <vfprintf+0x28e>
 77e:	34 fe       	sbrs	r3, 4
 780:	0a c0       	rjmp	.+20     	; 0x796 <vfprintf+0x294>
 782:	29 2f       	mov	r18, r25
 784:	26 60       	ori	r18, 0x06	; 6
 786:	b2 2e       	mov	r11, r18
 788:	06 c0       	rjmp	.+12     	; 0x796 <vfprintf+0x294>
 78a:	28 e0       	ldi	r18, 0x08	; 8
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	05 c0       	rjmp	.+10     	; 0x79a <vfprintf+0x298>
 790:	20 e1       	ldi	r18, 0x10	; 16
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	02 c0       	rjmp	.+4      	; 0x79a <vfprintf+0x298>
 796:	20 e1       	ldi	r18, 0x10	; 16
 798:	32 e0       	ldi	r19, 0x02	; 2
 79a:	f8 01       	movw	r30, r16
 79c:	b7 fe       	sbrs	r11, 7
 79e:	07 c0       	rjmp	.+14     	; 0x7ae <vfprintf+0x2ac>
 7a0:	60 81       	ld	r22, Z
 7a2:	71 81       	ldd	r23, Z+1	; 0x01
 7a4:	82 81       	ldd	r24, Z+2	; 0x02
 7a6:	93 81       	ldd	r25, Z+3	; 0x03
 7a8:	0c 5f       	subi	r16, 0xFC	; 252
 7aa:	1f 4f       	sbci	r17, 0xFF	; 255
 7ac:	06 c0       	rjmp	.+12     	; 0x7ba <vfprintf+0x2b8>
 7ae:	60 81       	ld	r22, Z
 7b0:	71 81       	ldd	r23, Z+1	; 0x01
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 5f       	subi	r16, 0xFE	; 254
 7b8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ba:	a3 01       	movw	r20, r6
 7bc:	f1 d0       	rcall	.+482    	; 0x9a0 <__ultoa_invert>
 7be:	88 2e       	mov	r8, r24
 7c0:	86 18       	sub	r8, r6
 7c2:	fb 2d       	mov	r31, r11
 7c4:	ff 77       	andi	r31, 0x7F	; 127
 7c6:	3f 2e       	mov	r3, r31
 7c8:	36 fe       	sbrs	r3, 6
 7ca:	0d c0       	rjmp	.+26     	; 0x7e6 <vfprintf+0x2e4>
 7cc:	23 2d       	mov	r18, r3
 7ce:	2e 7f       	andi	r18, 0xFE	; 254
 7d0:	a2 2e       	mov	r10, r18
 7d2:	89 14       	cp	r8, r9
 7d4:	58 f4       	brcc	.+22     	; 0x7ec <vfprintf+0x2ea>
 7d6:	34 fe       	sbrs	r3, 4
 7d8:	0b c0       	rjmp	.+22     	; 0x7f0 <vfprintf+0x2ee>
 7da:	32 fc       	sbrc	r3, 2
 7dc:	09 c0       	rjmp	.+18     	; 0x7f0 <vfprintf+0x2ee>
 7de:	83 2d       	mov	r24, r3
 7e0:	8e 7e       	andi	r24, 0xEE	; 238
 7e2:	a8 2e       	mov	r10, r24
 7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <vfprintf+0x2ee>
 7e6:	b8 2c       	mov	r11, r8
 7e8:	a3 2c       	mov	r10, r3
 7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <vfprintf+0x2f0>
 7ec:	b8 2c       	mov	r11, r8
 7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <vfprintf+0x2f0>
 7f0:	b9 2c       	mov	r11, r9
 7f2:	a4 fe       	sbrs	r10, 4
 7f4:	0f c0       	rjmp	.+30     	; 0x814 <vfprintf+0x312>
 7f6:	fe 01       	movw	r30, r28
 7f8:	e8 0d       	add	r30, r8
 7fa:	f1 1d       	adc	r31, r1
 7fc:	80 81       	ld	r24, Z
 7fe:	80 33       	cpi	r24, 0x30	; 48
 800:	21 f4       	brne	.+8      	; 0x80a <vfprintf+0x308>
 802:	9a 2d       	mov	r25, r10
 804:	99 7e       	andi	r25, 0xE9	; 233
 806:	a9 2e       	mov	r10, r25
 808:	09 c0       	rjmp	.+18     	; 0x81c <vfprintf+0x31a>
 80a:	a2 fe       	sbrs	r10, 2
 80c:	06 c0       	rjmp	.+12     	; 0x81a <vfprintf+0x318>
 80e:	b3 94       	inc	r11
 810:	b3 94       	inc	r11
 812:	04 c0       	rjmp	.+8      	; 0x81c <vfprintf+0x31a>
 814:	8a 2d       	mov	r24, r10
 816:	86 78       	andi	r24, 0x86	; 134
 818:	09 f0       	breq	.+2      	; 0x81c <vfprintf+0x31a>
 81a:	b3 94       	inc	r11
 81c:	a3 fc       	sbrc	r10, 3
 81e:	10 c0       	rjmp	.+32     	; 0x840 <vfprintf+0x33e>
 820:	a0 fe       	sbrs	r10, 0
 822:	06 c0       	rjmp	.+12     	; 0x830 <vfprintf+0x32e>
 824:	b2 14       	cp	r11, r2
 826:	80 f4       	brcc	.+32     	; 0x848 <vfprintf+0x346>
 828:	28 0c       	add	r2, r8
 82a:	92 2c       	mov	r9, r2
 82c:	9b 18       	sub	r9, r11
 82e:	0d c0       	rjmp	.+26     	; 0x84a <vfprintf+0x348>
 830:	b2 14       	cp	r11, r2
 832:	58 f4       	brcc	.+22     	; 0x84a <vfprintf+0x348>
 834:	b6 01       	movw	r22, r12
 836:	80 e2       	ldi	r24, 0x20	; 32
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	76 d0       	rcall	.+236    	; 0x928 <fputc>
 83c:	b3 94       	inc	r11
 83e:	f8 cf       	rjmp	.-16     	; 0x830 <vfprintf+0x32e>
 840:	b2 14       	cp	r11, r2
 842:	18 f4       	brcc	.+6      	; 0x84a <vfprintf+0x348>
 844:	2b 18       	sub	r2, r11
 846:	02 c0       	rjmp	.+4      	; 0x84c <vfprintf+0x34a>
 848:	98 2c       	mov	r9, r8
 84a:	21 2c       	mov	r2, r1
 84c:	a4 fe       	sbrs	r10, 4
 84e:	0f c0       	rjmp	.+30     	; 0x86e <vfprintf+0x36c>
 850:	b6 01       	movw	r22, r12
 852:	80 e3       	ldi	r24, 0x30	; 48
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	68 d0       	rcall	.+208    	; 0x928 <fputc>
 858:	a2 fe       	sbrs	r10, 2
 85a:	16 c0       	rjmp	.+44     	; 0x888 <vfprintf+0x386>
 85c:	a1 fc       	sbrc	r10, 1
 85e:	03 c0       	rjmp	.+6      	; 0x866 <vfprintf+0x364>
 860:	88 e7       	ldi	r24, 0x78	; 120
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	02 c0       	rjmp	.+4      	; 0x86a <vfprintf+0x368>
 866:	88 e5       	ldi	r24, 0x58	; 88
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	b6 01       	movw	r22, r12
 86c:	0c c0       	rjmp	.+24     	; 0x886 <vfprintf+0x384>
 86e:	8a 2d       	mov	r24, r10
 870:	86 78       	andi	r24, 0x86	; 134
 872:	51 f0       	breq	.+20     	; 0x888 <vfprintf+0x386>
 874:	a1 fe       	sbrs	r10, 1
 876:	02 c0       	rjmp	.+4      	; 0x87c <vfprintf+0x37a>
 878:	8b e2       	ldi	r24, 0x2B	; 43
 87a:	01 c0       	rjmp	.+2      	; 0x87e <vfprintf+0x37c>
 87c:	80 e2       	ldi	r24, 0x20	; 32
 87e:	a7 fc       	sbrc	r10, 7
 880:	8d e2       	ldi	r24, 0x2D	; 45
 882:	b6 01       	movw	r22, r12
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	50 d0       	rcall	.+160    	; 0x928 <fputc>
 888:	89 14       	cp	r8, r9
 88a:	30 f4       	brcc	.+12     	; 0x898 <vfprintf+0x396>
 88c:	b6 01       	movw	r22, r12
 88e:	80 e3       	ldi	r24, 0x30	; 48
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	4a d0       	rcall	.+148    	; 0x928 <fputc>
 894:	9a 94       	dec	r9
 896:	f8 cf       	rjmp	.-16     	; 0x888 <vfprintf+0x386>
 898:	8a 94       	dec	r8
 89a:	f3 01       	movw	r30, r6
 89c:	e8 0d       	add	r30, r8
 89e:	f1 1d       	adc	r31, r1
 8a0:	80 81       	ld	r24, Z
 8a2:	b6 01       	movw	r22, r12
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	40 d0       	rcall	.+128    	; 0x928 <fputc>
 8a8:	81 10       	cpse	r8, r1
 8aa:	f6 cf       	rjmp	.-20     	; 0x898 <vfprintf+0x396>
 8ac:	22 20       	and	r2, r2
 8ae:	09 f4       	brne	.+2      	; 0x8b2 <vfprintf+0x3b0>
 8b0:	4e ce       	rjmp	.-868    	; 0x54e <vfprintf+0x4c>
 8b2:	b6 01       	movw	r22, r12
 8b4:	80 e2       	ldi	r24, 0x20	; 32
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	37 d0       	rcall	.+110    	; 0x928 <fputc>
 8ba:	2a 94       	dec	r2
 8bc:	f7 cf       	rjmp	.-18     	; 0x8ac <vfprintf+0x3aa>
 8be:	f6 01       	movw	r30, r12
 8c0:	86 81       	ldd	r24, Z+6	; 0x06
 8c2:	97 81       	ldd	r25, Z+7	; 0x07
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <vfprintf+0x3c8>
 8c6:	8f ef       	ldi	r24, 0xFF	; 255
 8c8:	9f ef       	ldi	r25, 0xFF	; 255
 8ca:	2b 96       	adiw	r28, 0x0b	; 11
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	f8 94       	cli
 8d0:	de bf       	out	0x3e, r29	; 62
 8d2:	0f be       	out	0x3f, r0	; 63
 8d4:	cd bf       	out	0x3d, r28	; 61
 8d6:	df 91       	pop	r29
 8d8:	cf 91       	pop	r28
 8da:	1f 91       	pop	r17
 8dc:	0f 91       	pop	r16
 8de:	ff 90       	pop	r15
 8e0:	ef 90       	pop	r14
 8e2:	df 90       	pop	r13
 8e4:	cf 90       	pop	r12
 8e6:	bf 90       	pop	r11
 8e8:	af 90       	pop	r10
 8ea:	9f 90       	pop	r9
 8ec:	8f 90       	pop	r8
 8ee:	7f 90       	pop	r7
 8f0:	6f 90       	pop	r6
 8f2:	5f 90       	pop	r5
 8f4:	4f 90       	pop	r4
 8f6:	3f 90       	pop	r3
 8f8:	2f 90       	pop	r2
 8fa:	08 95       	ret

000008fc <strnlen_P>:
 8fc:	fc 01       	movw	r30, r24
 8fe:	05 90       	lpm	r0, Z+
 900:	61 50       	subi	r22, 0x01	; 1
 902:	70 40       	sbci	r23, 0x00	; 0
 904:	01 10       	cpse	r0, r1
 906:	d8 f7       	brcc	.-10     	; 0x8fe <strnlen_P+0x2>
 908:	80 95       	com	r24
 90a:	90 95       	com	r25
 90c:	8e 0f       	add	r24, r30
 90e:	9f 1f       	adc	r25, r31
 910:	08 95       	ret

00000912 <strnlen>:
 912:	fc 01       	movw	r30, r24
 914:	61 50       	subi	r22, 0x01	; 1
 916:	70 40       	sbci	r23, 0x00	; 0
 918:	01 90       	ld	r0, Z+
 91a:	01 10       	cpse	r0, r1
 91c:	d8 f7       	brcc	.-10     	; 0x914 <strnlen+0x2>
 91e:	80 95       	com	r24
 920:	90 95       	com	r25
 922:	8e 0f       	add	r24, r30
 924:	9f 1f       	adc	r25, r31
 926:	08 95       	ret

00000928 <fputc>:
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	fb 01       	movw	r30, r22
 932:	23 81       	ldd	r18, Z+3	; 0x03
 934:	21 fd       	sbrc	r18, 1
 936:	03 c0       	rjmp	.+6      	; 0x93e <fputc+0x16>
 938:	8f ef       	ldi	r24, 0xFF	; 255
 93a:	9f ef       	ldi	r25, 0xFF	; 255
 93c:	2c c0       	rjmp	.+88     	; 0x996 <fputc+0x6e>
 93e:	22 ff       	sbrs	r18, 2
 940:	16 c0       	rjmp	.+44     	; 0x96e <fputc+0x46>
 942:	46 81       	ldd	r20, Z+6	; 0x06
 944:	57 81       	ldd	r21, Z+7	; 0x07
 946:	24 81       	ldd	r18, Z+4	; 0x04
 948:	35 81       	ldd	r19, Z+5	; 0x05
 94a:	42 17       	cp	r20, r18
 94c:	53 07       	cpc	r21, r19
 94e:	44 f4       	brge	.+16     	; 0x960 <fputc+0x38>
 950:	a0 81       	ld	r26, Z
 952:	b1 81       	ldd	r27, Z+1	; 0x01
 954:	9d 01       	movw	r18, r26
 956:	2f 5f       	subi	r18, 0xFF	; 255
 958:	3f 4f       	sbci	r19, 0xFF	; 255
 95a:	31 83       	std	Z+1, r19	; 0x01
 95c:	20 83       	st	Z, r18
 95e:	8c 93       	st	X, r24
 960:	26 81       	ldd	r18, Z+6	; 0x06
 962:	37 81       	ldd	r19, Z+7	; 0x07
 964:	2f 5f       	subi	r18, 0xFF	; 255
 966:	3f 4f       	sbci	r19, 0xFF	; 255
 968:	37 83       	std	Z+7, r19	; 0x07
 96a:	26 83       	std	Z+6, r18	; 0x06
 96c:	14 c0       	rjmp	.+40     	; 0x996 <fputc+0x6e>
 96e:	8b 01       	movw	r16, r22
 970:	ec 01       	movw	r28, r24
 972:	fb 01       	movw	r30, r22
 974:	00 84       	ldd	r0, Z+8	; 0x08
 976:	f1 85       	ldd	r31, Z+9	; 0x09
 978:	e0 2d       	mov	r30, r0
 97a:	09 95       	icall
 97c:	89 2b       	or	r24, r25
 97e:	e1 f6       	brne	.-72     	; 0x938 <fputc+0x10>
 980:	d8 01       	movw	r26, r16
 982:	16 96       	adiw	r26, 0x06	; 6
 984:	8d 91       	ld	r24, X+
 986:	9c 91       	ld	r25, X
 988:	17 97       	sbiw	r26, 0x07	; 7
 98a:	01 96       	adiw	r24, 0x01	; 1
 98c:	17 96       	adiw	r26, 0x07	; 7
 98e:	9c 93       	st	X, r25
 990:	8e 93       	st	-X, r24
 992:	16 97       	sbiw	r26, 0x06	; 6
 994:	ce 01       	movw	r24, r28
 996:	df 91       	pop	r29
 998:	cf 91       	pop	r28
 99a:	1f 91       	pop	r17
 99c:	0f 91       	pop	r16
 99e:	08 95       	ret

000009a0 <__ultoa_invert>:
 9a0:	fa 01       	movw	r30, r20
 9a2:	aa 27       	eor	r26, r26
 9a4:	28 30       	cpi	r18, 0x08	; 8
 9a6:	51 f1       	breq	.+84     	; 0x9fc <__ultoa_invert+0x5c>
 9a8:	20 31       	cpi	r18, 0x10	; 16
 9aa:	81 f1       	breq	.+96     	; 0xa0c <__ultoa_invert+0x6c>
 9ac:	e8 94       	clt
 9ae:	6f 93       	push	r22
 9b0:	6e 7f       	andi	r22, 0xFE	; 254
 9b2:	6e 5f       	subi	r22, 0xFE	; 254
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255
 9b6:	8f 4f       	sbci	r24, 0xFF	; 255
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	af 4f       	sbci	r26, 0xFF	; 255
 9bc:	b1 e0       	ldi	r27, 0x01	; 1
 9be:	3e d0       	rcall	.+124    	; 0xa3c <__ultoa_invert+0x9c>
 9c0:	b4 e0       	ldi	r27, 0x04	; 4
 9c2:	3c d0       	rcall	.+120    	; 0xa3c <__ultoa_invert+0x9c>
 9c4:	67 0f       	add	r22, r23
 9c6:	78 1f       	adc	r23, r24
 9c8:	89 1f       	adc	r24, r25
 9ca:	9a 1f       	adc	r25, r26
 9cc:	a1 1d       	adc	r26, r1
 9ce:	68 0f       	add	r22, r24
 9d0:	79 1f       	adc	r23, r25
 9d2:	8a 1f       	adc	r24, r26
 9d4:	91 1d       	adc	r25, r1
 9d6:	a1 1d       	adc	r26, r1
 9d8:	6a 0f       	add	r22, r26
 9da:	71 1d       	adc	r23, r1
 9dc:	81 1d       	adc	r24, r1
 9de:	91 1d       	adc	r25, r1
 9e0:	a1 1d       	adc	r26, r1
 9e2:	20 d0       	rcall	.+64     	; 0xa24 <__ultoa_invert+0x84>
 9e4:	09 f4       	brne	.+2      	; 0x9e8 <__ultoa_invert+0x48>
 9e6:	68 94       	set
 9e8:	3f 91       	pop	r19
 9ea:	2a e0       	ldi	r18, 0x0A	; 10
 9ec:	26 9f       	mul	r18, r22
 9ee:	11 24       	eor	r1, r1
 9f0:	30 19       	sub	r19, r0
 9f2:	30 5d       	subi	r19, 0xD0	; 208
 9f4:	31 93       	st	Z+, r19
 9f6:	de f6       	brtc	.-74     	; 0x9ae <__ultoa_invert+0xe>
 9f8:	cf 01       	movw	r24, r30
 9fa:	08 95       	ret
 9fc:	46 2f       	mov	r20, r22
 9fe:	47 70       	andi	r20, 0x07	; 7
 a00:	40 5d       	subi	r20, 0xD0	; 208
 a02:	41 93       	st	Z+, r20
 a04:	b3 e0       	ldi	r27, 0x03	; 3
 a06:	0f d0       	rcall	.+30     	; 0xa26 <__ultoa_invert+0x86>
 a08:	c9 f7       	brne	.-14     	; 0x9fc <__ultoa_invert+0x5c>
 a0a:	f6 cf       	rjmp	.-20     	; 0x9f8 <__ultoa_invert+0x58>
 a0c:	46 2f       	mov	r20, r22
 a0e:	4f 70       	andi	r20, 0x0F	; 15
 a10:	40 5d       	subi	r20, 0xD0	; 208
 a12:	4a 33       	cpi	r20, 0x3A	; 58
 a14:	18 f0       	brcs	.+6      	; 0xa1c <__ultoa_invert+0x7c>
 a16:	49 5d       	subi	r20, 0xD9	; 217
 a18:	31 fd       	sbrc	r19, 1
 a1a:	40 52       	subi	r20, 0x20	; 32
 a1c:	41 93       	st	Z+, r20
 a1e:	02 d0       	rcall	.+4      	; 0xa24 <__ultoa_invert+0x84>
 a20:	a9 f7       	brne	.-22     	; 0xa0c <__ultoa_invert+0x6c>
 a22:	ea cf       	rjmp	.-44     	; 0x9f8 <__ultoa_invert+0x58>
 a24:	b4 e0       	ldi	r27, 0x04	; 4
 a26:	a6 95       	lsr	r26
 a28:	97 95       	ror	r25
 a2a:	87 95       	ror	r24
 a2c:	77 95       	ror	r23
 a2e:	67 95       	ror	r22
 a30:	ba 95       	dec	r27
 a32:	c9 f7       	brne	.-14     	; 0xa26 <__ultoa_invert+0x86>
 a34:	00 97       	sbiw	r24, 0x00	; 0
 a36:	61 05       	cpc	r22, r1
 a38:	71 05       	cpc	r23, r1
 a3a:	08 95       	ret
 a3c:	9b 01       	movw	r18, r22
 a3e:	ac 01       	movw	r20, r24
 a40:	0a 2e       	mov	r0, r26
 a42:	06 94       	lsr	r0
 a44:	57 95       	ror	r21
 a46:	47 95       	ror	r20
 a48:	37 95       	ror	r19
 a4a:	27 95       	ror	r18
 a4c:	ba 95       	dec	r27
 a4e:	c9 f7       	brne	.-14     	; 0xa42 <__ultoa_invert+0xa2>
 a50:	62 0f       	add	r22, r18
 a52:	73 1f       	adc	r23, r19
 a54:	84 1f       	adc	r24, r20
 a56:	95 1f       	adc	r25, r21
 a58:	a0 1d       	adc	r26, r0
 a5a:	08 95       	ret

00000a5c <_exit>:
 a5c:	f8 94       	cli

00000a5e <__stop_program>:
 a5e:	ff cf       	rjmp	.-2      	; 0xa5e <__stop_program>
