
gya03_09.19.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000034e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800112  00800112  000003f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000111d  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc5  00000000  00000000  00001609  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000648  00000000  00000000  000021ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00002818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000638  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ad  00000000  00000000  00002fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00003551  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	81 c1       	rjmp	.+770    	; 0x308 <__vector_1>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	09 c1       	rjmp	.+530    	; 0x254 <__vector_16>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ee e4       	ldi	r30, 0x4E	; 78
  a8:	f3 e0       	ldi	r31, 0x03	; 3
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 31       	cpi	r26, 0x12	; 18
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a2 e1       	ldi	r26, 0x12	; 18
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a7 31       	cpi	r26, 0x17	; 23
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	81 d0       	rcall	.+258    	; 0x1ce <main>
  cc:	3e c1       	rjmp	.+636    	; 0x34a <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <lcd_enable_pulse>:
* Output:
* Notes:
******************************************************************************/
void lcd_enable_pulse(void)
{
	PORTC = PORTC | (1<<LCD_E);
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_enable_pulse+0x8>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_enable_pulse+0xe>
	_delay_us(1);
	PORTC = PORTC & ~(1<<LCD_E);
  de:	88 b1       	in	r24, 0x08	; 8
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	88 b9       	out	0x08, r24	; 8
  e4:	08 95       	ret

000000e6 <lcd_init>:
* Input:
* Output:
* Notes:
******************************************************************************/
void lcd_init(void)
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f e7       	ldi	r18, 0x7F	; 127
  ec:	88 e3       	ldi	r24, 0x38	; 56
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <lcd_init+0xa>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_init+0x14>
  fa:	00 00       	nop
	_delay_ms(50);
	
	//function set 1
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (1<<LCD_D5) | (1<<LCD_D4);
  fc:	80 e3       	ldi	r24, 0x30	; 48
  fe:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 100:	e7 df       	rcall	.-50     	; 0xd0 <lcd_enable_pulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2a e6       	ldi	r18, 0x6A	; 106
 104:	2a 95       	dec	r18
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_init+0x1e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_init+0x24>
	_delay_us(40);
	
	//function set 2
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (1<<LCD_D5) | (0<<LCD_D4);
 10a:	d0 e2       	ldi	r29, 0x20	; 32
	lcd_enable_pulse();
 10c:	d8 b9       	out	0x08, r29	; 8
 10e:	e0 df       	rcall	.-64     	; 0xd0 <lcd_enable_pulse>
	PORTC = (0<<LCD_RS) | (1<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 110:	c0 e8       	ldi	r28, 0x80	; 128
	lcd_enable_pulse();
 112:	c8 b9       	out	0x08, r28	; 8
 114:	dd df       	rcall	.-70     	; 0xd0 <lcd_enable_pulse>
 116:	8a e6       	ldi	r24, 0x6A	; 106
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_init+0x32>
	_delay_us(40);
	
	//function set 3
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (1<<LCD_D5) | (0<<LCD_D4);
	lcd_enable_pulse();
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_init+0x38>
 11e:	d8 b9       	out	0x08, r29	; 8
	PORTC = (0<<LCD_RS) | (1<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 120:	d7 df       	rcall	.-82     	; 0xd0 <lcd_enable_pulse>
	lcd_enable_pulse();
 122:	c8 b9       	out	0x08, r28	; 8
 124:	d5 df       	rcall	.-86     	; 0xd0 <lcd_enable_pulse>
 126:	9a e6       	ldi	r25, 0x6A	; 106
 128:	9a 95       	dec	r25
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init+0x42>
	_delay_us(40);
	
	//display on/off control
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_init+0x48>
	lcd_enable_pulse();
 12e:	18 b8       	out	0x08, r1	; 8
 130:	cf df       	rcall	.-98     	; 0xd0 <lcd_enable_pulse>
	PORTC = (0<<LCD_RS) | (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5) | (1<<LCD_D4);
 132:	80 ef       	ldi	r24, 0xF0	; 240
 134:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 136:	cc df       	rcall	.-104    	; 0xd0 <lcd_enable_pulse>
 138:	2a e6       	ldi	r18, 0x6A	; 106
 13a:	2a 95       	dec	r18
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_init+0x54>
	_delay_us(40);
	
	//clear display
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_init+0x5a>
	lcd_enable_pulse();
 140:	18 b8       	out	0x08, r1	; 8
 142:	c6 df       	rcall	.-116    	; 0xd0 <lcd_enable_pulse>
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (1<<LCD_D4);
 144:	80 e1       	ldi	r24, 0x10	; 16
 146:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 148:	c3 df       	rcall	.-122    	; 0xd0 <lcd_enable_pulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	8f e9       	ldi	r24, 0x9F	; 159
 14c:	9f e0       	ldi	r25, 0x0F	; 15
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_init+0x68>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_init+0x6e>
	_delay_ms(2);
	
	//entry mode set
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 154:	00 00       	nop
	lcd_enable_pulse();
 156:	18 b8       	out	0x08, r1	; 8
 158:	bb df       	rcall	.-138    	; 0xd0 <lcd_enable_pulse>
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5) | (0<<LCD_D4);
 15a:	80 e6       	ldi	r24, 0x60	; 96
 15c:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 15e:	b8 df       	rcall	.-144    	; 0xd0 <lcd_enable_pulse>
 160:	8f e1       	ldi	r24, 0x1F	; 31
 162:	9e e4       	ldi	r25, 0x4E	; 78
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_init+0x7e>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_init+0x84>
 16a:	00 00       	nop
 16c:	df 91       	pop	r29
	_delay_ms(10);
}
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <lcd_write_char>:
 172:	cf 93       	push	r28
* Input:
* Output:
* Notes:
******************************************************************************/
void lcd_write_char(char c)
{
 174:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	2a e6       	ldi	r18, 0x6A	; 106
 178:	2a 95       	dec	r18
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_write_char+0x6>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_write_char+0xc>
	_delay_us(40);
	PORTC = (c & 0xf0) | (1<<LCD_RS);
 17e:	80 7f       	andi	r24, 0xF0	; 240
 180:	84 60       	ori	r24, 0x04	; 4
 182:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 184:	a5 df       	rcall	.-182    	; 0xd0 <lcd_enable_pulse>
	PORTC = ((c & 0x0f)<<4) | (1<<LCD_RS);
 186:	20 e1       	ldi	r18, 0x10	; 16
 188:	c2 9f       	mul	r28, r18
 18a:	c0 01       	movw	r24, r0
 18c:	11 24       	eor	r1, r1
 18e:	84 60       	ori	r24, 0x04	; 4
	lcd_enable_pulse();
 190:	88 b9       	out	0x08, r24	; 8
 192:	9e df       	rcall	.-196    	; 0xd0 <lcd_enable_pulse>
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <port_init>:
* Output:
* Notes:
******************************************************************************/
void port_init(void)
{
	DDRA = 0xff;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xff;
 19c:	82 b9       	out	0x02, r24	; 2
	
	DDRF = 0x0f;
 19e:	8f e0       	ldi	r24, 0x0F	; 15
 1a0:	80 bb       	out	0x10, r24	; 16
	PORTF = 0x0f;
 1a2:	81 bb       	out	0x11, r24	; 17
	
	DDRD = (0<<PD0);
 1a4:	1a b8       	out	0x0a, r1	; 10
	PORTD = (1<<PD0);
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	8b b9       	out	0x0b, r24	; 11
	
	DDRC = (1<<LCD_E) | (1<<LCD_RS) | (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5) | (1<<LCD_D4);
 1aa:	8c ef       	ldi	r24, 0xFC	; 252
 1ac:	87 b9       	out	0x07, r24	; 7
	PORTC = (0<<LCD_E) | (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 1ae:	18 b8       	out	0x08, r1	; 8
 1b0:	08 95       	ret

000001b2 <timer_init>:
* Output:
* Notes:			10 ms, CTC
******************************************************************************/
void timer_init(void)
{
	TCCR0A = (0<<WGM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
 1b2:	8d e0       	ldi	r24, 0x0D	; 13
 1b4:	84 bd       	out	0x24, r24	; 36
	OCR0A = 77;
 1b6:	8d e4       	ldi	r24, 0x4D	; 77
 1b8:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1<<OCIE0A);
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 1c0:	08 95       	ret

000001c2 <external_int_init>:
* Output:
* Notes:
******************************************************************************/
void external_int_init(void)
{
	EICRA = (1<<ISC01) | (0<<ISC00);
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1<<INT0);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	8d bb       	out	0x1d, r24	; 29
 1cc:	08 95       	ret

000001ce <main>:
* Input:
* Output:
* Notes:
******************************************************************************/
int main(void)
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	62 97       	sbiw	r28, 0x12	; 18
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
	port_init();
 1e2:	da df       	rcall	.-76     	; 0x198 <port_init>
	timer_init();
 1e4:	e6 df       	rcall	.-52     	; 0x1b2 <timer_init>
	external_int_init();
 1e6:	ed df       	rcall	.-38     	; 0x1c2 <external_int_init>
 1e8:	7e df       	rcall	.-260    	; 0xe6 <lcd_init>
	lcd_init();
 1ea:	78 94       	sei
 1ec:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <task_10ms>
	sei();
    /* Replace with your application code */
    while (1)
    {
		if(task_10ms == TRUE)
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	29 f4       	brne	.+10     	; 0x1fe <main+0x30>
 1f4:	91 b3       	in	r25, 0x11	; 17
 1f6:	89 27       	eor	r24, r25
		{
			PORTF ^= 0x01;
 1f8:	81 bb       	out	0x11, r24	; 17
 1fa:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <task_10ms>
			task_10ms = FALSE;
 1fe:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <task_100ms>
		}
		
		if(task_100ms == TRUE)
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	31 f4       	brne	.+12     	; 0x212 <main+0x44>
 206:	91 b3       	in	r25, 0x11	; 17
 208:	82 e0       	ldi	r24, 0x02	; 2
		{
			PORTF ^= 0X02;
 20a:	89 27       	eor	r24, r25
 20c:	81 bb       	out	0x11, r24	; 17
 20e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <task_100ms>
			task_100ms = FALSE;
 212:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <task_500ms>
		}
		
		if(task_500ms == TRUE)
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	49 f7       	brne	.-46     	; 0x1ec <main+0x1e>
 21a:	82 e1       	ldi	r24, 0x12	; 18
 21c:	e0 e0       	ldi	r30, 0x00	; 0
		{
			char szoveg[] = "szoveg a kijelzon";
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	de 01       	movw	r26, r28
 222:	11 96       	adiw	r26, 0x01	; 1
 224:	01 90       	ld	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	8a 95       	dec	r24
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x56>
 22c:	10 e0       	ldi	r17, 0x00	; 0
			uint8_t i=0;
 22e:	02 c0       	rjmp	.+4      	; 0x234 <main+0x66>
			while(szoveg[i] != 0)
 230:	a0 df       	rcall	.-192    	; 0x172 <lcd_write_char>
			{
				lcd_write_char(szoveg[i]);
 232:	1f 5f       	subi	r17, 0xFF	; 255
 234:	e1 e0       	ldi	r30, 0x01	; 1
				i++;
 236:	f0 e0       	ldi	r31, 0x00	; 0
		
		if(task_500ms == TRUE)
		{
			char szoveg[] = "szoveg a kijelzon";
			uint8_t i=0;
			while(szoveg[i] != 0)
 238:	ec 0f       	add	r30, r28
 23a:	fd 1f       	adc	r31, r29
 23c:	e1 0f       	add	r30, r17
 23e:	f1 1d       	adc	r31, r1
 240:	80 81       	ld	r24, Z
 242:	81 11       	cpse	r24, r1
 244:	f5 cf       	rjmp	.-22     	; 0x230 <main+0x62>
 246:	91 b3       	in	r25, 0x11	; 17
 248:	84 e0       	ldi	r24, 0x04	; 4
			{
				lcd_write_char(szoveg[i]);
				i++;
			}
			
			PORTF ^= 0x04;
 24a:	89 27       	eor	r24, r25
 24c:	81 bb       	out	0x11, r24	; 17
 24e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <task_500ms>
			task_500ms = FALSE;
 252:	cc cf       	rjmp	.-104    	; 0x1ec <main+0x1e>

00000254 <__vector_16>:
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0

/******************************************************************************
* Interrupt Routines
******************************************************************************/
ISR(TIMER0_COMP_vect) //timer CTC interrupt
{
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
	timer_cnt++;
 272:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__data_end>
 276:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__data_end+0x1>
 27a:	4f 5f       	subi	r20, 0xFF	; 255
 27c:	5f 4f       	sbci	r21, 0xFF	; 255
 27e:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <__data_end+0x1>
 282:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <__data_end>
	if((timer_cnt % 1) == 0) task_10ms = TRUE;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <task_10ms>
	if((timer_cnt % 10) == 0) task_100ms =TRUE;
 28c:	9a 01       	movw	r18, r20
 28e:	ad ec       	ldi	r26, 0xCD	; 205
 290:	bc ec       	ldi	r27, 0xCC	; 204
 292:	4c d0       	rcall	.+152    	; 0x32c <__umulhisi3>
 294:	96 95       	lsr	r25
 296:	87 95       	ror	r24
 298:	96 95       	lsr	r25
 29a:	87 95       	ror	r24
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	9c 01       	movw	r18, r24
 2a2:	22 0f       	add	r18, r18
 2a4:	33 1f       	adc	r19, r19
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	82 0f       	add	r24, r18
 2b4:	93 1f       	adc	r25, r19
 2b6:	48 17       	cp	r20, r24
 2b8:	59 07       	cpc	r21, r25
 2ba:	19 f4       	brne	.+6      	; 0x2c2 <__vector_16+0x6e>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <task_100ms>
	if((timer_cnt % 50) == 0) task_500ms = TRUE;
 2c2:	9a 01       	movw	r18, r20
 2c4:	36 95       	lsr	r19
 2c6:	27 95       	ror	r18
 2c8:	ab e7       	ldi	r26, 0x7B	; 123
 2ca:	b4 e1       	ldi	r27, 0x14	; 20
 2cc:	2f d0       	rcall	.+94     	; 0x32c <__umulhisi3>
 2ce:	96 95       	lsr	r25
 2d0:	87 95       	ror	r24
 2d2:	62 e3       	ldi	r22, 0x32	; 50
 2d4:	68 9f       	mul	r22, r24
 2d6:	90 01       	movw	r18, r0
 2d8:	69 9f       	mul	r22, r25
 2da:	30 0d       	add	r19, r0
 2dc:	11 24       	eor	r1, r1
 2de:	42 17       	cp	r20, r18
 2e0:	53 07       	cpc	r21, r19
 2e2:	19 f4       	brne	.+6      	; 0x2ea <__vector_16+0x96>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <task_500ms>
}
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	7f 91       	pop	r23
 2f4:	6f 91       	pop	r22
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <__vector_1>:

ISR(INT0_vect) //ext 0 interrupt
{
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
	
	PORTA = PORTA ^ 0x01;
 316:	92 b1       	in	r25, 0x02	; 2
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	89 27       	eor	r24, r25
 31c:	82 b9       	out	0x02, r24	; 2
}
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__umulhisi3>:
 32c:	a2 9f       	mul	r26, r18
 32e:	b0 01       	movw	r22, r0
 330:	b3 9f       	mul	r27, r19
 332:	c0 01       	movw	r24, r0
 334:	a3 9f       	mul	r26, r19
 336:	70 0d       	add	r23, r0
 338:	81 1d       	adc	r24, r1
 33a:	11 24       	eor	r1, r1
 33c:	91 1d       	adc	r25, r1
 33e:	b2 9f       	mul	r27, r18
 340:	70 0d       	add	r23, r0
 342:	81 1d       	adc	r24, r1
 344:	11 24       	eor	r1, r1
 346:	91 1d       	adc	r25, r1
 348:	08 95       	ret

0000034a <_exit>:
 34a:	f8 94       	cli

0000034c <__stop_program>:
 34c:	ff cf       	rjmp	.-2      	; 0x34c <__stop_program>
