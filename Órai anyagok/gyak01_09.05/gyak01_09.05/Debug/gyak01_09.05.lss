
gyak01_09.05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b96  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a44  00000000  00000000  00000ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000338  00000000  00000000  0000192a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000578  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fa  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000239a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	ec c0       	rjmp	.+472    	; 0x1de <__vector_1>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	74 c0       	rjmp	.+232    	; 0x12a <__vector_16>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a5 30       	cpi	r26, 0x05	; 5
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	1a d0       	rcall	.+52     	; 0xe6 <main>
  b2:	b6 c0       	rjmp	.+364    	; 0x220 <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <port_init>:
* Input:			-
* Output:			-
* Notes:			-
******************************************************************************/
void port_init(void) {
	DDRA = 0xff;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xff;
  ba:	82 b9       	out	0x02, r24	; 2
	
	DDRF = (1<<PF0) | (1<<PF1) | (1<<PF2) | (1<<PF3);
  bc:	8f e0       	ldi	r24, 0x0F	; 15
  be:	80 bb       	out	0x10, r24	; 16
	PORTF = 0x0f; // ugyanaz mint a felette levo sor
  c0:	81 bb       	out	0x11, r24	; 17
	
	DDRD = (0<<PD0); // bemenet
  c2:	1a b8       	out	0x0a, r1	; 10
	PORTD = (1<<PD0); // belso ellenallas bekapcsolva
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	8b b9       	out	0x0b, r24	; 11
  c8:	08 95       	ret

000000ca <timer_init>:
* Input:			-
* Output:			-
* Notes:			-
******************************************************************************/
void timer_init(void) {
	TCCR0A = (1<<WGM01) | (0<<WGM00) | (1<<CS02) | (0<<CS01) | (1<<CS00);
  ca:	8d e0       	ldi	r24, 0x0D	; 13
  cc:	84 bd       	out	0x24, r24	; 36
	OCR0A = 77; // igy lesz 100Hz-es a timer
  ce:	8d e4       	ldi	r24, 0x4D	; 77
  d0:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 = (1<<OCIE0A); // ezzel az interrupt mask-ot allitjuk be
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  d8:	08 95       	ret

000000da <external_interrupt_init>:
* Input:			-
* Output:			-
* Notes:			-
******************************************************************************/
void external_interrupt_init(void) {
	EICRA = (1<<ISC01) | (0<<ISC00); // ez letrehozza hogy a lefuto eleknel legyen az interrupt
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1<<INT0);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	8d bb       	out	0x1d, r24	; 29
  e4:	08 95       	ret

000000e6 <main>:
* Input:            
* Output:           
* Notes:            
******************************************************************************/
int main(void) {
	port_init();
  e6:	e7 df       	rcall	.-50     	; 0xb6 <port_init>
	timer_init();
  e8:	f0 df       	rcall	.-32     	; 0xca <timer_init>
	external_interrupt_init();
  ea:	f7 df       	rcall	.-18     	; 0xda <external_interrupt_init>
  ec:	78 94       	sei
	sei(); // set enable interrupt (mindig kell ha interrupt rutin van a scriptben)
  ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <task_10ms>
	/* Replace with your application code */
	while(1) {
		/*PORTF = PORTF ^ 0x01; // PORTF 0. bitjet villogtatjuk
		_delay_ms(500); // nem hatekony, mert ilyenkor a mikrovezerlo nem tud mast csinalni */
		
		if(task_10ms == TRUE) {
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	29 f4       	brne	.+10     	; 0x100 <main+0x1a>
  f6:	91 b3       	in	r25, 0x11	; 17
			PORTF ^= 0x01;
  f8:	89 27       	eor	r24, r25
  fa:	81 bb       	out	0x11, r24	; 17
  fc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <task_10ms>
			task_10ms = FALSE;
 100:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <task_100ms>
		}
		
		if(task_100ms == TRUE) {
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	31 f4       	brne	.+12     	; 0x114 <main+0x2e>
 108:	91 b3       	in	r25, 0x11	; 17
			PORTF = PORTF ^ (1<<PF1);
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	89 27       	eor	r24, r25
 10e:	81 bb       	out	0x11, r24	; 17
 110:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <task_100ms>
			task_100ms = FALSE;
 114:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <task_500ms>
		}
		
		if(task_500ms == TRUE) {
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	49 f7       	brne	.-46     	; 0xee <main+0x8>
 11c:	91 b3       	in	r25, 0x11	; 17
			PORTF = PORTF ^ (1<<PF2);
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	89 27       	eor	r24, r25
 122:	81 bb       	out	0x11, r24	; 17
 124:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <task_500ms>
			task_500ms = FALSE;
 128:	e2 cf       	rjmp	.-60     	; 0xee <main+0x8>

0000012a <__vector_16>:
 12a:	1f 92       	push	r1


/******************************************************************************
* Interrupt Routines
******************************************************************************/
ISR(TIMER0_COMP_vect) { // Timer0 compare match vector (ez kell nekunk)
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
	/*PORTA = PORTA ^ 0x01; // PORTA 0. bitjet villogtatjuk*/
	
	timer_cnt++;
 148:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 150:	4f 5f       	subi	r20, 0xFF	; 255
 152:	5f 4f       	sbci	r21, 0xFF	; 255
 154:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 158:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__DATA_REGION_ORIGIN__>
	if((timer_cnt % 1) == 0) task_10ms = TRUE;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <task_10ms>
	if((timer_cnt % 10) == 0) task_100ms = TRUE;
 162:	9a 01       	movw	r18, r20
 164:	ad ec       	ldi	r26, 0xCD	; 205
 166:	bc ec       	ldi	r27, 0xCC	; 204
 168:	4c d0       	rcall	.+152    	; 0x202 <__umulhisi3>
 16a:	96 95       	lsr	r25
 16c:	87 95       	ror	r24
 16e:	96 95       	lsr	r25
 170:	87 95       	ror	r24
 172:	96 95       	lsr	r25
 174:	87 95       	ror	r24
 176:	9c 01       	movw	r18, r24
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	82 0f       	add	r24, r18
 18a:	93 1f       	adc	r25, r19
 18c:	48 17       	cp	r20, r24
 18e:	59 07       	cpc	r21, r25
 190:	19 f4       	brne	.+6      	; 0x198 <__vector_16+0x6e>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <task_100ms>
	if((timer_cnt % 50) == 0) task_500ms = TRUE;
 198:	9a 01       	movw	r18, r20
 19a:	36 95       	lsr	r19
 19c:	27 95       	ror	r18
 19e:	ab e7       	ldi	r26, 0x7B	; 123
 1a0:	b4 e1       	ldi	r27, 0x14	; 20
 1a2:	2f d0       	rcall	.+94     	; 0x202 <__umulhisi3>
 1a4:	96 95       	lsr	r25
 1a6:	87 95       	ror	r24
 1a8:	62 e3       	ldi	r22, 0x32	; 50
 1aa:	68 9f       	mul	r22, r24
 1ac:	90 01       	movw	r18, r0
 1ae:	69 9f       	mul	r22, r25
 1b0:	30 0d       	add	r19, r0
 1b2:	11 24       	eor	r1, r1
 1b4:	42 17       	cp	r20, r18
 1b6:	53 07       	cpc	r21, r19
 1b8:	19 f4       	brne	.+6      	; 0x1c0 <__vector_16+0x96>
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <task_500ms>
}
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_1>:

ISR(INT0_vect) {
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
	PORTA = PORTA ^ 0x01;
 1ec:	92 b1       	in	r25, 0x02	; 2
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	89 27       	eor	r24, r25
 1f2:	82 b9       	out	0x02, r24	; 2
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <__umulhisi3>:
 202:	a2 9f       	mul	r26, r18
 204:	b0 01       	movw	r22, r0
 206:	b3 9f       	mul	r27, r19
 208:	c0 01       	movw	r24, r0
 20a:	a3 9f       	mul	r26, r19
 20c:	70 0d       	add	r23, r0
 20e:	81 1d       	adc	r24, r1
 210:	11 24       	eor	r1, r1
 212:	91 1d       	adc	r25, r1
 214:	b2 9f       	mul	r27, r18
 216:	70 0d       	add	r23, r0
 218:	81 1d       	adc	r24, r1
 21a:	11 24       	eor	r1, r1
 21c:	91 1d       	adc	r25, r1
 21e:	08 95       	ret

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
