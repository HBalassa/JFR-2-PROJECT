
gyak04_09.26.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000003fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a4  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c02  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b6  00000000  00000000  000022b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  0000296c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000657  00000000  00000000  00002b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d3  00000000  00000000  0000318b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000385e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	72 c1       	rjmp	.+740    	; 0x2ea <__vector_1>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	fa c0       	rjmp	.+500    	; 0x236 <__vector_16>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	5c c1       	rjmp	.+696    	; 0x30e <__vector_21>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a5 30       	cpi	r26, 0x05	; 5
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	9c d0       	rcall	.+312    	; 0x1ea <main>
  b2:	69 c1       	rjmp	.+722    	; 0x386 <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <lcd_enable_pulse>:
* Output:
* Notes:
******************************************************************************/
void lcd_enable_pulse(void)
{
	PORTC = PORTC | (1<<LCD_E);
  b6:	88 b1       	in	r24, 0x08	; 8
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_enable_pulse+0x8>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_enable_pulse+0xe>
	_delay_us(1);
	PORTC = PORTC & ~(1<<LCD_E);
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	87 7f       	andi	r24, 0xF7	; 247
  c8:	88 b9       	out	0x08, r24	; 8
  ca:	08 95       	ret

000000cc <lcd_init>:
* Input:
* Output:
* Notes:
******************************************************************************/
void lcd_init(void)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f e7       	ldi	r18, 0x7F	; 127
  d2:	88 e3       	ldi	r24, 0x38	; 56
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <lcd_init+0xa>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_init+0x14>
  e0:	00 00       	nop
	_delay_ms(50);
	
	//function set 1
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (1<<LCD_D5) | (1<<LCD_D4);
  e2:	80 e3       	ldi	r24, 0x30	; 48
  e4:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
  e6:	e7 df       	rcall	.-50     	; 0xb6 <lcd_enable_pulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2a e6       	ldi	r18, 0x6A	; 106
  ea:	2a 95       	dec	r18
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_init+0x1e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_init+0x24>
	_delay_us(40);
	
	//function set 2
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (1<<LCD_D5) | (0<<LCD_D4);
  f0:	d0 e2       	ldi	r29, 0x20	; 32
	lcd_enable_pulse();
  f2:	d8 b9       	out	0x08, r29	; 8
  f4:	e0 df       	rcall	.-64     	; 0xb6 <lcd_enable_pulse>
	PORTC = (0<<LCD_RS) | (1<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
  f6:	c0 e8       	ldi	r28, 0x80	; 128
	lcd_enable_pulse();
  f8:	c8 b9       	out	0x08, r28	; 8
  fa:	dd df       	rcall	.-70     	; 0xb6 <lcd_enable_pulse>
  fc:	8a e6       	ldi	r24, 0x6A	; 106
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_init+0x32>
	_delay_us(40);
	
	//function set 3
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (1<<LCD_D5) | (0<<LCD_D4);
	lcd_enable_pulse();
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_init+0x38>
 104:	d8 b9       	out	0x08, r29	; 8
	PORTC = (0<<LCD_RS) | (1<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 106:	d7 df       	rcall	.-82     	; 0xb6 <lcd_enable_pulse>
	lcd_enable_pulse();
 108:	c8 b9       	out	0x08, r28	; 8
 10a:	d5 df       	rcall	.-86     	; 0xb6 <lcd_enable_pulse>
 10c:	9a e6       	ldi	r25, 0x6A	; 106
 10e:	9a 95       	dec	r25
 110:	f1 f7       	brne	.-4      	; 0x10e <lcd_init+0x42>
	_delay_us(40);
	
	//display on/off control
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_init+0x48>
	lcd_enable_pulse();
 114:	18 b8       	out	0x08, r1	; 8
 116:	cf df       	rcall	.-98     	; 0xb6 <lcd_enable_pulse>
	PORTC = (0<<LCD_RS) | (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5) | (1<<LCD_D4);
 118:	80 ef       	ldi	r24, 0xF0	; 240
 11a:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 11c:	cc df       	rcall	.-104    	; 0xb6 <lcd_enable_pulse>
 11e:	2a e6       	ldi	r18, 0x6A	; 106
 120:	2a 95       	dec	r18
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_init+0x54>
	_delay_us(40);
	
	//clear display
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_init+0x5a>
	lcd_enable_pulse();
 126:	18 b8       	out	0x08, r1	; 8
 128:	c6 df       	rcall	.-116    	; 0xb6 <lcd_enable_pulse>
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (1<<LCD_D4);
 12a:	80 e1       	ldi	r24, 0x10	; 16
 12c:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 12e:	c3 df       	rcall	.-122    	; 0xb6 <lcd_enable_pulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	8f e9       	ldi	r24, 0x9F	; 159
 132:	9f e0       	ldi	r25, 0x0F	; 15
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_init+0x68>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_init+0x6e>
	_delay_ms(2);
	
	//entry mode set
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 13a:	00 00       	nop
	lcd_enable_pulse();
 13c:	18 b8       	out	0x08, r1	; 8
 13e:	bb df       	rcall	.-138    	; 0xb6 <lcd_enable_pulse>
	PORTC = (0<<LCD_RS) | (0<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5) | (0<<LCD_D4);
 140:	80 e6       	ldi	r24, 0x60	; 96
 142:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 144:	b8 df       	rcall	.-144    	; 0xb6 <lcd_enable_pulse>
 146:	8f e1       	ldi	r24, 0x1F	; 31
 148:	9e e4       	ldi	r25, 0x4E	; 78
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_init+0x7e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcd_init+0x84>
 150:	00 00       	nop
 152:	df 91       	pop	r29
	_delay_ms(10);
}
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <lcd_write_char>:
 158:	cf 93       	push	r28
* Input:
* Output:
* Notes:
******************************************************************************/
void lcd_write_char(char c)
{
 15a:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	2a e6       	ldi	r18, 0x6A	; 106
 15e:	2a 95       	dec	r18
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_write_char+0x6>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_write_char+0xc>
	_delay_us(40);
	PORTC = (c & 0xf0) | (1<<LCD_RS);
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	84 60       	ori	r24, 0x04	; 4
 168:	88 b9       	out	0x08, r24	; 8
	lcd_enable_pulse();
 16a:	a5 df       	rcall	.-182    	; 0xb6 <lcd_enable_pulse>
	PORTC = ((c & 0x0f)<<4) | (1<<LCD_RS);
 16c:	20 e1       	ldi	r18, 0x10	; 16
 16e:	c2 9f       	mul	r28, r18
 170:	c0 01       	movw	r24, r0
 172:	11 24       	eor	r1, r1
 174:	84 60       	ori	r24, 0x04	; 4
	lcd_enable_pulse();
 176:	88 b9       	out	0x08, r24	; 8
 178:	9e df       	rcall	.-196    	; 0xb6 <lcd_enable_pulse>
}
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <lcd_clear_display>:
 17e:	8a e6       	ldi	r24, 0x6A	; 106
 180:	8a 95       	dec	r24
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_clear_display+0x2>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_clear_display+0x8>
* Notes:
******************************************************************************/
void lcd_clear_display(void)
{
	_delay_us(40);
	PORTC = 0x00 | (0<<LCD_RS);
 186:	18 b8       	out	0x08, r1	; 8
	lcd_enable_pulse();
 188:	96 df       	rcall	.-212    	; 0xb6 <lcd_enable_pulse>
	PORTC = (0x01<<4) | (0<<LCD_RS);
 18a:	80 e1       	ldi	r24, 0x10	; 16
	lcd_enable_pulse();
 18c:	88 b9       	out	0x08, r24	; 8
 18e:	93 df       	rcall	.-218    	; 0xb6 <lcd_enable_pulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	8f e9       	ldi	r24, 0x9F	; 159
 192:	9f e0       	ldi	r25, 0x0F	; 15
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_clear_display+0x16>
 198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_clear_display+0x1c>
 19a:	00 00       	nop
 19c:	08 95       	ret

0000019e <port_init>:
* Output:
* Notes:
******************************************************************************/
void port_init(void)
{
	DDRA = 0xff;
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xff;
 1a2:	82 b9       	out	0x02, r24	; 2
	
	DDRF = 0x0f;
 1a4:	8f e0       	ldi	r24, 0x0F	; 15
 1a6:	80 bb       	out	0x10, r24	; 16
	PORTF = 0x0f;
 1a8:	81 bb       	out	0x11, r24	; 17
	
	DDRD = (0<<PD0);
 1aa:	1a b8       	out	0x0a, r1	; 10
	PORTD = (1<<PD0);
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	8b b9       	out	0x0b, r24	; 11
	
	DDRC = (1<<LCD_E) | (1<<LCD_RS) | (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5) | (1<<LCD_D4);
 1b0:	8c ef       	ldi	r24, 0xFC	; 252
 1b2:	87 b9       	out	0x07, r24	; 7
	PORTC = (0<<LCD_E) | (0<<LCD_RS) | (0<<LCD_D7) | (0<<LCD_D6) | (0<<LCD_D5) | (0<<LCD_D4);
 1b4:	18 b8       	out	0x08, r1	; 8
 1b6:	08 95       	ret

000001b8 <timer_init>:
* Output:
* Notes:			10 ms, CTC
******************************************************************************/
void timer_init(void)
{
	TCCR0A = (0<<WGM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
 1b8:	8d e0       	ldi	r24, 0x0D	; 13
 1ba:	84 bd       	out	0x24, r24	; 36
	OCR0A = 77;
 1bc:	8d e4       	ldi	r24, 0x4D	; 77
 1be:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1<<OCIE0A);
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 1c6:	08 95       	ret

000001c8 <external_int_init>:
* Output:
* Notes:
******************************************************************************/
void external_int_init(void)
{
	EICRA = (1<<ISC01) | (0<<ISC00);
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1<<INT0);
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	8d bb       	out	0x1d, r24	; 29
 1d2:	08 95       	ret

000001d4 <uart0_init>:
* Notes:
******************************************************************************/
void uart0_init(uint16_t baud)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 1d4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) baud;
 1d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* Set frame format: 8data, no parity & 1 stop bits */
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (1<<UCSZ1) | (1<<UCSZ0);
 1dc:	8e e0       	ldi	r24, 0x0E	; 14
 1de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
 1e2:	88 e9       	ldi	r24, 0x98	; 152
 1e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1e8:	08 95       	ret

000001ea <main>:
* Output:
* Notes:
******************************************************************************/
int main(void)
{
	port_init();
 1ea:	d9 df       	rcall	.-78     	; 0x19e <port_init>
	timer_init();
 1ec:	e5 df       	rcall	.-54     	; 0x1b8 <timer_init>
	external_int_init();
 1ee:	ec df       	rcall	.-40     	; 0x1c8 <external_int_init>
 1f0:	6d df       	rcall	.-294    	; 0xcc <lcd_init>
	lcd_init();
 1f2:	83 e3       	ldi	r24, 0x33	; 51
	uart0_init(BAUD9600);
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	ee df       	rcall	.-36     	; 0x1d4 <uart0_init>
 1f8:	78 94       	sei
 1fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <task_10ms>
	sei();
    /* Replace with your application code */
    while (1)
    {
		if(task_10ms == TRUE)
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	29 f4       	brne	.+10     	; 0x20c <main+0x22>
 202:	91 b3       	in	r25, 0x11	; 17
 204:	89 27       	eor	r24, r25
		{
			PORTF ^= 0x01;
 206:	81 bb       	out	0x11, r24	; 17
 208:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <task_10ms>
			task_10ms = FALSE;
 20c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <task_100ms>
		}
		
		if(task_100ms == TRUE)
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	31 f4       	brne	.+12     	; 0x220 <main+0x36>
 214:	91 b3       	in	r25, 0x11	; 17
 216:	82 e0       	ldi	r24, 0x02	; 2
		{
			PORTF ^= 0X02;
 218:	89 27       	eor	r24, r25
 21a:	81 bb       	out	0x11, r24	; 17
 21c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <task_100ms>
			task_100ms = FALSE;
 220:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <task_500ms>
		}
		
		if(task_500ms == TRUE)
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	49 f7       	brne	.-46     	; 0x1fa <main+0x10>
 228:	91 b3       	in	r25, 0x11	; 17
 22a:	84 e0       	ldi	r24, 0x04	; 4
			//lcd_write_string(szoveg);
			//lcd_set_cursor_position(0);
			//lcd_clear_display();
			//lcd_write_string("masik szoveg");
			
			PORTF ^= 0x04;
 22c:	89 27       	eor	r24, r25
 22e:	81 bb       	out	0x11, r24	; 17
 230:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <task_500ms>
			task_500ms = FALSE;
 234:	e2 cf       	rjmp	.-60     	; 0x1fa <main+0x10>

00000236 <__vector_16>:
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0

/******************************************************************************
* Interrupt Routines
******************************************************************************/
ISR(TIMER0_COMP_vect) //timer CTC interrupt
{
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	4f 93       	push	r20
 246:	5f 93       	push	r21
 248:	6f 93       	push	r22
 24a:	7f 93       	push	r23
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
	timer_cnt++;
 254:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 258:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 25c:	4f 5f       	subi	r20, 0xFF	; 255
 25e:	5f 4f       	sbci	r21, 0xFF	; 255
 260:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 264:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__DATA_REGION_ORIGIN__>
	if((timer_cnt % 1) == 0) task_10ms = TRUE;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <task_10ms>
	if((timer_cnt % 10) == 0) task_100ms =TRUE;
 26e:	9a 01       	movw	r18, r20
 270:	ad ec       	ldi	r26, 0xCD	; 205
 272:	bc ec       	ldi	r27, 0xCC	; 204
 274:	79 d0       	rcall	.+242    	; 0x368 <__umulhisi3>
 276:	96 95       	lsr	r25
 278:	87 95       	ror	r24
 27a:	96 95       	lsr	r25
 27c:	87 95       	ror	r24
 27e:	96 95       	lsr	r25
 280:	87 95       	ror	r24
 282:	9c 01       	movw	r18, r24
 284:	22 0f       	add	r18, r18
 286:	33 1f       	adc	r19, r19
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	82 0f       	add	r24, r18
 296:	93 1f       	adc	r25, r19
 298:	48 17       	cp	r20, r24
 29a:	59 07       	cpc	r21, r25
 29c:	19 f4       	brne	.+6      	; 0x2a4 <__vector_16+0x6e>
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <task_100ms>
	if((timer_cnt % 50) == 0) task_500ms = TRUE;
 2a4:	9a 01       	movw	r18, r20
 2a6:	36 95       	lsr	r19
 2a8:	27 95       	ror	r18
 2aa:	ab e7       	ldi	r26, 0x7B	; 123
 2ac:	b4 e1       	ldi	r27, 0x14	; 20
 2ae:	5c d0       	rcall	.+184    	; 0x368 <__umulhisi3>
 2b0:	96 95       	lsr	r25
 2b2:	87 95       	ror	r24
 2b4:	62 e3       	ldi	r22, 0x32	; 50
 2b6:	68 9f       	mul	r22, r24
 2b8:	90 01       	movw	r18, r0
 2ba:	69 9f       	mul	r22, r25
 2bc:	30 0d       	add	r19, r0
 2be:	11 24       	eor	r1, r1
 2c0:	42 17       	cp	r20, r18
 2c2:	53 07       	cpc	r21, r19
 2c4:	19 f4       	brne	.+6      	; 0x2cc <__vector_16+0x96>
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <task_500ms>
}
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <__vector_1>:

ISR(INT0_vect) //ext 0 interrupt
{
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
	
	PORTA = PORTA ^ 0x01;
 2f8:	92 b1       	in	r25, 0x02	; 2
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	89 27       	eor	r24, r25
 2fe:	82 b9       	out	0x02, r24	; 2
}
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <__vector_21>:

ISR(USART0_RX_vect)
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	0b b6       	in	r0, 0x3b	; 59
 31a:	0f 92       	push	r0
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
	char c = UDR0;
 334:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(c == 0x7F)
 338:	8f 37       	cpi	r24, 0x7F	; 127
 33a:	11 f4       	brne	.+4      	; 0x340 <__vector_21+0x32>
		lcd_clear_display();
 33c:	20 df       	rcall	.-448    	; 0x17e <lcd_clear_display>
 33e:	01 c0       	rjmp	.+2      	; 0x342 <__vector_21+0x34>
	else
		lcd_write_char(c);
 340:	0b df       	rcall	.-490    	; 0x158 <lcd_write_char>
 342:	ff 91       	pop	r31
}
 344:	ef 91       	pop	r30
 346:	bf 91       	pop	r27
 348:	af 91       	pop	r26
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	7f 91       	pop	r23
 350:	6f 91       	pop	r22
 352:	5f 91       	pop	r21
 354:	4f 91       	pop	r20
 356:	3f 91       	pop	r19
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	0b be       	out	0x3b, r0	; 59
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <__umulhisi3>:
 368:	a2 9f       	mul	r26, r18
 36a:	b0 01       	movw	r22, r0
 36c:	b3 9f       	mul	r27, r19
 36e:	c0 01       	movw	r24, r0
 370:	a3 9f       	mul	r26, r19
 372:	70 0d       	add	r23, r0
 374:	81 1d       	adc	r24, r1
 376:	11 24       	eor	r1, r1
 378:	91 1d       	adc	r25, r1
 37a:	b2 9f       	mul	r27, r18
 37c:	70 0d       	add	r23, r0
 37e:	81 1d       	adc	r24, r1
 380:	11 24       	eor	r1, r1
 382:	91 1d       	adc	r25, r1
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
